
Lab3Part1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062d8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08006468  08006468  00007468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006810  08006810  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006810  08006810  00007810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006818  08006818  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006818  08006818  00007818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800681c  0800681c  0000781c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006820  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000081d4  2**0
                  CONTENTS
 10 .bss          00000240  200001d4  200001d4  000081d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000414  20000414  000081d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000926b  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001820  00000000  00000000  0001146f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000770  00000000  00000000  00012c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005a5  00000000  00000000  00013400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b16f  00000000  00000000  000139a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a071  00000000  00000000  0002eb14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c619  00000000  00000000  00038b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d519e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002cc4  00000000  00000000  000d51e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  000d7ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006450 	.word	0x08006450

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08006450 	.word	0x08006450

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bac:	f000 faae 	bl	800110c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f812 	bl	8000bd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f000 f89a 	bl	8000cec <MX_GPIO_Init>
  MX_DMA_Init();
 8000bb8:	f000 f87a 	bl	8000cb0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000bbc:	f000 f848 	bl	8000c50 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA (&huart2, UART2_rxBuffer, 1);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	4903      	ldr	r1, [pc, #12]	@ (8000bd0 <main+0x28>)
 8000bc4:	4803      	ldr	r0, [pc, #12]	@ (8000bd4 <main+0x2c>)
 8000bc6:	f002 fa56 	bl	8003076 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bca:	bf00      	nop
 8000bcc:	e7fd      	b.n	8000bca <main+0x22>
 8000bce:	bf00      	nop
 8000bd0:	200002bc 	.word	0x200002bc
 8000bd4:	200001f0 	.word	0x200001f0

08000bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b090      	sub	sp, #64	@ 0x40
 8000bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bde:	f107 0318 	add.w	r3, r7, #24
 8000be2:	2228      	movs	r2, #40	@ 0x28
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f003 fd0f 	bl	800460a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c02:	2310      	movs	r3, #16
 8000c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0a:	f107 0318 	add.w	r3, r7, #24
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 fefc 	bl	8001a0c <HAL_RCC_OscConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c1a:	f000 f8a3 	bl	8000d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1e:	230f      	movs	r3, #15
 8000c20:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f001 ff26 	bl	8002a88 <HAL_RCC_ClockConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c42:	f000 f88f 	bl	8000d64 <Error_Handler>
  }
}
 8000c46:	bf00      	nop
 8000c48:	3740      	adds	r7, #64	@ 0x40
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c54:	4b14      	ldr	r3, [pc, #80]	@ (8000ca8 <MX_USART2_UART_Init+0x58>)
 8000c56:	4a15      	ldr	r2, [pc, #84]	@ (8000cac <MX_USART2_UART_Init+0x5c>)
 8000c58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000c5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ca8 <MX_USART2_UART_Init+0x58>)
 8000c5c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000c60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c62:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <MX_USART2_UART_Init+0x58>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca8 <MX_USART2_UART_Init+0x58>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca8 <MX_USART2_UART_Init+0x58>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <MX_USART2_UART_Init+0x58>)
 8000c76:	220c      	movs	r2, #12
 8000c78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca8 <MX_USART2_UART_Init+0x58>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c80:	4b09      	ldr	r3, [pc, #36]	@ (8000ca8 <MX_USART2_UART_Init+0x58>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c86:	4b08      	ldr	r3, [pc, #32]	@ (8000ca8 <MX_USART2_UART_Init+0x58>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <MX_USART2_UART_Init+0x58>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c92:	4805      	ldr	r0, [pc, #20]	@ (8000ca8 <MX_USART2_UART_Init+0x58>)
 8000c94:	f002 f918 	bl	8002ec8 <HAL_UART_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c9e:	f000 f861 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200001f0 	.word	0x200001f0
 8000cac:	40004400 	.word	0x40004400

08000cb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <MX_DMA_Init+0x38>)
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce8 <MX_DMA_Init+0x38>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6153      	str	r3, [r2, #20]
 8000cc2:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <MX_DMA_Init+0x38>)
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2010      	movs	r0, #16
 8000cd4:	f000 fb5b 	bl	800138e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000cd8:	2010      	movs	r0, #16
 8000cda:	f000 fb74 	bl	80013c6 <HAL_NVIC_EnableIRQ>

}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000

08000cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d30 <MX_GPIO_Init+0x44>)
 8000cf4:	695b      	ldr	r3, [r3, #20]
 8000cf6:	4a0e      	ldr	r2, [pc, #56]	@ (8000d30 <MX_GPIO_Init+0x44>)
 8000cf8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000cfc:	6153      	str	r3, [r2, #20]
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000d30 <MX_GPIO_Init+0x44>)
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	4b09      	ldr	r3, [pc, #36]	@ (8000d30 <MX_GPIO_Init+0x44>)
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	4a08      	ldr	r2, [pc, #32]	@ (8000d30 <MX_GPIO_Init+0x44>)
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d14:	6153      	str	r3, [r2, #20]
 8000d16:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <MX_GPIO_Init+0x44>)
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40021000 	.word	0x40021000

08000d34 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, UART2_rxBuffer, 1, 100);
 8000d3c:	2364      	movs	r3, #100	@ 0x64
 8000d3e:	2201      	movs	r2, #1
 8000d40:	4906      	ldr	r1, [pc, #24]	@ (8000d5c <HAL_UART_RxCpltCallback+0x28>)
 8000d42:	4807      	ldr	r0, [pc, #28]	@ (8000d60 <HAL_UART_RxCpltCallback+0x2c>)
 8000d44:	f002 f90e 	bl	8002f64 <HAL_UART_Transmit>
HAL_UART_Receive_DMA (&huart2, UART2_rxBuffer, 1);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	4904      	ldr	r1, [pc, #16]	@ (8000d5c <HAL_UART_RxCpltCallback+0x28>)
 8000d4c:	4804      	ldr	r0, [pc, #16]	@ (8000d60 <HAL_UART_RxCpltCallback+0x2c>)
 8000d4e:	f002 f992 	bl	8003076 <HAL_UART_Receive_DMA>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200002bc 	.word	0x200002bc
 8000d60:	200001f0 	.word	0x200001f0

08000d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d68:	b672      	cpsid	i
}
 8000d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <Error_Handler+0x8>

08000d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	4b0f      	ldr	r3, [pc, #60]	@ (8000db4 <HAL_MspInit+0x44>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000db4 <HAL_MspInit+0x44>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6193      	str	r3, [r2, #24]
 8000d82:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <HAL_MspInit+0x44>)
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <HAL_MspInit+0x44>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	4a08      	ldr	r2, [pc, #32]	@ (8000db4 <HAL_MspInit+0x44>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d98:	61d3      	str	r3, [r2, #28]
 8000d9a:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <HAL_MspInit+0x44>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40021000 	.word	0x40021000

08000db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	@ 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a2b      	ldr	r2, [pc, #172]	@ (8000e84 <HAL_UART_MspInit+0xcc>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d14f      	bne.n	8000e7a <HAL_UART_MspInit+0xc2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dda:	4b2b      	ldr	r3, [pc, #172]	@ (8000e88 <HAL_UART_MspInit+0xd0>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	4a2a      	ldr	r2, [pc, #168]	@ (8000e88 <HAL_UART_MspInit+0xd0>)
 8000de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000de4:	61d3      	str	r3, [r2, #28]
 8000de6:	4b28      	ldr	r3, [pc, #160]	@ (8000e88 <HAL_UART_MspInit+0xd0>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	4b25      	ldr	r3, [pc, #148]	@ (8000e88 <HAL_UART_MspInit+0xd0>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	4a24      	ldr	r2, [pc, #144]	@ (8000e88 <HAL_UART_MspInit+0xd0>)
 8000df8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dfc:	6153      	str	r3, [r2, #20]
 8000dfe:	4b22      	ldr	r3, [pc, #136]	@ (8000e88 <HAL_UART_MspInit+0xd0>)
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000e0a:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e1c:	2307      	movs	r3, #7
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4619      	mov	r1, r3
 8000e26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e2a:	f000 fc7d 	bl	8001728 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000e2e:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <HAL_UART_MspInit+0xd4>)
 8000e30:	4a17      	ldr	r2, [pc, #92]	@ (8000e90 <HAL_UART_MspInit+0xd8>)
 8000e32:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e34:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <HAL_UART_MspInit+0xd4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	@ (8000e8c <HAL_UART_MspInit+0xd4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e40:	4b12      	ldr	r3, [pc, #72]	@ (8000e8c <HAL_UART_MspInit+0xd4>)
 8000e42:	2280      	movs	r2, #128	@ 0x80
 8000e44:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e46:	4b11      	ldr	r3, [pc, #68]	@ (8000e8c <HAL_UART_MspInit+0xd4>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e8c <HAL_UART_MspInit+0xd4>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <HAL_UART_MspInit+0xd4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <HAL_UART_MspInit+0xd4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e5e:	480b      	ldr	r0, [pc, #44]	@ (8000e8c <HAL_UART_MspInit+0xd4>)
 8000e60:	f000 facb 	bl	80013fa <HAL_DMA_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8000e6a:	f7ff ff7b 	bl	8000d64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a06      	ldr	r2, [pc, #24]	@ (8000e8c <HAL_UART_MspInit+0xd4>)
 8000e72:	675a      	str	r2, [r3, #116]	@ 0x74
 8000e74:	4a05      	ldr	r2, [pc, #20]	@ (8000e8c <HAL_UART_MspInit+0xd4>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e7a:	bf00      	nop
 8000e7c:	3728      	adds	r7, #40	@ 0x28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40004400 	.word	0x40004400
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	20000278 	.word	0x20000278
 8000e90:	4002006c 	.word	0x4002006c

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <NMI_Handler+0x4>

08000e9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <HardFault_Handler+0x4>

08000ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <MemManage_Handler+0x4>

08000eac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <BusFault_Handler+0x4>

08000eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <UsageFault_Handler+0x4>

08000ebc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eea:	f000 f955 	bl	8001198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ef8:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <DMA1_Channel6_IRQHandler+0x10>)
 8000efa:	f000 fb24 	bl	8001546 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000278 	.word	0x20000278

08000f08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return 1;
 8000f0c:	2301      	movs	r3, #1
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <_kill>:

int _kill(int pid, int sig)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f22:	f003 fbc5 	bl	80046b0 <__errno>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2216      	movs	r2, #22
 8000f2a:	601a      	str	r2, [r3, #0]
  return -1;
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <_exit>:

void _exit (int status)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff ffe7 	bl	8000f18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f4a:	bf00      	nop
 8000f4c:	e7fd      	b.n	8000f4a <_exit+0x12>

08000f4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b086      	sub	sp, #24
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	60f8      	str	r0, [r7, #12]
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	e00a      	b.n	8000f76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f60:	f3af 8000 	nop.w
 8000f64:	4601      	mov	r1, r0
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	1c5a      	adds	r2, r3, #1
 8000f6a:	60ba      	str	r2, [r7, #8]
 8000f6c:	b2ca      	uxtb	r2, r1
 8000f6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	3301      	adds	r3, #1
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	dbf0      	blt.n	8000f60 <_read+0x12>
  }

  return len;
 8000f7e:	687b      	ldr	r3, [r7, #4]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	e009      	b.n	8000fae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	1c5a      	adds	r2, r3, #1
 8000f9e:	60ba      	str	r2, [r7, #8]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	3301      	adds	r3, #1
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	697a      	ldr	r2, [r7, #20]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	dbf1      	blt.n	8000f9a <_write+0x12>
  }
  return len;
 8000fb6:	687b      	ldr	r3, [r7, #4]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <_close>:

int _close(int file)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fe8:	605a      	str	r2, [r3, #4]
  return 0;
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <_isatty>:

int _isatty(int file)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001000:	2301      	movs	r3, #1
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800100e:	b480      	push	{r7}
 8001010:	b085      	sub	sp, #20
 8001012:	af00      	add	r7, sp, #0
 8001014:	60f8      	str	r0, [r7, #12]
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001030:	4a14      	ldr	r2, [pc, #80]	@ (8001084 <_sbrk+0x5c>)
 8001032:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <_sbrk+0x60>)
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800103c:	4b13      	ldr	r3, [pc, #76]	@ (800108c <_sbrk+0x64>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001044:	4b11      	ldr	r3, [pc, #68]	@ (800108c <_sbrk+0x64>)
 8001046:	4a12      	ldr	r2, [pc, #72]	@ (8001090 <_sbrk+0x68>)
 8001048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104a:	4b10      	ldr	r3, [pc, #64]	@ (800108c <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	429a      	cmp	r2, r3
 8001056:	d207      	bcs.n	8001068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001058:	f003 fb2a 	bl	80046b0 <__errno>
 800105c:	4603      	mov	r3, r0
 800105e:	220c      	movs	r2, #12
 8001060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
 8001066:	e009      	b.n	800107c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001068:	4b08      	ldr	r3, [pc, #32]	@ (800108c <_sbrk+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	4a05      	ldr	r2, [pc, #20]	@ (800108c <_sbrk+0x64>)
 8001078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107a:	68fb      	ldr	r3, [r7, #12]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20003000 	.word	0x20003000
 8001088:	00000400 	.word	0x00000400
 800108c:	200002c0 	.word	0x200002c0
 8001090:	20000418 	.word	0x20000418

08001094 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001098:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <SystemInit+0x20>)
 800109a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800109e:	4a05      	ldr	r2, [pc, #20]	@ (80010b4 <SystemInit+0x20>)
 80010a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010f0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80010bc:	f7ff ffea 	bl	8001094 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c0:	480c      	ldr	r0, [pc, #48]	@ (80010f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80010c2:	490d      	ldr	r1, [pc, #52]	@ (80010f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010c4:	4a0d      	ldr	r2, [pc, #52]	@ (80010fc <LoopForever+0xe>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c8:	e002      	b.n	80010d0 <LoopCopyDataInit>

080010ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ce:	3304      	adds	r3, #4

080010d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d4:	d3f9      	bcc.n	80010ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001100 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001104 <LoopForever+0x16>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010dc:	e001      	b.n	80010e2 <LoopFillZerobss>

080010de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e0:	3204      	adds	r2, #4

080010e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e4:	d3fb      	bcc.n	80010de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010e6:	f003 fae9 	bl	80046bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ea:	f7ff fd5d 	bl	8000ba8 <main>

080010ee <LoopForever>:

LoopForever:
    b LoopForever
 80010ee:	e7fe      	b.n	80010ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010f0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80010f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80010fc:	08006820 	.word	0x08006820
  ldr r2, =_sbss
 8001100:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001104:	20000414 	.word	0x20000414

08001108 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001108:	e7fe      	b.n	8001108 <ADC1_2_IRQHandler>
	...

0800110c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <HAL_Init+0x28>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a07      	ldr	r2, [pc, #28]	@ (8001134 <HAL_Init+0x28>)
 8001116:	f043 0310 	orr.w	r3, r3, #16
 800111a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111c:	2003      	movs	r0, #3
 800111e:	f000 f92b 	bl	8001378 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001122:	2000      	movs	r0, #0
 8001124:	f000 f808 	bl	8001138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001128:	f7ff fe22 	bl	8000d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40022000 	.word	0x40022000

08001138 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <HAL_InitTick+0x54>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <HAL_InitTick+0x58>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800114e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f943 	bl	80013e2 <HAL_SYSTICK_Config>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e00e      	b.n	8001184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b0f      	cmp	r3, #15
 800116a:	d80a      	bhi.n	8001182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116c:	2200      	movs	r2, #0
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f000 f90b 	bl	800138e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001178:	4a06      	ldr	r2, [pc, #24]	@ (8001194 <HAL_InitTick+0x5c>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	e000      	b.n	8001184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000000 	.word	0x20000000
 8001190:	20000008 	.word	0x20000008
 8001194:	20000004 	.word	0x20000004

08001198 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <HAL_IncTick+0x20>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <HAL_IncTick+0x24>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a04      	ldr	r2, [pc, #16]	@ (80011bc <HAL_IncTick+0x24>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000008 	.word	0x20000008
 80011bc:	200002c4 	.word	0x200002c4

080011c0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return uwTick;  
 80011c4:	4b03      	ldr	r3, [pc, #12]	@ (80011d4 <HAL_GetTick+0x14>)
 80011c6:	681b      	ldr	r3, [r3, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	200002c4 	.word	0x200002c4

080011d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e8:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <__NVIC_SetPriorityGrouping+0x44>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011f4:	4013      	ands	r3, r2
 80011f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001200:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001204:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800120a:	4a04      	ldr	r2, [pc, #16]	@ (800121c <__NVIC_SetPriorityGrouping+0x44>)
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	60d3      	str	r3, [r2, #12]
}
 8001210:	bf00      	nop
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001224:	4b04      	ldr	r3, [pc, #16]	@ (8001238 <__NVIC_GetPriorityGrouping+0x18>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	0a1b      	lsrs	r3, r3, #8
 800122a:	f003 0307 	and.w	r3, r3, #7
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	2b00      	cmp	r3, #0
 800124c:	db0b      	blt.n	8001266 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	f003 021f 	and.w	r2, r3, #31
 8001254:	4907      	ldr	r1, [pc, #28]	@ (8001274 <__NVIC_EnableIRQ+0x38>)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	095b      	lsrs	r3, r3, #5
 800125c:	2001      	movs	r0, #1
 800125e:	fa00 f202 	lsl.w	r2, r0, r2
 8001262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000e100 	.word	0xe000e100

08001278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001288:	2b00      	cmp	r3, #0
 800128a:	db0a      	blt.n	80012a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	b2da      	uxtb	r2, r3
 8001290:	490c      	ldr	r1, [pc, #48]	@ (80012c4 <__NVIC_SetPriority+0x4c>)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	0112      	lsls	r2, r2, #4
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	440b      	add	r3, r1
 800129c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a0:	e00a      	b.n	80012b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4908      	ldr	r1, [pc, #32]	@ (80012c8 <__NVIC_SetPriority+0x50>)
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	3b04      	subs	r3, #4
 80012b0:	0112      	lsls	r2, r2, #4
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	440b      	add	r3, r1
 80012b6:	761a      	strb	r2, [r3, #24]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000e100 	.word	0xe000e100
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	@ 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f1c3 0307 	rsb	r3, r3, #7
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	bf28      	it	cs
 80012ea:	2304      	movcs	r3, #4
 80012ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3304      	adds	r3, #4
 80012f2:	2b06      	cmp	r3, #6
 80012f4:	d902      	bls.n	80012fc <NVIC_EncodePriority+0x30>
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3b03      	subs	r3, #3
 80012fa:	e000      	b.n	80012fe <NVIC_EncodePriority+0x32>
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	f04f 32ff 	mov.w	r2, #4294967295
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43da      	mvns	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	401a      	ands	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001314:	f04f 31ff 	mov.w	r1, #4294967295
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa01 f303 	lsl.w	r3, r1, r3
 800131e:	43d9      	mvns	r1, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	4313      	orrs	r3, r2
         );
}
 8001326:	4618      	mov	r0, r3
 8001328:	3724      	adds	r7, #36	@ 0x24
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001344:	d301      	bcc.n	800134a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001346:	2301      	movs	r3, #1
 8001348:	e00f      	b.n	800136a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134a:	4a0a      	ldr	r2, [pc, #40]	@ (8001374 <SysTick_Config+0x40>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001352:	210f      	movs	r1, #15
 8001354:	f04f 30ff 	mov.w	r0, #4294967295
 8001358:	f7ff ff8e 	bl	8001278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800135c:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <SysTick_Config+0x40>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001362:	4b04      	ldr	r3, [pc, #16]	@ (8001374 <SysTick_Config+0x40>)
 8001364:	2207      	movs	r2, #7
 8001366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	e000e010 	.word	0xe000e010

08001378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff29 	bl	80011d8 <__NVIC_SetPriorityGrouping>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b086      	sub	sp, #24
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
 800139a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a0:	f7ff ff3e 	bl	8001220 <__NVIC_GetPriorityGrouping>
 80013a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	68b9      	ldr	r1, [r7, #8]
 80013aa:	6978      	ldr	r0, [r7, #20]
 80013ac:	f7ff ff8e 	bl	80012cc <NVIC_EncodePriority>
 80013b0:	4602      	mov	r2, r0
 80013b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b6:	4611      	mov	r1, r2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff5d 	bl	8001278 <__NVIC_SetPriority>
}
 80013be:	bf00      	nop
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff31 	bl	800123c <__NVIC_EnableIRQ>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff ffa2 	bl	8001334 <SysTick_Config>
 80013f0:	4603      	mov	r3, r0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b084      	sub	sp, #16
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e037      	b.n	8001480 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2202      	movs	r2, #2
 8001414:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001426:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800142a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001434:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001440:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800144c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	4313      	orrs	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 f940 	bl	80016e8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d101      	bne.n	80014a8 <HAL_DMA_Start_IT+0x20>
 80014a4:	2302      	movs	r3, #2
 80014a6:	e04a      	b.n	800153e <HAL_DMA_Start_IT+0xb6>
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d13a      	bne.n	8001530 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2202      	movs	r2, #2
 80014be:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2200      	movs	r2, #0
 80014c6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0201 	bic.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f000 f8d4 	bl	800168c <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d008      	beq.n	80014fe <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 020e 	orr.w	r2, r2, #14
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	e00f      	b.n	800151e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f042 020a 	orr.w	r2, r2, #10
 800150c:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 0204 	bic.w	r2, r2, #4
 800151c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f042 0201 	orr.w	r2, r2, #1
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	e005      	b.n	800153c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001538:	2302      	movs	r3, #2
 800153a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800153c:	7dfb      	ldrb	r3, [r7, #23]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b084      	sub	sp, #16
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	2204      	movs	r2, #4
 8001564:	409a      	lsls	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4013      	ands	r3, r2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d024      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x72>
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d01f      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0320 	and.w	r3, r3, #32
 8001582:	2b00      	cmp	r3, #0
 8001584:	d107      	bne.n	8001596 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0204 	bic.w	r2, r2, #4
 8001594:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800159e:	2104      	movs	r1, #4
 80015a0:	fa01 f202 	lsl.w	r2, r1, r2
 80015a4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d06a      	beq.n	8001684 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80015b6:	e065      	b.n	8001684 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015bc:	2202      	movs	r2, #2
 80015be:	409a      	lsls	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4013      	ands	r3, r2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d02c      	beq.n	8001622 <HAL_DMA_IRQHandler+0xdc>
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d027      	beq.n	8001622 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0320 	and.w	r3, r3, #32
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10b      	bne.n	80015f8 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 020a 	bic.w	r2, r2, #10
 80015ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001600:	2102      	movs	r1, #2
 8001602:	fa01 f202 	lsl.w	r2, r1, r2
 8001606:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001614:	2b00      	cmp	r3, #0
 8001616:	d035      	beq.n	8001684 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001620:	e030      	b.n	8001684 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	2208      	movs	r2, #8
 8001628:	409a      	lsls	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	4013      	ands	r3, r2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d028      	beq.n	8001684 <HAL_DMA_IRQHandler+0x13e>
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	f003 0308 	and.w	r3, r3, #8
 8001638:	2b00      	cmp	r3, #0
 800163a:	d023      	beq.n	8001684 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 020e 	bic.w	r2, r2, #14
 800164a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001654:	2101      	movs	r1, #1
 8001656:	fa01 f202 	lsl.w	r2, r1, r2
 800165a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	2b00      	cmp	r3, #0
 8001678:	d004      	beq.n	8001684 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	4798      	blx	r3
    }
  }
}
 8001682:	e7ff      	b.n	8001684 <HAL_DMA_IRQHandler+0x13e>
 8001684:	bf00      	nop
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
 8001698:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016a2:	2101      	movs	r1, #1
 80016a4:	fa01 f202 	lsl.w	r2, r1, r2
 80016a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b10      	cmp	r3, #16
 80016b8:	d108      	bne.n	80016cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016ca:	e007      	b.n	80016dc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68ba      	ldr	r2, [r7, #8]
 80016d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	60da      	str	r2, [r3, #12]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b09      	ldr	r3, [pc, #36]	@ (800171c <DMA_CalcBaseAndBitshift+0x34>)
 80016f8:	4413      	add	r3, r2
 80016fa:	4a09      	ldr	r2, [pc, #36]	@ (8001720 <DMA_CalcBaseAndBitshift+0x38>)
 80016fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001700:	091b      	lsrs	r3, r3, #4
 8001702:	009a      	lsls	r2, r3, #2
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a06      	ldr	r2, [pc, #24]	@ (8001724 <DMA_CalcBaseAndBitshift+0x3c>)
 800170c:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	bffdfff8 	.word	0xbffdfff8
 8001720:	cccccccd 	.word	0xcccccccd
 8001724:	40020000 	.word	0x40020000

08001728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001728:	b480      	push	{r7}
 800172a:	b087      	sub	sp, #28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001736:	e14e      	b.n	80019d6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	2101      	movs	r1, #1
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	fa01 f303 	lsl.w	r3, r1, r3
 8001744:	4013      	ands	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 8140 	beq.w	80019d0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	2b01      	cmp	r3, #1
 800175a:	d005      	beq.n	8001768 <HAL_GPIO_Init+0x40>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d130      	bne.n	80017ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	2203      	movs	r2, #3
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	68da      	ldr	r2, [r3, #12]
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800179e:	2201      	movs	r2, #1
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	091b      	lsrs	r3, r3, #4
 80017b4:	f003 0201 	and.w	r2, r3, #1
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d017      	beq.n	8001806 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	2203      	movs	r2, #3
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d123      	bne.n	800185a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	08da      	lsrs	r2, r3, #3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3208      	adds	r2, #8
 800181a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800181e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	220f      	movs	r2, #15
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4013      	ands	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	691a      	ldr	r2, [r3, #16]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	08da      	lsrs	r2, r3, #3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3208      	adds	r2, #8
 8001854:	6939      	ldr	r1, [r7, #16]
 8001856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	2203      	movs	r2, #3
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4013      	ands	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 0203 	and.w	r2, r3, #3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4313      	orrs	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 809a 	beq.w	80019d0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189c:	4b55      	ldr	r3, [pc, #340]	@ (80019f4 <HAL_GPIO_Init+0x2cc>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a54      	ldr	r2, [pc, #336]	@ (80019f4 <HAL_GPIO_Init+0x2cc>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6193      	str	r3, [r2, #24]
 80018a8:	4b52      	ldr	r3, [pc, #328]	@ (80019f4 <HAL_GPIO_Init+0x2cc>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018b4:	4a50      	ldr	r2, [pc, #320]	@ (80019f8 <HAL_GPIO_Init+0x2d0>)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	089b      	lsrs	r3, r3, #2
 80018ba:	3302      	adds	r3, #2
 80018bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	220f      	movs	r2, #15
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80018de:	d013      	beq.n	8001908 <HAL_GPIO_Init+0x1e0>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a46      	ldr	r2, [pc, #280]	@ (80019fc <HAL_GPIO_Init+0x2d4>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d00d      	beq.n	8001904 <HAL_GPIO_Init+0x1dc>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a45      	ldr	r2, [pc, #276]	@ (8001a00 <HAL_GPIO_Init+0x2d8>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d007      	beq.n	8001900 <HAL_GPIO_Init+0x1d8>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a44      	ldr	r2, [pc, #272]	@ (8001a04 <HAL_GPIO_Init+0x2dc>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d101      	bne.n	80018fc <HAL_GPIO_Init+0x1d4>
 80018f8:	2303      	movs	r3, #3
 80018fa:	e006      	b.n	800190a <HAL_GPIO_Init+0x1e2>
 80018fc:	2305      	movs	r3, #5
 80018fe:	e004      	b.n	800190a <HAL_GPIO_Init+0x1e2>
 8001900:	2302      	movs	r3, #2
 8001902:	e002      	b.n	800190a <HAL_GPIO_Init+0x1e2>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <HAL_GPIO_Init+0x1e2>
 8001908:	2300      	movs	r3, #0
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	f002 0203 	and.w	r2, r2, #3
 8001910:	0092      	lsls	r2, r2, #2
 8001912:	4093      	lsls	r3, r2
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800191a:	4937      	ldr	r1, [pc, #220]	@ (80019f8 <HAL_GPIO_Init+0x2d0>)
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	089b      	lsrs	r3, r3, #2
 8001920:	3302      	adds	r3, #2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001928:	4b37      	ldr	r3, [pc, #220]	@ (8001a08 <HAL_GPIO_Init+0x2e0>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	43db      	mvns	r3, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800194c:	4a2e      	ldr	r2, [pc, #184]	@ (8001a08 <HAL_GPIO_Init+0x2e0>)
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001952:	4b2d      	ldr	r3, [pc, #180]	@ (8001a08 <HAL_GPIO_Init+0x2e0>)
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	43db      	mvns	r3, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4313      	orrs	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001976:	4a24      	ldr	r2, [pc, #144]	@ (8001a08 <HAL_GPIO_Init+0x2e0>)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800197c:	4b22      	ldr	r3, [pc, #136]	@ (8001a08 <HAL_GPIO_Init+0x2e0>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	43db      	mvns	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019a0:	4a19      	ldr	r2, [pc, #100]	@ (8001a08 <HAL_GPIO_Init+0x2e0>)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019a6:	4b18      	ldr	r3, [pc, #96]	@ (8001a08 <HAL_GPIO_Init+0x2e0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001a08 <HAL_GPIO_Init+0x2e0>)
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	3301      	adds	r3, #1
 80019d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	fa22 f303 	lsr.w	r3, r2, r3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f47f aea9 	bne.w	8001738 <HAL_GPIO_Init+0x10>
  }
}
 80019e6:	bf00      	nop
 80019e8:	bf00      	nop
 80019ea:	371c      	adds	r7, #28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40010000 	.word	0x40010000
 80019fc:	48000400 	.word	0x48000400
 8001a00:	48000800 	.word	0x48000800
 8001a04:	48000c00 	.word	0x48000c00
 8001a08:	40010400 	.word	0x40010400

08001a0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a1c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d102      	bne.n	8001a32 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	f001 b823 	b.w	8002a78 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 817d 	beq.w	8001d42 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a48:	4bbc      	ldr	r3, [pc, #752]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 030c 	and.w	r3, r3, #12
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d00c      	beq.n	8001a6e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a54:	4bb9      	ldr	r3, [pc, #740]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 030c 	and.w	r3, r3, #12
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d15c      	bne.n	8001b1a <HAL_RCC_OscConfig+0x10e>
 8001a60:	4bb6      	ldr	r3, [pc, #728]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a6c:	d155      	bne.n	8001b1a <HAL_RCC_OscConfig+0x10e>
 8001a6e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a72:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a76:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001a7a:	fa93 f3a3 	rbit	r3, r3
 8001a7e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a82:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a86:	fab3 f383 	clz	r3, r3
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	095b      	lsrs	r3, r3, #5
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d102      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x94>
 8001a9a:	4ba8      	ldr	r3, [pc, #672]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	e015      	b.n	8001acc <HAL_RCC_OscConfig+0xc0>
 8001aa0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aa4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001ab4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ab8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001abc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001ac0:	fa93 f3a3 	rbit	r3, r3
 8001ac4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001ac8:	4b9c      	ldr	r3, [pc, #624]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001acc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ad0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001ad4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001ad8:	fa92 f2a2 	rbit	r2, r2
 8001adc:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001ae0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001ae4:	fab2 f282 	clz	r2, r2
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	f042 0220 	orr.w	r2, r2, #32
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	f002 021f 	and.w	r2, r2, #31
 8001af4:	2101      	movs	r1, #1
 8001af6:	fa01 f202 	lsl.w	r2, r1, r2
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 811f 	beq.w	8001d40 <HAL_RCC_OscConfig+0x334>
 8001b02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f040 8116 	bne.w	8001d40 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	f000 bfaf 	b.w	8002a78 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b2a:	d106      	bne.n	8001b3a <HAL_RCC_OscConfig+0x12e>
 8001b2c:	4b83      	ldr	r3, [pc, #524]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a82      	ldr	r2, [pc, #520]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	e036      	b.n	8001ba8 <HAL_RCC_OscConfig+0x19c>
 8001b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x158>
 8001b4a:	4b7c      	ldr	r3, [pc, #496]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a7b      	ldr	r2, [pc, #492]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	4b79      	ldr	r3, [pc, #484]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a78      	ldr	r2, [pc, #480]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	e021      	b.n	8001ba8 <HAL_RCC_OscConfig+0x19c>
 8001b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b74:	d10c      	bne.n	8001b90 <HAL_RCC_OscConfig+0x184>
 8001b76:	4b71      	ldr	r3, [pc, #452]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a70      	ldr	r2, [pc, #448]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	4b6e      	ldr	r3, [pc, #440]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a6d      	ldr	r2, [pc, #436]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e00b      	b.n	8001ba8 <HAL_RCC_OscConfig+0x19c>
 8001b90:	4b6a      	ldr	r3, [pc, #424]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a69      	ldr	r2, [pc, #420]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	4b67      	ldr	r3, [pc, #412]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a66      	ldr	r2, [pc, #408]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001ba2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ba6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ba8:	4b64      	ldr	r3, [pc, #400]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bac:	f023 020f 	bic.w	r2, r3, #15
 8001bb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	495f      	ldr	r1, [pc, #380]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d059      	beq.n	8001c86 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd2:	f7ff faf5 	bl	80011c0 <HAL_GetTick>
 8001bd6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bda:	e00a      	b.n	8001bf2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bdc:	f7ff faf0 	bl	80011c0 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b64      	cmp	r3, #100	@ 0x64
 8001bea:	d902      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	f000 bf43 	b.w	8002a78 <HAL_RCC_OscConfig+0x106c>
 8001bf2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bf6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001bfe:	fa93 f3a3 	rbit	r3, r3
 8001c02:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001c06:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0a:	fab3 f383 	clz	r3, r3
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	095b      	lsrs	r3, r3, #5
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d102      	bne.n	8001c24 <HAL_RCC_OscConfig+0x218>
 8001c1e:	4b47      	ldr	r3, [pc, #284]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	e015      	b.n	8001c50 <HAL_RCC_OscConfig+0x244>
 8001c24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c28:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001c30:	fa93 f3a3 	rbit	r3, r3
 8001c34:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001c38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c3c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001c40:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001c44:	fa93 f3a3 	rbit	r3, r3
 8001c48:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001c4c:	4b3b      	ldr	r3, [pc, #236]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c50:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c54:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001c58:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001c5c:	fa92 f2a2 	rbit	r2, r2
 8001c60:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001c64:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001c68:	fab2 f282 	clz	r2, r2
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	f042 0220 	orr.w	r2, r2, #32
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	f002 021f 	and.w	r2, r2, #31
 8001c78:	2101      	movs	r1, #1
 8001c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0ab      	beq.n	8001bdc <HAL_RCC_OscConfig+0x1d0>
 8001c84:	e05d      	b.n	8001d42 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c86:	f7ff fa9b 	bl	80011c0 <HAL_GetTick>
 8001c8a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c8e:	e00a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c90:	f7ff fa96 	bl	80011c0 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b64      	cmp	r3, #100	@ 0x64
 8001c9e:	d902      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	f000 bee9 	b.w	8002a78 <HAL_RCC_OscConfig+0x106c>
 8001ca6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001caa:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001cb2:	fa93 f3a3 	rbit	r3, r3
 8001cb6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001cba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	095b      	lsrs	r3, r3, #5
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d102      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x2cc>
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	e015      	b.n	8001d04 <HAL_RCC_OscConfig+0x2f8>
 8001cd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cdc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001ce4:	fa93 f3a3 	rbit	r3, r3
 8001ce8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001cec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cf0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001cf4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001cf8:	fa93 f3a3 	rbit	r3, r3
 8001cfc:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001d00:	4b0e      	ldr	r3, [pc, #56]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d04:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d08:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001d0c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001d10:	fa92 f2a2 	rbit	r2, r2
 8001d14:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001d18:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001d1c:	fab2 f282 	clz	r2, r2
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	f042 0220 	orr.w	r2, r2, #32
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	f002 021f 	and.w	r2, r2, #31
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1ab      	bne.n	8001c90 <HAL_RCC_OscConfig+0x284>
 8001d38:	e003      	b.n	8001d42 <HAL_RCC_OscConfig+0x336>
 8001d3a:	bf00      	nop
 8001d3c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 817d 	beq.w	8002052 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d58:	4ba6      	ldr	r3, [pc, #664]	@ (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 030c 	and.w	r3, r3, #12
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00b      	beq.n	8001d7c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d64:	4ba3      	ldr	r3, [pc, #652]	@ (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d172      	bne.n	8001e56 <HAL_RCC_OscConfig+0x44a>
 8001d70:	4ba0      	ldr	r3, [pc, #640]	@ (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d16c      	bne.n	8001e56 <HAL_RCC_OscConfig+0x44a>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001d86:	fa93 f3a3 	rbit	r3, r3
 8001d8a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001d8e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d92:	fab3 f383 	clz	r3, r3
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	095b      	lsrs	r3, r3, #5
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d102      	bne.n	8001dac <HAL_RCC_OscConfig+0x3a0>
 8001da6:	4b93      	ldr	r3, [pc, #588]	@ (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	e013      	b.n	8001dd4 <HAL_RCC_OscConfig+0x3c8>
 8001dac:	2302      	movs	r3, #2
 8001dae:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001db6:	fa93 f3a3 	rbit	r3, r3
 8001dba:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001dc4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001dc8:	fa93 f3a3 	rbit	r3, r3
 8001dcc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001dd0:	4b88      	ldr	r3, [pc, #544]	@ (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001dda:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001dde:	fa92 f2a2 	rbit	r2, r2
 8001de2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001de6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001dea:	fab2 f282 	clz	r2, r2
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	f042 0220 	orr.w	r2, r2, #32
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	f002 021f 	and.w	r2, r2, #31
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00a      	beq.n	8001e1c <HAL_RCC_OscConfig+0x410>
 8001e06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d002      	beq.n	8001e1c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	f000 be2e 	b.w	8002a78 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1c:	4b75      	ldr	r3, [pc, #468]	@ (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	21f8      	movs	r1, #248	@ 0xf8
 8001e32:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001e3a:	fa91 f1a1 	rbit	r1, r1
 8001e3e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001e42:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001e46:	fab1 f181 	clz	r1, r1
 8001e4a:	b2c9      	uxtb	r1, r1
 8001e4c:	408b      	lsls	r3, r1
 8001e4e:	4969      	ldr	r1, [pc, #420]	@ (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e54:	e0fd      	b.n	8002052 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8088 	beq.w	8001f78 <HAL_RCC_OscConfig+0x56c>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001e72:	fa93 f3a3 	rbit	r3, r3
 8001e76:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001e7a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e7e:	fab3 f383 	clz	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e88:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	461a      	mov	r2, r3
 8001e90:	2301      	movs	r3, #1
 8001e92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7ff f994 	bl	80011c0 <HAL_GetTick>
 8001e98:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9c:	e00a      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e9e:	f7ff f98f 	bl	80011c0 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d902      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	f000 bde2 	b.w	8002a78 <HAL_RCC_OscConfig+0x106c>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eba:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001ebe:	fa93 f3a3 	rbit	r3, r3
 8001ec2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001ec6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	095b      	lsrs	r3, r3, #5
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d102      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4d8>
 8001ede:	4b45      	ldr	r3, [pc, #276]	@ (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	e013      	b.n	8001f0c <HAL_RCC_OscConfig+0x500>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001eee:	fa93 f3a3 	rbit	r3, r3
 8001ef2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001efc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001f00:	fa93 f3a3 	rbit	r3, r3
 8001f04:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001f08:	4b3a      	ldr	r3, [pc, #232]	@ (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001f12:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001f16:	fa92 f2a2 	rbit	r2, r2
 8001f1a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001f1e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001f22:	fab2 f282 	clz	r2, r2
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	f042 0220 	orr.w	r2, r2, #32
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	f002 021f 	and.w	r2, r2, #31
 8001f32:	2101      	movs	r1, #1
 8001f34:	fa01 f202 	lsl.w	r2, r1, r2
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0af      	beq.n	8001e9e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	21f8      	movs	r1, #248	@ 0xf8
 8001f54:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f58:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001f5c:	fa91 f1a1 	rbit	r1, r1
 8001f60:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001f64:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001f68:	fab1 f181 	clz	r1, r1
 8001f6c:	b2c9      	uxtb	r1, r1
 8001f6e:	408b      	lsls	r3, r1
 8001f70:	4920      	ldr	r1, [pc, #128]	@ (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]
 8001f76:	e06c      	b.n	8002052 <HAL_RCC_OscConfig+0x646>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001f8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f8e:	fab3 f383 	clz	r3, r3
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f98:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7ff f90c 	bl	80011c0 <HAL_GetTick>
 8001fa8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fac:	e00a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fae:	f7ff f907 	bl	80011c0 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d902      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	f000 bd5a 	b.w	8002a78 <HAL_RCC_OscConfig+0x106c>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fda:	fab3 f383 	clz	r3, r3
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	095b      	lsrs	r3, r3, #5
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d104      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x5ec>
 8001fee:	4b01      	ldr	r3, [pc, #4]	@ (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	e015      	b.n	8002020 <HAL_RCC_OscConfig+0x614>
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002002:	fa93 f3a3 	rbit	r3, r3
 8002006:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800200a:	2302      	movs	r3, #2
 800200c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002010:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002014:	fa93 f3a3 	rbit	r3, r3
 8002018:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800201c:	4bc8      	ldr	r3, [pc, #800]	@ (8002340 <HAL_RCC_OscConfig+0x934>)
 800201e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002020:	2202      	movs	r2, #2
 8002022:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002026:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800202a:	fa92 f2a2 	rbit	r2, r2
 800202e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002032:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002036:	fab2 f282 	clz	r2, r2
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	f042 0220 	orr.w	r2, r2, #32
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	f002 021f 	and.w	r2, r2, #31
 8002046:	2101      	movs	r1, #1
 8002048:	fa01 f202 	lsl.w	r2, r1, r2
 800204c:	4013      	ands	r3, r2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1ad      	bne.n	8001fae <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002052:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002056:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 8110 	beq.w	8002288 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800206c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d079      	beq.n	800216c <HAL_RCC_OscConfig+0x760>
 8002078:	2301      	movs	r3, #1
 800207a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002082:	fa93 f3a3 	rbit	r3, r3
 8002086:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800208a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	461a      	mov	r2, r3
 8002096:	4bab      	ldr	r3, [pc, #684]	@ (8002344 <HAL_RCC_OscConfig+0x938>)
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	461a      	mov	r2, r3
 800209e:	2301      	movs	r3, #1
 80020a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a2:	f7ff f88d 	bl	80011c0 <HAL_GetTick>
 80020a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020aa:	e00a      	b.n	80020c2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ac:	f7ff f888 	bl	80011c0 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d902      	bls.n	80020c2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	f000 bcdb 	b.w	8002a78 <HAL_RCC_OscConfig+0x106c>
 80020c2:	2302      	movs	r3, #2
 80020c4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80020cc:	fa93 f3a3 	rbit	r3, r3
 80020d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80020d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80020dc:	2202      	movs	r2, #2
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	fa93 f2a3 	rbit	r2, r3
 80020ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002100:	2202      	movs	r2, #2
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	fa93 f2a3 	rbit	r2, r3
 8002112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002116:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800211a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211c:	4b88      	ldr	r3, [pc, #544]	@ (8002340 <HAL_RCC_OscConfig+0x934>)
 800211e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002120:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002124:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002128:	2102      	movs	r1, #2
 800212a:	6019      	str	r1, [r3, #0]
 800212c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002130:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	fa93 f1a3 	rbit	r1, r3
 800213a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002142:	6019      	str	r1, [r3, #0]
  return result;
 8002144:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002148:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	fab3 f383 	clz	r3, r3
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002158:	b2db      	uxtb	r3, r3
 800215a:	f003 031f 	and.w	r3, r3, #31
 800215e:	2101      	movs	r1, #1
 8002160:	fa01 f303 	lsl.w	r3, r1, r3
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0a0      	beq.n	80020ac <HAL_RCC_OscConfig+0x6a0>
 800216a:	e08d      	b.n	8002288 <HAL_RCC_OscConfig+0x87c>
 800216c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002170:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002174:	2201      	movs	r2, #1
 8002176:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800217c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	fa93 f2a3 	rbit	r2, r3
 8002186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800218a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800218e:	601a      	str	r2, [r3, #0]
  return result;
 8002190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002194:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002198:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800219a:	fab3 f383 	clz	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b68      	ldr	r3, [pc, #416]	@ (8002344 <HAL_RCC_OscConfig+0x938>)
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	461a      	mov	r2, r3
 80021aa:	2300      	movs	r3, #0
 80021ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ae:	f7ff f807 	bl	80011c0 <HAL_GetTick>
 80021b2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021b8:	f7ff f802 	bl	80011c0 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d902      	bls.n	80021ce <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	f000 bc55 	b.w	8002a78 <HAL_RCC_OscConfig+0x106c>
 80021ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80021d6:	2202      	movs	r2, #2
 80021d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021de:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	fa93 f2a3 	rbit	r2, r3
 80021e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80021fa:	2202      	movs	r2, #2
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002202:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	fa93 f2a3 	rbit	r2, r3
 800220c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002210:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800221a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800221e:	2202      	movs	r2, #2
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002226:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	fa93 f2a3 	rbit	r2, r3
 8002230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002234:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002238:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800223a:	4b41      	ldr	r3, [pc, #260]	@ (8002340 <HAL_RCC_OscConfig+0x934>)
 800223c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800223e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002242:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002246:	2102      	movs	r1, #2
 8002248:	6019      	str	r1, [r3, #0]
 800224a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800224e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	fa93 f1a3 	rbit	r1, r3
 8002258:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800225c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002260:	6019      	str	r1, [r3, #0]
  return result;
 8002262:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002266:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	fab3 f383 	clz	r3, r3
 8002270:	b2db      	uxtb	r3, r3
 8002272:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002276:	b2db      	uxtb	r3, r3
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	2101      	movs	r1, #1
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	4013      	ands	r3, r2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d197      	bne.n	80021b8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002288:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 81a1 	beq.w	80025e0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229e:	2300      	movs	r3, #0
 80022a0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a4:	4b26      	ldr	r3, [pc, #152]	@ (8002340 <HAL_RCC_OscConfig+0x934>)
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d116      	bne.n	80022de <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b0:	4b23      	ldr	r3, [pc, #140]	@ (8002340 <HAL_RCC_OscConfig+0x934>)
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	4a22      	ldr	r2, [pc, #136]	@ (8002340 <HAL_RCC_OscConfig+0x934>)
 80022b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022ba:	61d3      	str	r3, [r2, #28]
 80022bc:	4b20      	ldr	r3, [pc, #128]	@ (8002340 <HAL_RCC_OscConfig+0x934>)
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80022c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80022d6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80022d8:	2301      	movs	r3, #1
 80022da:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022de:	4b1a      	ldr	r3, [pc, #104]	@ (8002348 <HAL_RCC_OscConfig+0x93c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d11a      	bne.n	8002320 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ea:	4b17      	ldr	r3, [pc, #92]	@ (8002348 <HAL_RCC_OscConfig+0x93c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a16      	ldr	r2, [pc, #88]	@ (8002348 <HAL_RCC_OscConfig+0x93c>)
 80022f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f6:	f7fe ff63 	bl	80011c0 <HAL_GetTick>
 80022fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fe:	e009      	b.n	8002314 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002300:	f7fe ff5e 	bl	80011c0 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b64      	cmp	r3, #100	@ 0x64
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e3b1      	b.n	8002a78 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002314:	4b0c      	ldr	r3, [pc, #48]	@ (8002348 <HAL_RCC_OscConfig+0x93c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0ef      	beq.n	8002300 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002324:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d10d      	bne.n	800234c <HAL_RCC_OscConfig+0x940>
 8002330:	4b03      	ldr	r3, [pc, #12]	@ (8002340 <HAL_RCC_OscConfig+0x934>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	4a02      	ldr	r2, [pc, #8]	@ (8002340 <HAL_RCC_OscConfig+0x934>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6213      	str	r3, [r2, #32]
 800233c:	e03c      	b.n	80023b8 <HAL_RCC_OscConfig+0x9ac>
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000
 8002344:	10908120 	.word	0x10908120
 8002348:	40007000 	.word	0x40007000
 800234c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002350:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10c      	bne.n	8002376 <HAL_RCC_OscConfig+0x96a>
 800235c:	4bc1      	ldr	r3, [pc, #772]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	4ac0      	ldr	r2, [pc, #768]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 8002362:	f023 0301 	bic.w	r3, r3, #1
 8002366:	6213      	str	r3, [r2, #32]
 8002368:	4bbe      	ldr	r3, [pc, #760]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	4abd      	ldr	r2, [pc, #756]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 800236e:	f023 0304 	bic.w	r3, r3, #4
 8002372:	6213      	str	r3, [r2, #32]
 8002374:	e020      	b.n	80023b8 <HAL_RCC_OscConfig+0x9ac>
 8002376:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	2b05      	cmp	r3, #5
 8002384:	d10c      	bne.n	80023a0 <HAL_RCC_OscConfig+0x994>
 8002386:	4bb7      	ldr	r3, [pc, #732]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	4ab6      	ldr	r2, [pc, #728]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 800238c:	f043 0304 	orr.w	r3, r3, #4
 8002390:	6213      	str	r3, [r2, #32]
 8002392:	4bb4      	ldr	r3, [pc, #720]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	4ab3      	ldr	r2, [pc, #716]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6213      	str	r3, [r2, #32]
 800239e:	e00b      	b.n	80023b8 <HAL_RCC_OscConfig+0x9ac>
 80023a0:	4bb0      	ldr	r3, [pc, #704]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	4aaf      	ldr	r2, [pc, #700]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 80023a6:	f023 0301 	bic.w	r3, r3, #1
 80023aa:	6213      	str	r3, [r2, #32]
 80023ac:	4bad      	ldr	r3, [pc, #692]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	4aac      	ldr	r2, [pc, #688]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 80023b2:	f023 0304 	bic.w	r3, r3, #4
 80023b6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 8081 	beq.w	80024cc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ca:	f7fe fef9 	bl	80011c0 <HAL_GetTick>
 80023ce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d2:	e00b      	b.n	80023ec <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023d4:	f7fe fef4 	bl	80011c0 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e345      	b.n	8002a78 <HAL_RCC_OscConfig+0x106c>
 80023ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80023f4:	2202      	movs	r2, #2
 80023f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	fa93 f2a3 	rbit	r2, r3
 8002406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800240a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002414:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002418:	2202      	movs	r2, #2
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002420:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	fa93 f2a3 	rbit	r2, r3
 800242a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002432:	601a      	str	r2, [r3, #0]
  return result;
 8002434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002438:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800243c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243e:	fab3 f383 	clz	r3, r3
 8002442:	b2db      	uxtb	r3, r3
 8002444:	095b      	lsrs	r3, r3, #5
 8002446:	b2db      	uxtb	r3, r3
 8002448:	f043 0302 	orr.w	r3, r3, #2
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d102      	bne.n	8002458 <HAL_RCC_OscConfig+0xa4c>
 8002452:	4b84      	ldr	r3, [pc, #528]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	e013      	b.n	8002480 <HAL_RCC_OscConfig+0xa74>
 8002458:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002460:	2202      	movs	r2, #2
 8002462:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002464:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002468:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	fa93 f2a3 	rbit	r2, r3
 8002472:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002476:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	4b79      	ldr	r3, [pc, #484]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 800247e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002480:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002484:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002488:	2102      	movs	r1, #2
 800248a:	6011      	str	r1, [r2, #0]
 800248c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002490:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	fa92 f1a2 	rbit	r1, r2
 800249a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800249e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80024a2:	6011      	str	r1, [r2, #0]
  return result;
 80024a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024a8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	fab2 f282 	clz	r2, r2
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	f002 021f 	and.w	r2, r2, #31
 80024be:	2101      	movs	r1, #1
 80024c0:	fa01 f202 	lsl.w	r2, r1, r2
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d084      	beq.n	80023d4 <HAL_RCC_OscConfig+0x9c8>
 80024ca:	e07f      	b.n	80025cc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024cc:	f7fe fe78 	bl	80011c0 <HAL_GetTick>
 80024d0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d4:	e00b      	b.n	80024ee <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024d6:	f7fe fe73 	bl	80011c0 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e2c4      	b.n	8002a78 <HAL_RCC_OscConfig+0x106c>
 80024ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80024f6:	2202      	movs	r2, #2
 80024f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fe:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	fa93 f2a3 	rbit	r2, r3
 8002508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002516:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800251a:	2202      	movs	r2, #2
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002522:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	fa93 f2a3 	rbit	r2, r3
 800252c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002530:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002534:	601a      	str	r2, [r3, #0]
  return result;
 8002536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800253e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002540:	fab3 f383 	clz	r3, r3
 8002544:	b2db      	uxtb	r3, r3
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	b2db      	uxtb	r3, r3
 800254a:	f043 0302 	orr.w	r3, r3, #2
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d102      	bne.n	800255a <HAL_RCC_OscConfig+0xb4e>
 8002554:	4b43      	ldr	r3, [pc, #268]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	e013      	b.n	8002582 <HAL_RCC_OscConfig+0xb76>
 800255a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002562:	2202      	movs	r2, #2
 8002564:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800256a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	fa93 f2a3 	rbit	r2, r3
 8002574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002578:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	4b39      	ldr	r3, [pc, #228]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 8002580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002582:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002586:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800258a:	2102      	movs	r1, #2
 800258c:	6011      	str	r1, [r2, #0]
 800258e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002592:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	fa92 f1a2 	rbit	r1, r2
 800259c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025a0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80025a4:	6011      	str	r1, [r2, #0]
  return result;
 80025a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025aa:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	fab2 f282 	clz	r2, r2
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	f002 021f 	and.w	r2, r2, #31
 80025c0:	2101      	movs	r1, #1
 80025c2:	fa01 f202 	lsl.w	r2, r1, r2
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d184      	bne.n	80024d6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025cc:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d105      	bne.n	80025e0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d4:	4b23      	ldr	r3, [pc, #140]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	4a22      	ldr	r2, [pc, #136]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 80025da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025de:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 8242 	beq.w	8002a76 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	f000 8213 	beq.w	8002a26 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002600:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002604:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	2b02      	cmp	r3, #2
 800260e:	f040 8162 	bne.w	80028d6 <HAL_RCC_OscConfig+0xeca>
 8002612:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002616:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800261a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800261e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002620:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002624:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	fa93 f2a3 	rbit	r2, r3
 800262e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002632:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002636:	601a      	str	r2, [r3, #0]
  return result;
 8002638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002640:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002642:	fab3 f383 	clz	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800264c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	461a      	mov	r2, r3
 8002654:	2300      	movs	r3, #0
 8002656:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7fe fdb2 	bl	80011c0 <HAL_GetTick>
 800265c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002660:	e00c      	b.n	800267c <HAL_RCC_OscConfig+0xc70>
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002668:	f7fe fdaa 	bl	80011c0 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e1fd      	b.n	8002a78 <HAL_RCC_OscConfig+0x106c>
 800267c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002680:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002684:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002688:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800268e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	fa93 f2a3 	rbit	r2, r3
 8002698:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80026a0:	601a      	str	r2, [r3, #0]
  return result;
 80026a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80026aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ac:	fab3 f383 	clz	r3, r3
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d102      	bne.n	80026c6 <HAL_RCC_OscConfig+0xcba>
 80026c0:	4bb0      	ldr	r3, [pc, #704]	@ (8002984 <HAL_RCC_OscConfig+0xf78>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	e027      	b.n	8002716 <HAL_RCC_OscConfig+0xd0a>
 80026c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ca:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80026ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	fa93 f2a3 	rbit	r2, r3
 80026e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80026f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fe:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	fa93 f2a3 	rbit	r2, r3
 8002708:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800270c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	4b9c      	ldr	r3, [pc, #624]	@ (8002984 <HAL_RCC_OscConfig+0xf78>)
 8002714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002716:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800271a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800271e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002722:	6011      	str	r1, [r2, #0]
 8002724:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002728:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	fa92 f1a2 	rbit	r1, r2
 8002732:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002736:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800273a:	6011      	str	r1, [r2, #0]
  return result;
 800273c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002740:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	fab2 f282 	clz	r2, r2
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	f042 0220 	orr.w	r2, r2, #32
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	f002 021f 	and.w	r2, r2, #31
 8002756:	2101      	movs	r1, #1
 8002758:	fa01 f202 	lsl.w	r2, r1, r2
 800275c:	4013      	ands	r3, r2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d182      	bne.n	8002668 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002762:	4b88      	ldr	r3, [pc, #544]	@ (8002984 <HAL_RCC_OscConfig+0xf78>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800276a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002776:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	430b      	orrs	r3, r1
 8002784:	497f      	ldr	r1, [pc, #508]	@ (8002984 <HAL_RCC_OscConfig+0xf78>)
 8002786:	4313      	orrs	r3, r2
 8002788:	604b      	str	r3, [r1, #4]
 800278a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800278e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002792:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002796:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002798:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	fa93 f2a3 	rbit	r2, r3
 80027a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027aa:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80027ae:	601a      	str	r2, [r3, #0]
  return result;
 80027b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80027b8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80027c4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	461a      	mov	r2, r3
 80027cc:	2301      	movs	r3, #1
 80027ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7fe fcf6 	bl	80011c0 <HAL_GetTick>
 80027d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027d8:	e009      	b.n	80027ee <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027da:	f7fe fcf1 	bl	80011c0 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e144      	b.n	8002a78 <HAL_RCC_OscConfig+0x106c>
 80027ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80027f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002800:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	fa93 f2a3 	rbit	r2, r3
 800280a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800280e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002812:	601a      	str	r2, [r3, #0]
  return result;
 8002814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002818:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800281c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800281e:	fab3 f383 	clz	r3, r3
 8002822:	b2db      	uxtb	r3, r3
 8002824:	095b      	lsrs	r3, r3, #5
 8002826:	b2db      	uxtb	r3, r3
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b01      	cmp	r3, #1
 8002830:	d102      	bne.n	8002838 <HAL_RCC_OscConfig+0xe2c>
 8002832:	4b54      	ldr	r3, [pc, #336]	@ (8002984 <HAL_RCC_OscConfig+0xf78>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	e027      	b.n	8002888 <HAL_RCC_OscConfig+0xe7c>
 8002838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002840:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002844:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	fa93 f2a3 	rbit	r2, r3
 8002854:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002858:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002862:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002866:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002870:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	fa93 f2a3 	rbit	r2, r3
 800287a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800287e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	4b3f      	ldr	r3, [pc, #252]	@ (8002984 <HAL_RCC_OscConfig+0xf78>)
 8002886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002888:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800288c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002890:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002894:	6011      	str	r1, [r2, #0]
 8002896:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800289a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	fa92 f1a2 	rbit	r1, r2
 80028a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028a8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80028ac:	6011      	str	r1, [r2, #0]
  return result;
 80028ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028b2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	fab2 f282 	clz	r2, r2
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	f042 0220 	orr.w	r2, r2, #32
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	f002 021f 	and.w	r2, r2, #31
 80028c8:	2101      	movs	r1, #1
 80028ca:	fa01 f202 	lsl.w	r2, r1, r2
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d082      	beq.n	80027da <HAL_RCC_OscConfig+0xdce>
 80028d4:	e0cf      	b.n	8002a76 <HAL_RCC_OscConfig+0x106a>
 80028d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028da:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80028de:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	fa93 f2a3 	rbit	r2, r3
 80028f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80028fa:	601a      	str	r2, [r3, #0]
  return result;
 80028fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002900:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002904:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002906:	fab3 f383 	clz	r3, r3
 800290a:	b2db      	uxtb	r3, r3
 800290c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002910:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	461a      	mov	r2, r3
 8002918:	2300      	movs	r3, #0
 800291a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7fe fc50 	bl	80011c0 <HAL_GetTick>
 8002920:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002924:	e009      	b.n	800293a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002926:	f7fe fc4b 	bl	80011c0 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e09e      	b.n	8002a78 <HAL_RCC_OscConfig+0x106c>
 800293a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002942:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002946:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	fa93 f2a3 	rbit	r2, r3
 8002956:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800295a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800295e:	601a      	str	r2, [r3, #0]
  return result;
 8002960:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002964:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002968:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	095b      	lsrs	r3, r3, #5
 8002972:	b2db      	uxtb	r3, r3
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b01      	cmp	r3, #1
 800297c:	d104      	bne.n	8002988 <HAL_RCC_OscConfig+0xf7c>
 800297e:	4b01      	ldr	r3, [pc, #4]	@ (8002984 <HAL_RCC_OscConfig+0xf78>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	e029      	b.n	80029d8 <HAL_RCC_OscConfig+0xfcc>
 8002984:	40021000 	.word	0x40021000
 8002988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002990:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002994:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	fa93 f2a3 	rbit	r2, r3
 80029a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80029b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	fa93 f2a3 	rbit	r2, r3
 80029ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ce:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002a84 <HAL_RCC_OscConfig+0x1078>)
 80029d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029dc:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80029e0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80029e4:	6011      	str	r1, [r2, #0]
 80029e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029ea:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	fa92 f1a2 	rbit	r1, r2
 80029f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029f8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80029fc:	6011      	str	r1, [r2, #0]
  return result;
 80029fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a02:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002a06:	6812      	ldr	r2, [r2, #0]
 8002a08:	fab2 f282 	clz	r2, r2
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	f042 0220 	orr.w	r2, r2, #32
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	f002 021f 	and.w	r2, r2, #31
 8002a18:	2101      	movs	r1, #1
 8002a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d180      	bne.n	8002926 <HAL_RCC_OscConfig+0xf1a>
 8002a24:	e027      	b.n	8002a76 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e01e      	b.n	8002a78 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a3a:	4b12      	ldr	r3, [pc, #72]	@ (8002a84 <HAL_RCC_OscConfig+0x1078>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002a46:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d10b      	bne.n	8002a72 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002a5a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002a5e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d001      	beq.n	8002a76 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40021000 	.word	0x40021000

08002a88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b09e      	sub	sp, #120	@ 0x78
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e162      	b.n	8002d66 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa0:	4b90      	ldr	r3, [pc, #576]	@ (8002ce4 <HAL_RCC_ClockConfig+0x25c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d910      	bls.n	8002ad0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aae:	4b8d      	ldr	r3, [pc, #564]	@ (8002ce4 <HAL_RCC_ClockConfig+0x25c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 0207 	bic.w	r2, r3, #7
 8002ab6:	498b      	ldr	r1, [pc, #556]	@ (8002ce4 <HAL_RCC_ClockConfig+0x25c>)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abe:	4b89      	ldr	r3, [pc, #548]	@ (8002ce4 <HAL_RCC_ClockConfig+0x25c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e14a      	b.n	8002d66 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002adc:	4b82      	ldr	r3, [pc, #520]	@ (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	497f      	ldr	r1, [pc, #508]	@ (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 80dc 	beq.w	8002cb4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d13c      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xf6>
 8002b04:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b08:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b0c:	fa93 f3a3 	rbit	r3, r3
 8002b10:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002b12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b14:	fab3 f383 	clz	r3, r3
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d102      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xa6>
 8002b28:	4b6f      	ldr	r3, [pc, #444]	@ (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	e00f      	b.n	8002b4e <HAL_RCC_ClockConfig+0xc6>
 8002b2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b32:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b40:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b4a:	4b67      	ldr	r3, [pc, #412]	@ (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b52:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002b54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b56:	fa92 f2a2 	rbit	r2, r2
 8002b5a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002b5c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002b5e:	fab2 f282 	clz	r2, r2
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	f042 0220 	orr.w	r2, r2, #32
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	f002 021f 	and.w	r2, r2, #31
 8002b6e:	2101      	movs	r1, #1
 8002b70:	fa01 f202 	lsl.w	r2, r1, r2
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d17b      	bne.n	8002c72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e0f3      	b.n	8002d66 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d13c      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x178>
 8002b86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b8a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b8e:	fa93 f3a3 	rbit	r3, r3
 8002b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002b94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b96:	fab3 f383 	clz	r3, r3
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	095b      	lsrs	r3, r3, #5
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d102      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x128>
 8002baa:	4b4f      	ldr	r3, [pc, #316]	@ (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	e00f      	b.n	8002bd0 <HAL_RCC_ClockConfig+0x148>
 8002bb0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bb8:	fa93 f3a3 	rbit	r3, r3
 8002bbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bc6:	fa93 f3a3 	rbit	r3, r3
 8002bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bcc:	4b46      	ldr	r3, [pc, #280]	@ (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bd4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002bd6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002bd8:	fa92 f2a2 	rbit	r2, r2
 8002bdc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002bde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002be0:	fab2 f282 	clz	r2, r2
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	f042 0220 	orr.w	r2, r2, #32
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	f002 021f 	and.w	r2, r2, #31
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d13a      	bne.n	8002c72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0b2      	b.n	8002d66 <HAL_RCC_ClockConfig+0x2de>
 8002c00:	2302      	movs	r3, #2
 8002c02:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c06:	fa93 f3a3 	rbit	r3, r3
 8002c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0e:	fab3 f383 	clz	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	095b      	lsrs	r3, r3, #5
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d102      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x1a0>
 8002c22:	4b31      	ldr	r3, [pc, #196]	@ (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	e00d      	b.n	8002c44 <HAL_RCC_ClockConfig+0x1bc>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c2e:	fa93 f3a3 	rbit	r3, r3
 8002c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c34:	2302      	movs	r3, #2
 8002c36:	623b      	str	r3, [r7, #32]
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	61fb      	str	r3, [r7, #28]
 8002c40:	4b29      	ldr	r3, [pc, #164]	@ (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c44:	2202      	movs	r2, #2
 8002c46:	61ba      	str	r2, [r7, #24]
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	fa92 f2a2 	rbit	r2, r2
 8002c4e:	617a      	str	r2, [r7, #20]
  return result;
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	fab2 f282 	clz	r2, r2
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	f042 0220 	orr.w	r2, r2, #32
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	f002 021f 	and.w	r2, r2, #31
 8002c62:	2101      	movs	r1, #1
 8002c64:	fa01 f202 	lsl.w	r2, r1, r2
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e079      	b.n	8002d66 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c72:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f023 0203 	bic.w	r2, r3, #3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	491a      	ldr	r1, [pc, #104]	@ (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c84:	f7fe fa9c 	bl	80011c0 <HAL_GetTick>
 8002c88:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8a:	e00a      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c8c:	f7fe fa98 	bl	80011c0 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e061      	b.n	8002d66 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca2:	4b11      	ldr	r3, [pc, #68]	@ (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 020c 	and.w	r2, r3, #12
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d1eb      	bne.n	8002c8c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce4 <HAL_RCC_ClockConfig+0x25c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d214      	bcs.n	8002cec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc2:	4b08      	ldr	r3, [pc, #32]	@ (8002ce4 <HAL_RCC_ClockConfig+0x25c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f023 0207 	bic.w	r2, r3, #7
 8002cca:	4906      	ldr	r1, [pc, #24]	@ (8002ce4 <HAL_RCC_ClockConfig+0x25c>)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd2:	4b04      	ldr	r3, [pc, #16]	@ (8002ce4 <HAL_RCC_ClockConfig+0x25c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d005      	beq.n	8002cec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e040      	b.n	8002d66 <HAL_RCC_ClockConfig+0x2de>
 8002ce4:	40022000 	.word	0x40022000
 8002ce8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d70 <HAL_RCC_ClockConfig+0x2e8>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	491a      	ldr	r1, [pc, #104]	@ (8002d70 <HAL_RCC_ClockConfig+0x2e8>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d16:	4b16      	ldr	r3, [pc, #88]	@ (8002d70 <HAL_RCC_ClockConfig+0x2e8>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4912      	ldr	r1, [pc, #72]	@ (8002d70 <HAL_RCC_ClockConfig+0x2e8>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d2a:	f000 f829 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 8002d2e:	4601      	mov	r1, r0
 8002d30:	4b0f      	ldr	r3, [pc, #60]	@ (8002d70 <HAL_RCC_ClockConfig+0x2e8>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d38:	22f0      	movs	r2, #240	@ 0xf0
 8002d3a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	fa92 f2a2 	rbit	r2, r2
 8002d42:	60fa      	str	r2, [r7, #12]
  return result;
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	fab2 f282 	clz	r2, r2
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	40d3      	lsrs	r3, r2
 8002d4e:	4a09      	ldr	r2, [pc, #36]	@ (8002d74 <HAL_RCC_ClockConfig+0x2ec>)
 8002d50:	5cd3      	ldrb	r3, [r2, r3]
 8002d52:	fa21 f303 	lsr.w	r3, r1, r3
 8002d56:	4a08      	ldr	r2, [pc, #32]	@ (8002d78 <HAL_RCC_ClockConfig+0x2f0>)
 8002d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002d5a:	4b08      	ldr	r3, [pc, #32]	@ (8002d7c <HAL_RCC_ClockConfig+0x2f4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe f9ea 	bl	8001138 <HAL_InitTick>
  
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3778      	adds	r7, #120	@ 0x78
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000
 8002d74:	08006468 	.word	0x08006468
 8002d78:	20000000 	.word	0x20000000
 8002d7c:	20000004 	.word	0x20000004

08002d80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	2300      	movs	r3, #0
 8002d94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d002      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0x30>
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d003      	beq.n	8002db6 <HAL_RCC_GetSysClockFreq+0x36>
 8002dae:	e026      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002db0:	4b19      	ldr	r3, [pc, #100]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002db2:	613b      	str	r3, [r7, #16]
      break;
 8002db4:	e026      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	0c9b      	lsrs	r3, r3, #18
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	4a17      	ldr	r2, [pc, #92]	@ (8002e1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002dc0:	5cd3      	ldrb	r3, [r2, r3]
 8002dc2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002dc4:	4b13      	ldr	r3, [pc, #76]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x94>)
 8002dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc8:	f003 030f 	and.w	r3, r3, #15
 8002dcc:	4a14      	ldr	r2, [pc, #80]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002dce:	5cd3      	ldrb	r3, [r2, r3]
 8002dd0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ddc:	4a0e      	ldr	r2, [pc, #56]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	fb02 f303 	mul.w	r3, r2, r3
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	e004      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a0c      	ldr	r2, [pc, #48]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002df2:	fb02 f303 	mul.w	r3, r2, r3
 8002df6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	613b      	str	r3, [r7, #16]
      break;
 8002dfc:	e002      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dfe:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e00:	613b      	str	r3, [r7, #16]
      break;
 8002e02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e04:	693b      	ldr	r3, [r7, #16]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	371c      	adds	r7, #28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40021000 	.word	0x40021000
 8002e18:	007a1200 	.word	0x007a1200
 8002e1c:	08006480 	.word	0x08006480
 8002e20:	08006490 	.word	0x08006490
 8002e24:	003d0900 	.word	0x003d0900

08002e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e2c:	4b03      	ldr	r3, [pc, #12]	@ (8002e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	20000000 	.word	0x20000000

08002e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002e46:	f7ff ffef 	bl	8002e28 <HAL_RCC_GetHCLKFreq>
 8002e4a:	4601      	mov	r1, r0
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e7c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e54:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002e58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	fa92 f2a2 	rbit	r2, r2
 8002e60:	603a      	str	r2, [r7, #0]
  return result;
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	fab2 f282 	clz	r2, r2
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	40d3      	lsrs	r3, r2
 8002e6c:	4a04      	ldr	r2, [pc, #16]	@ (8002e80 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002e6e:	5cd3      	ldrb	r3, [r2, r3]
 8002e70:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	08006478 	.word	0x08006478

08002e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002e8a:	f7ff ffcd 	bl	8002e28 <HAL_RCC_GetHCLKFreq>
 8002e8e:	4601      	mov	r1, r0
 8002e90:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002e98:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002e9c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	fa92 f2a2 	rbit	r2, r2
 8002ea4:	603a      	str	r2, [r7, #0]
  return result;
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	fab2 f282 	clz	r2, r2
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	40d3      	lsrs	r3, r2
 8002eb0:	4a04      	ldr	r2, [pc, #16]	@ (8002ec4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002eb2:	5cd3      	ldrb	r3, [r2, r3]
 8002eb4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	08006478 	.word	0x08006478

08002ec8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e040      	b.n	8002f5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d106      	bne.n	8002ef0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7fd ff64 	bl	8000db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2224      	movs	r2, #36	@ 0x24
 8002ef4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0201 	bic.w	r2, r2, #1
 8002f04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 fa4c 	bl	80033ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 f913 	bl	8003140 <UART_SetConfig>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e01b      	b.n	8002f5c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0201 	orr.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 facb 	bl	80034f0 <UART_CheckIdleState>
 8002f5a:	4603      	mov	r3, r0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08a      	sub	sp, #40	@ 0x28
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	4613      	mov	r3, r2
 8002f72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f78:	2b20      	cmp	r3, #32
 8002f7a:	d177      	bne.n	800306c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <HAL_UART_Transmit+0x24>
 8002f82:	88fb      	ldrh	r3, [r7, #6]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e070      	b.n	800306e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2221      	movs	r2, #33	@ 0x21
 8002f98:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f9a:	f7fe f911 	bl	80011c0 <HAL_GetTick>
 8002f9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	88fa      	ldrh	r2, [r7, #6]
 8002fa4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	88fa      	ldrh	r2, [r7, #6]
 8002fac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fb8:	d108      	bne.n	8002fcc <HAL_UART_Transmit+0x68>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d104      	bne.n	8002fcc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	e003      	b.n	8002fd4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fd4:	e02f      	b.n	8003036 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2180      	movs	r1, #128	@ 0x80
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 fb2d 	bl	8003640 <UART_WaitOnFlagUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d004      	beq.n	8002ff6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e03b      	b.n	800306e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10b      	bne.n	8003014 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	881a      	ldrh	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003008:	b292      	uxth	r2, r2
 800300a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	3302      	adds	r3, #2
 8003010:	61bb      	str	r3, [r7, #24]
 8003012:	e007      	b.n	8003024 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	781a      	ldrb	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3301      	adds	r3, #1
 8003022:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800303c:	b29b      	uxth	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1c9      	bne.n	8002fd6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2200      	movs	r2, #0
 800304a:	2140      	movs	r1, #64	@ 0x40
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 faf7 	bl	8003640 <UART_WaitOnFlagUntilTimeout>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d004      	beq.n	8003062 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e005      	b.n	800306e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2220      	movs	r2, #32
 8003066:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	e000      	b.n	800306e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800306c:	2302      	movs	r3, #2
  }
}
 800306e:	4618      	mov	r0, r3
 8003070:	3720      	adds	r7, #32
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b08a      	sub	sp, #40	@ 0x28
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	4613      	mov	r3, r2
 8003082:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800308a:	2b20      	cmp	r3, #32
 800308c:	d132      	bne.n	80030f4 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d002      	beq.n	800309a <HAL_UART_Receive_DMA+0x24>
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e02b      	b.n	80030f6 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d018      	beq.n	80030e4 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	e853 3f00 	ldrex	r3, [r3]
 80030be:	613b      	str	r3, [r7, #16]
   return(result);
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80030c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	461a      	mov	r2, r3
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	623b      	str	r3, [r7, #32]
 80030d2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d4:	69f9      	ldr	r1, [r7, #28]
 80030d6:	6a3a      	ldr	r2, [r7, #32]
 80030d8:	e841 2300 	strex	r3, r2, [r1]
 80030dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1e6      	bne.n	80030b2 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	461a      	mov	r2, r3
 80030e8:	68b9      	ldr	r1, [r7, #8]
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 fb16 	bl	800371c <UART_Start_Receive_DMA>
 80030f0:	4603      	mov	r3, r0
 80030f2:	e000      	b.n	80030f6 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 80030f4:	2302      	movs	r3, #2
  }
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3728      	adds	r7, #40	@ 0x28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	460b      	mov	r3, r1
 8003130:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
	...

08003140 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b088      	sub	sp, #32
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	4313      	orrs	r3, r2
 8003162:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	4b8a      	ldr	r3, [pc, #552]	@ (8003394 <UART_SetConfig+0x254>)
 800316c:	4013      	ands	r3, r2
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6812      	ldr	r2, [r2, #0]
 8003172:	6979      	ldr	r1, [r7, #20]
 8003174:	430b      	orrs	r3, r1
 8003176:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	4313      	orrs	r3, r2
 800319c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a78      	ldr	r2, [pc, #480]	@ (8003398 <UART_SetConfig+0x258>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d120      	bne.n	80031fe <UART_SetConfig+0xbe>
 80031bc:	4b77      	ldr	r3, [pc, #476]	@ (800339c <UART_SetConfig+0x25c>)
 80031be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d817      	bhi.n	80031f8 <UART_SetConfig+0xb8>
 80031c8:	a201      	add	r2, pc, #4	@ (adr r2, 80031d0 <UART_SetConfig+0x90>)
 80031ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ce:	bf00      	nop
 80031d0:	080031e1 	.word	0x080031e1
 80031d4:	080031ed 	.word	0x080031ed
 80031d8:	080031f3 	.word	0x080031f3
 80031dc:	080031e7 	.word	0x080031e7
 80031e0:	2300      	movs	r3, #0
 80031e2:	77fb      	strb	r3, [r7, #31]
 80031e4:	e01d      	b.n	8003222 <UART_SetConfig+0xe2>
 80031e6:	2302      	movs	r3, #2
 80031e8:	77fb      	strb	r3, [r7, #31]
 80031ea:	e01a      	b.n	8003222 <UART_SetConfig+0xe2>
 80031ec:	2304      	movs	r3, #4
 80031ee:	77fb      	strb	r3, [r7, #31]
 80031f0:	e017      	b.n	8003222 <UART_SetConfig+0xe2>
 80031f2:	2308      	movs	r3, #8
 80031f4:	77fb      	strb	r3, [r7, #31]
 80031f6:	e014      	b.n	8003222 <UART_SetConfig+0xe2>
 80031f8:	2310      	movs	r3, #16
 80031fa:	77fb      	strb	r3, [r7, #31]
 80031fc:	e011      	b.n	8003222 <UART_SetConfig+0xe2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a67      	ldr	r2, [pc, #412]	@ (80033a0 <UART_SetConfig+0x260>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d102      	bne.n	800320e <UART_SetConfig+0xce>
 8003208:	2300      	movs	r3, #0
 800320a:	77fb      	strb	r3, [r7, #31]
 800320c:	e009      	b.n	8003222 <UART_SetConfig+0xe2>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a64      	ldr	r2, [pc, #400]	@ (80033a4 <UART_SetConfig+0x264>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d102      	bne.n	800321e <UART_SetConfig+0xde>
 8003218:	2300      	movs	r3, #0
 800321a:	77fb      	strb	r3, [r7, #31]
 800321c:	e001      	b.n	8003222 <UART_SetConfig+0xe2>
 800321e:	2310      	movs	r3, #16
 8003220:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800322a:	d15a      	bne.n	80032e2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800322c:	7ffb      	ldrb	r3, [r7, #31]
 800322e:	2b08      	cmp	r3, #8
 8003230:	d827      	bhi.n	8003282 <UART_SetConfig+0x142>
 8003232:	a201      	add	r2, pc, #4	@ (adr r2, 8003238 <UART_SetConfig+0xf8>)
 8003234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003238:	0800325d 	.word	0x0800325d
 800323c:	08003265 	.word	0x08003265
 8003240:	0800326d 	.word	0x0800326d
 8003244:	08003283 	.word	0x08003283
 8003248:	08003273 	.word	0x08003273
 800324c:	08003283 	.word	0x08003283
 8003250:	08003283 	.word	0x08003283
 8003254:	08003283 	.word	0x08003283
 8003258:	0800327b 	.word	0x0800327b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800325c:	f7ff fdf0 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 8003260:	61b8      	str	r0, [r7, #24]
        break;
 8003262:	e013      	b.n	800328c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003264:	f7ff fe0e 	bl	8002e84 <HAL_RCC_GetPCLK2Freq>
 8003268:	61b8      	str	r0, [r7, #24]
        break;
 800326a:	e00f      	b.n	800328c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800326c:	4b4e      	ldr	r3, [pc, #312]	@ (80033a8 <UART_SetConfig+0x268>)
 800326e:	61bb      	str	r3, [r7, #24]
        break;
 8003270:	e00c      	b.n	800328c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003272:	f7ff fd85 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 8003276:	61b8      	str	r0, [r7, #24]
        break;
 8003278:	e008      	b.n	800328c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800327a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800327e:	61bb      	str	r3, [r7, #24]
        break;
 8003280:	e004      	b.n	800328c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	77bb      	strb	r3, [r7, #30]
        break;
 800328a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d074      	beq.n	800337c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	005a      	lsls	r2, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	085b      	lsrs	r3, r3, #1
 800329c:	441a      	add	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	2b0f      	cmp	r3, #15
 80032ac:	d916      	bls.n	80032dc <UART_SetConfig+0x19c>
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b4:	d212      	bcs.n	80032dc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	f023 030f 	bic.w	r3, r3, #15
 80032be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	085b      	lsrs	r3, r3, #1
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	89fb      	ldrh	r3, [r7, #14]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	89fa      	ldrh	r2, [r7, #14]
 80032d8:	60da      	str	r2, [r3, #12]
 80032da:	e04f      	b.n	800337c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	77bb      	strb	r3, [r7, #30]
 80032e0:	e04c      	b.n	800337c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032e2:	7ffb      	ldrb	r3, [r7, #31]
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d828      	bhi.n	800333a <UART_SetConfig+0x1fa>
 80032e8:	a201      	add	r2, pc, #4	@ (adr r2, 80032f0 <UART_SetConfig+0x1b0>)
 80032ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ee:	bf00      	nop
 80032f0:	08003315 	.word	0x08003315
 80032f4:	0800331d 	.word	0x0800331d
 80032f8:	08003325 	.word	0x08003325
 80032fc:	0800333b 	.word	0x0800333b
 8003300:	0800332b 	.word	0x0800332b
 8003304:	0800333b 	.word	0x0800333b
 8003308:	0800333b 	.word	0x0800333b
 800330c:	0800333b 	.word	0x0800333b
 8003310:	08003333 	.word	0x08003333
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003314:	f7ff fd94 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 8003318:	61b8      	str	r0, [r7, #24]
        break;
 800331a:	e013      	b.n	8003344 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800331c:	f7ff fdb2 	bl	8002e84 <HAL_RCC_GetPCLK2Freq>
 8003320:	61b8      	str	r0, [r7, #24]
        break;
 8003322:	e00f      	b.n	8003344 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003324:	4b20      	ldr	r3, [pc, #128]	@ (80033a8 <UART_SetConfig+0x268>)
 8003326:	61bb      	str	r3, [r7, #24]
        break;
 8003328:	e00c      	b.n	8003344 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800332a:	f7ff fd29 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 800332e:	61b8      	str	r0, [r7, #24]
        break;
 8003330:	e008      	b.n	8003344 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003332:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003336:	61bb      	str	r3, [r7, #24]
        break;
 8003338:	e004      	b.n	8003344 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800333a:	2300      	movs	r3, #0
 800333c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	77bb      	strb	r3, [r7, #30]
        break;
 8003342:	bf00      	nop
    }

    if (pclk != 0U)
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d018      	beq.n	800337c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	085a      	lsrs	r2, r3, #1
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	441a      	add	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	fbb2 f3f3 	udiv	r3, r2, r3
 800335c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	2b0f      	cmp	r3, #15
 8003362:	d909      	bls.n	8003378 <UART_SetConfig+0x238>
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800336a:	d205      	bcs.n	8003378 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	b29a      	uxth	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	60da      	str	r2, [r3, #12]
 8003376:	e001      	b.n	800337c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003388:	7fbb      	ldrb	r3, [r7, #30]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3720      	adds	r7, #32
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	efff69f3 	.word	0xefff69f3
 8003398:	40013800 	.word	0x40013800
 800339c:	40021000 	.word	0x40021000
 80033a0:	40004400 	.word	0x40004400
 80033a4:	40004800 	.word	0x40004800
 80033a8:	007a1200 	.word	0x007a1200

080033ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00a      	beq.n	80033d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00a      	beq.n	800341a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003440:	f003 0310 	and.w	r3, r3, #16
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00a      	beq.n	800345e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003488:	2b00      	cmp	r3, #0
 800348a:	d01a      	beq.n	80034c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034aa:	d10a      	bne.n	80034c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00a      	beq.n	80034e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	605a      	str	r2, [r3, #4]
  }
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b098      	sub	sp, #96	@ 0x60
 80034f4:	af02      	add	r7, sp, #8
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003500:	f7fd fe5e 	bl	80011c0 <HAL_GetTick>
 8003504:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b08      	cmp	r3, #8
 8003512:	d12e      	bne.n	8003572 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003514:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800351c:	2200      	movs	r2, #0
 800351e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f88c 	bl	8003640 <UART_WaitOnFlagUntilTimeout>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d021      	beq.n	8003572 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003536:	e853 3f00 	ldrex	r3, [r3]
 800353a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800353c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800353e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003542:	653b      	str	r3, [r7, #80]	@ 0x50
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	461a      	mov	r2, r3
 800354a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800354c:	647b      	str	r3, [r7, #68]	@ 0x44
 800354e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003550:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003552:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003554:	e841 2300 	strex	r3, r2, [r1]
 8003558:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800355a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1e6      	bne.n	800352e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e062      	b.n	8003638 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b04      	cmp	r3, #4
 800357e:	d149      	bne.n	8003614 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003580:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003588:	2200      	movs	r2, #0
 800358a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f856 	bl	8003640 <UART_WaitOnFlagUntilTimeout>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d03c      	beq.n	8003614 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a2:	e853 3f00 	ldrex	r3, [r3]
 80035a6:	623b      	str	r3, [r7, #32]
   return(result);
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	461a      	mov	r2, r3
 80035b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80035ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035c0:	e841 2300 	strex	r3, r2, [r1]
 80035c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80035c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1e6      	bne.n	800359a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3308      	adds	r3, #8
 80035d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	e853 3f00 	ldrex	r3, [r3]
 80035da:	60fb      	str	r3, [r7, #12]
   return(result);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f023 0301 	bic.w	r3, r3, #1
 80035e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	3308      	adds	r3, #8
 80035ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035ec:	61fa      	str	r2, [r7, #28]
 80035ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f0:	69b9      	ldr	r1, [r7, #24]
 80035f2:	69fa      	ldr	r2, [r7, #28]
 80035f4:	e841 2300 	strex	r3, r2, [r1]
 80035f8:	617b      	str	r3, [r7, #20]
   return(result);
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1e5      	bne.n	80035cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2220      	movs	r2, #32
 8003604:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e011      	b.n	8003638 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2220      	movs	r2, #32
 800361e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3758      	adds	r7, #88	@ 0x58
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	4613      	mov	r3, r2
 800364e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003650:	e04f      	b.n	80036f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003658:	d04b      	beq.n	80036f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800365a:	f7fd fdb1 	bl	80011c0 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	429a      	cmp	r2, r3
 8003668:	d302      	bcc.n	8003670 <UART_WaitOnFlagUntilTimeout+0x30>
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e04e      	b.n	8003712 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	2b00      	cmp	r3, #0
 8003680:	d037      	beq.n	80036f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b80      	cmp	r3, #128	@ 0x80
 8003686:	d034      	beq.n	80036f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2b40      	cmp	r3, #64	@ 0x40
 800368c:	d031      	beq.n	80036f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b08      	cmp	r3, #8
 800369a:	d110      	bne.n	80036be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2208      	movs	r2, #8
 80036a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 f8ff 	bl	80038a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2208      	movs	r2, #8
 80036ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e029      	b.n	8003712 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036cc:	d111      	bne.n	80036f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 f8e5 	bl	80038a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e00f      	b.n	8003712 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69da      	ldr	r2, [r3, #28]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4013      	ands	r3, r2
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	429a      	cmp	r2, r3
 8003700:	bf0c      	ite	eq
 8003702:	2301      	moveq	r3, #1
 8003704:	2300      	movne	r3, #0
 8003706:	b2db      	uxtb	r3, r3
 8003708:	461a      	mov	r2, r3
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	429a      	cmp	r2, r3
 800370e:	d0a0      	beq.n	8003652 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b096      	sub	sp, #88	@ 0x58
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	4613      	mov	r3, r2
 8003728:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	88fa      	ldrh	r2, [r7, #6]
 8003734:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2222      	movs	r2, #34	@ 0x22
 8003744:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800374c:	2b00      	cmp	r3, #0
 800374e:	d028      	beq.n	80037a2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003754:	4a3e      	ldr	r2, [pc, #248]	@ (8003850 <UART_Start_Receive_DMA+0x134>)
 8003756:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800375c:	4a3d      	ldr	r2, [pc, #244]	@ (8003854 <UART_Start_Receive_DMA+0x138>)
 800375e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003764:	4a3c      	ldr	r2, [pc, #240]	@ (8003858 <UART_Start_Receive_DMA+0x13c>)
 8003766:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800376c:	2200      	movs	r2, #0
 800376e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3324      	adds	r3, #36	@ 0x24
 800377a:	4619      	mov	r1, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003780:	461a      	mov	r2, r3
 8003782:	88fb      	ldrh	r3, [r7, #6]
 8003784:	f7fd fe80 	bl	8001488 <HAL_DMA_Start_IT>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d009      	beq.n	80037a2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2210      	movs	r2, #16
 8003792:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2220      	movs	r2, #32
 800379a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e051      	b.n	8003846 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d018      	beq.n	80037dc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037b2:	e853 3f00 	ldrex	r3, [r3]
 80037b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037be:	657b      	str	r3, [r7, #84]	@ 0x54
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	461a      	mov	r2, r3
 80037c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037ca:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037cc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80037ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037d0:	e841 2300 	strex	r3, r2, [r1]
 80037d4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80037d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1e6      	bne.n	80037aa <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3308      	adds	r3, #8
 80037e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e6:	e853 3f00 	ldrex	r3, [r3]
 80037ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3308      	adds	r3, #8
 80037fa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80037fc:	637a      	str	r2, [r7, #52]	@ 0x34
 80037fe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003800:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003802:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003804:	e841 2300 	strex	r3, r2, [r1]
 8003808:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800380a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1e5      	bne.n	80037dc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3308      	adds	r3, #8
 8003816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	e853 3f00 	ldrex	r3, [r3]
 800381e:	613b      	str	r3, [r7, #16]
   return(result);
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003826:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3308      	adds	r3, #8
 800382e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003830:	623a      	str	r2, [r7, #32]
 8003832:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003834:	69f9      	ldr	r1, [r7, #28]
 8003836:	6a3a      	ldr	r2, [r7, #32]
 8003838:	e841 2300 	strex	r3, r2, [r1]
 800383c:	61bb      	str	r3, [r7, #24]
   return(result);
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1e5      	bne.n	8003810 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3758      	adds	r7, #88	@ 0x58
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	08003971 	.word	0x08003971
 8003854:	08003a97 	.word	0x08003a97
 8003858:	08003ad5 	.word	0x08003ad5

0800385c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800385c:	b480      	push	{r7}
 800385e:	b089      	sub	sp, #36	@ 0x24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	e853 3f00 	ldrex	r3, [r3]
 8003870:	60bb      	str	r3, [r7, #8]
   return(result);
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003878:	61fb      	str	r3, [r7, #28]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	461a      	mov	r2, r3
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	61bb      	str	r3, [r7, #24]
 8003884:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003886:	6979      	ldr	r1, [r7, #20]
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	e841 2300 	strex	r3, r2, [r1]
 800388e:	613b      	str	r3, [r7, #16]
   return(result);
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1e6      	bne.n	8003864 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2220      	movs	r2, #32
 800389a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800389c:	bf00      	nop
 800389e:	3724      	adds	r7, #36	@ 0x24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b095      	sub	sp, #84	@ 0x54
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b8:	e853 3f00 	ldrex	r3, [r3]
 80038bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80038d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038d6:	e841 2300 	strex	r3, r2, [r1]
 80038da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1e6      	bne.n	80038b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	3308      	adds	r3, #8
 80038e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	e853 3f00 	ldrex	r3, [r3]
 80038f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	f023 0301 	bic.w	r3, r3, #1
 80038f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3308      	adds	r3, #8
 8003900:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003902:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003904:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003906:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003908:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800390a:	e841 2300 	strex	r3, r2, [r1]
 800390e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1e5      	bne.n	80038e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391a:	2b01      	cmp	r3, #1
 800391c:	d118      	bne.n	8003950 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	e853 3f00 	ldrex	r3, [r3]
 800392a:	60bb      	str	r3, [r7, #8]
   return(result);
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f023 0310 	bic.w	r3, r3, #16
 8003932:	647b      	str	r3, [r7, #68]	@ 0x44
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	461a      	mov	r2, r3
 800393a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800393c:	61bb      	str	r3, [r7, #24]
 800393e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003940:	6979      	ldr	r1, [r7, #20]
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	e841 2300 	strex	r3, r2, [r1]
 8003948:	613b      	str	r3, [r7, #16]
   return(result);
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1e6      	bne.n	800391e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2220      	movs	r2, #32
 8003954:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003964:	bf00      	nop
 8003966:	3754      	adds	r7, #84	@ 0x54
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b09c      	sub	sp, #112	@ 0x70
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	2b20      	cmp	r3, #32
 8003984:	d071      	beq.n	8003a6a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8003986:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003988:	2200      	movs	r2, #0
 800398a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800398e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003994:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003996:	e853 3f00 	ldrex	r3, [r3]
 800399a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800399c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800399e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	461a      	mov	r2, r3
 80039aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039ae:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039b4:	e841 2300 	strex	r3, r2, [r1]
 80039b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1e6      	bne.n	800398e <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3308      	adds	r3, #8
 80039c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ca:	e853 3f00 	ldrex	r3, [r3]
 80039ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d2:	f023 0301 	bic.w	r3, r3, #1
 80039d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80039d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3308      	adds	r3, #8
 80039de:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80039e0:	647a      	str	r2, [r7, #68]	@ 0x44
 80039e2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039e8:	e841 2300 	strex	r3, r2, [r1]
 80039ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1e5      	bne.n	80039c0 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3308      	adds	r3, #8
 80039fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fe:	e853 3f00 	ldrex	r3, [r3]
 8003a02:	623b      	str	r3, [r7, #32]
   return(result);
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3308      	adds	r3, #8
 8003a12:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003a14:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a1c:	e841 2300 	strex	r3, r2, [r1]
 8003a20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1e5      	bne.n	80039f4 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d118      	bne.n	8003a6a <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	e853 3f00 	ldrex	r3, [r3]
 8003a44:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f023 0310 	bic.w	r3, r3, #16
 8003a4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a56:	61fb      	str	r3, [r7, #28]
 8003a58:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5a:	69b9      	ldr	r1, [r7, #24]
 8003a5c:	69fa      	ldr	r2, [r7, #28]
 8003a5e:	e841 2300 	strex	r3, r2, [r1]
 8003a62:	617b      	str	r3, [r7, #20]
   return(result);
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1e6      	bne.n	8003a38 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d107      	bne.n	8003a88 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a7a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003a7e:	4619      	mov	r1, r3
 8003a80:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003a82:	f7ff fb50 	bl	8003126 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a86:	e002      	b.n	8003a8e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003a88:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003a8a:	f7fd f953 	bl	8000d34 <HAL_UART_RxCpltCallback>
}
 8003a8e:	bf00      	nop
 8003a90:	3770      	adds	r7, #112	@ 0x70
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b084      	sub	sp, #16
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d109      	bne.n	8003ac6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003ab8:	085b      	lsrs	r3, r3, #1
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	4619      	mov	r1, r3
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f7ff fb31 	bl	8003126 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ac4:	e002      	b.n	8003acc <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f7ff fb19 	bl	80030fe <HAL_UART_RxHalfCpltCallback>
}
 8003acc:	bf00      	nop
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ae6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003afa:	2b80      	cmp	r3, #128	@ 0x80
 8003afc:	d109      	bne.n	8003b12 <UART_DMAError+0x3e>
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	2b21      	cmp	r3, #33	@ 0x21
 8003b02:	d106      	bne.n	8003b12 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8003b0c:	6978      	ldr	r0, [r7, #20]
 8003b0e:	f7ff fea5 	bl	800385c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b1c:	2b40      	cmp	r3, #64	@ 0x40
 8003b1e:	d109      	bne.n	8003b34 <UART_DMAError+0x60>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2b22      	cmp	r3, #34	@ 0x22
 8003b24:	d106      	bne.n	8003b34 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8003b2e:	6978      	ldr	r0, [r7, #20]
 8003b30:	f7ff feba 	bl	80038a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b3a:	f043 0210 	orr.w	r2, r3, #16
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b44:	6978      	ldr	r0, [r7, #20]
 8003b46:	f7ff fae4 	bl	8003112 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b4a:	bf00      	nop
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <__cvt>:
 8003b52:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b56:	ec57 6b10 	vmov	r6, r7, d0
 8003b5a:	2f00      	cmp	r7, #0
 8003b5c:	460c      	mov	r4, r1
 8003b5e:	4619      	mov	r1, r3
 8003b60:	463b      	mov	r3, r7
 8003b62:	bfbb      	ittet	lt
 8003b64:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003b68:	461f      	movlt	r7, r3
 8003b6a:	2300      	movge	r3, #0
 8003b6c:	232d      	movlt	r3, #45	@ 0x2d
 8003b6e:	700b      	strb	r3, [r1, #0]
 8003b70:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b72:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003b76:	4691      	mov	r9, r2
 8003b78:	f023 0820 	bic.w	r8, r3, #32
 8003b7c:	bfbc      	itt	lt
 8003b7e:	4632      	movlt	r2, r6
 8003b80:	4616      	movlt	r6, r2
 8003b82:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003b86:	d005      	beq.n	8003b94 <__cvt+0x42>
 8003b88:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003b8c:	d100      	bne.n	8003b90 <__cvt+0x3e>
 8003b8e:	3401      	adds	r4, #1
 8003b90:	2102      	movs	r1, #2
 8003b92:	e000      	b.n	8003b96 <__cvt+0x44>
 8003b94:	2103      	movs	r1, #3
 8003b96:	ab03      	add	r3, sp, #12
 8003b98:	9301      	str	r3, [sp, #4]
 8003b9a:	ab02      	add	r3, sp, #8
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	ec47 6b10 	vmov	d0, r6, r7
 8003ba2:	4653      	mov	r3, sl
 8003ba4:	4622      	mov	r2, r4
 8003ba6:	f000 fe3b 	bl	8004820 <_dtoa_r>
 8003baa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003bae:	4605      	mov	r5, r0
 8003bb0:	d119      	bne.n	8003be6 <__cvt+0x94>
 8003bb2:	f019 0f01 	tst.w	r9, #1
 8003bb6:	d00e      	beq.n	8003bd6 <__cvt+0x84>
 8003bb8:	eb00 0904 	add.w	r9, r0, r4
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	4630      	mov	r0, r6
 8003bc2:	4639      	mov	r1, r7
 8003bc4:	f7fc ff80 	bl	8000ac8 <__aeabi_dcmpeq>
 8003bc8:	b108      	cbz	r0, 8003bce <__cvt+0x7c>
 8003bca:	f8cd 900c 	str.w	r9, [sp, #12]
 8003bce:	2230      	movs	r2, #48	@ 0x30
 8003bd0:	9b03      	ldr	r3, [sp, #12]
 8003bd2:	454b      	cmp	r3, r9
 8003bd4:	d31e      	bcc.n	8003c14 <__cvt+0xc2>
 8003bd6:	9b03      	ldr	r3, [sp, #12]
 8003bd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003bda:	1b5b      	subs	r3, r3, r5
 8003bdc:	4628      	mov	r0, r5
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	b004      	add	sp, #16
 8003be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003be6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003bea:	eb00 0904 	add.w	r9, r0, r4
 8003bee:	d1e5      	bne.n	8003bbc <__cvt+0x6a>
 8003bf0:	7803      	ldrb	r3, [r0, #0]
 8003bf2:	2b30      	cmp	r3, #48	@ 0x30
 8003bf4:	d10a      	bne.n	8003c0c <__cvt+0xba>
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	4630      	mov	r0, r6
 8003bfc:	4639      	mov	r1, r7
 8003bfe:	f7fc ff63 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c02:	b918      	cbnz	r0, 8003c0c <__cvt+0xba>
 8003c04:	f1c4 0401 	rsb	r4, r4, #1
 8003c08:	f8ca 4000 	str.w	r4, [sl]
 8003c0c:	f8da 3000 	ldr.w	r3, [sl]
 8003c10:	4499      	add	r9, r3
 8003c12:	e7d3      	b.n	8003bbc <__cvt+0x6a>
 8003c14:	1c59      	adds	r1, r3, #1
 8003c16:	9103      	str	r1, [sp, #12]
 8003c18:	701a      	strb	r2, [r3, #0]
 8003c1a:	e7d9      	b.n	8003bd0 <__cvt+0x7e>

08003c1c <__exponent>:
 8003c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c1e:	2900      	cmp	r1, #0
 8003c20:	bfba      	itte	lt
 8003c22:	4249      	neglt	r1, r1
 8003c24:	232d      	movlt	r3, #45	@ 0x2d
 8003c26:	232b      	movge	r3, #43	@ 0x2b
 8003c28:	2909      	cmp	r1, #9
 8003c2a:	7002      	strb	r2, [r0, #0]
 8003c2c:	7043      	strb	r3, [r0, #1]
 8003c2e:	dd29      	ble.n	8003c84 <__exponent+0x68>
 8003c30:	f10d 0307 	add.w	r3, sp, #7
 8003c34:	461d      	mov	r5, r3
 8003c36:	270a      	movs	r7, #10
 8003c38:	461a      	mov	r2, r3
 8003c3a:	fbb1 f6f7 	udiv	r6, r1, r7
 8003c3e:	fb07 1416 	mls	r4, r7, r6, r1
 8003c42:	3430      	adds	r4, #48	@ 0x30
 8003c44:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003c48:	460c      	mov	r4, r1
 8003c4a:	2c63      	cmp	r4, #99	@ 0x63
 8003c4c:	f103 33ff 	add.w	r3, r3, #4294967295
 8003c50:	4631      	mov	r1, r6
 8003c52:	dcf1      	bgt.n	8003c38 <__exponent+0x1c>
 8003c54:	3130      	adds	r1, #48	@ 0x30
 8003c56:	1e94      	subs	r4, r2, #2
 8003c58:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003c5c:	1c41      	adds	r1, r0, #1
 8003c5e:	4623      	mov	r3, r4
 8003c60:	42ab      	cmp	r3, r5
 8003c62:	d30a      	bcc.n	8003c7a <__exponent+0x5e>
 8003c64:	f10d 0309 	add.w	r3, sp, #9
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	42ac      	cmp	r4, r5
 8003c6c:	bf88      	it	hi
 8003c6e:	2300      	movhi	r3, #0
 8003c70:	3302      	adds	r3, #2
 8003c72:	4403      	add	r3, r0
 8003c74:	1a18      	subs	r0, r3, r0
 8003c76:	b003      	add	sp, #12
 8003c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c7a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003c7e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003c82:	e7ed      	b.n	8003c60 <__exponent+0x44>
 8003c84:	2330      	movs	r3, #48	@ 0x30
 8003c86:	3130      	adds	r1, #48	@ 0x30
 8003c88:	7083      	strb	r3, [r0, #2]
 8003c8a:	70c1      	strb	r1, [r0, #3]
 8003c8c:	1d03      	adds	r3, r0, #4
 8003c8e:	e7f1      	b.n	8003c74 <__exponent+0x58>

08003c90 <_printf_float>:
 8003c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c94:	b08d      	sub	sp, #52	@ 0x34
 8003c96:	460c      	mov	r4, r1
 8003c98:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003c9c:	4616      	mov	r6, r2
 8003c9e:	461f      	mov	r7, r3
 8003ca0:	4605      	mov	r5, r0
 8003ca2:	f000 fcbb 	bl	800461c <_localeconv_r>
 8003ca6:	6803      	ldr	r3, [r0, #0]
 8003ca8:	9304      	str	r3, [sp, #16]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fc fae0 	bl	8000270 <strlen>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	930a      	str	r3, [sp, #40]	@ 0x28
 8003cb4:	f8d8 3000 	ldr.w	r3, [r8]
 8003cb8:	9005      	str	r0, [sp, #20]
 8003cba:	3307      	adds	r3, #7
 8003cbc:	f023 0307 	bic.w	r3, r3, #7
 8003cc0:	f103 0208 	add.w	r2, r3, #8
 8003cc4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003cc8:	f8d4 b000 	ldr.w	fp, [r4]
 8003ccc:	f8c8 2000 	str.w	r2, [r8]
 8003cd0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003cd4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003cd8:	9307      	str	r3, [sp, #28]
 8003cda:	f8cd 8018 	str.w	r8, [sp, #24]
 8003cde:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003ce2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ce6:	4b9c      	ldr	r3, [pc, #624]	@ (8003f58 <_printf_float+0x2c8>)
 8003ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cec:	f7fc ff1e 	bl	8000b2c <__aeabi_dcmpun>
 8003cf0:	bb70      	cbnz	r0, 8003d50 <_printf_float+0xc0>
 8003cf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003cf6:	4b98      	ldr	r3, [pc, #608]	@ (8003f58 <_printf_float+0x2c8>)
 8003cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cfc:	f7fc fef8 	bl	8000af0 <__aeabi_dcmple>
 8003d00:	bb30      	cbnz	r0, 8003d50 <_printf_float+0xc0>
 8003d02:	2200      	movs	r2, #0
 8003d04:	2300      	movs	r3, #0
 8003d06:	4640      	mov	r0, r8
 8003d08:	4649      	mov	r1, r9
 8003d0a:	f7fc fee7 	bl	8000adc <__aeabi_dcmplt>
 8003d0e:	b110      	cbz	r0, 8003d16 <_printf_float+0x86>
 8003d10:	232d      	movs	r3, #45	@ 0x2d
 8003d12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d16:	4a91      	ldr	r2, [pc, #580]	@ (8003f5c <_printf_float+0x2cc>)
 8003d18:	4b91      	ldr	r3, [pc, #580]	@ (8003f60 <_printf_float+0x2d0>)
 8003d1a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003d1e:	bf94      	ite	ls
 8003d20:	4690      	movls	r8, r2
 8003d22:	4698      	movhi	r8, r3
 8003d24:	2303      	movs	r3, #3
 8003d26:	6123      	str	r3, [r4, #16]
 8003d28:	f02b 0304 	bic.w	r3, fp, #4
 8003d2c:	6023      	str	r3, [r4, #0]
 8003d2e:	f04f 0900 	mov.w	r9, #0
 8003d32:	9700      	str	r7, [sp, #0]
 8003d34:	4633      	mov	r3, r6
 8003d36:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003d38:	4621      	mov	r1, r4
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	f000 f9d2 	bl	80040e4 <_printf_common>
 8003d40:	3001      	adds	r0, #1
 8003d42:	f040 808d 	bne.w	8003e60 <_printf_float+0x1d0>
 8003d46:	f04f 30ff 	mov.w	r0, #4294967295
 8003d4a:	b00d      	add	sp, #52	@ 0x34
 8003d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d50:	4642      	mov	r2, r8
 8003d52:	464b      	mov	r3, r9
 8003d54:	4640      	mov	r0, r8
 8003d56:	4649      	mov	r1, r9
 8003d58:	f7fc fee8 	bl	8000b2c <__aeabi_dcmpun>
 8003d5c:	b140      	cbz	r0, 8003d70 <_printf_float+0xe0>
 8003d5e:	464b      	mov	r3, r9
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	bfbc      	itt	lt
 8003d64:	232d      	movlt	r3, #45	@ 0x2d
 8003d66:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003d6a:	4a7e      	ldr	r2, [pc, #504]	@ (8003f64 <_printf_float+0x2d4>)
 8003d6c:	4b7e      	ldr	r3, [pc, #504]	@ (8003f68 <_printf_float+0x2d8>)
 8003d6e:	e7d4      	b.n	8003d1a <_printf_float+0x8a>
 8003d70:	6863      	ldr	r3, [r4, #4]
 8003d72:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003d76:	9206      	str	r2, [sp, #24]
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	d13b      	bne.n	8003df4 <_printf_float+0x164>
 8003d7c:	2306      	movs	r3, #6
 8003d7e:	6063      	str	r3, [r4, #4]
 8003d80:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003d84:	2300      	movs	r3, #0
 8003d86:	6022      	str	r2, [r4, #0]
 8003d88:	9303      	str	r3, [sp, #12]
 8003d8a:	ab0a      	add	r3, sp, #40	@ 0x28
 8003d8c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003d90:	ab09      	add	r3, sp, #36	@ 0x24
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	6861      	ldr	r1, [r4, #4]
 8003d96:	ec49 8b10 	vmov	d0, r8, r9
 8003d9a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003d9e:	4628      	mov	r0, r5
 8003da0:	f7ff fed7 	bl	8003b52 <__cvt>
 8003da4:	9b06      	ldr	r3, [sp, #24]
 8003da6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003da8:	2b47      	cmp	r3, #71	@ 0x47
 8003daa:	4680      	mov	r8, r0
 8003dac:	d129      	bne.n	8003e02 <_printf_float+0x172>
 8003dae:	1cc8      	adds	r0, r1, #3
 8003db0:	db02      	blt.n	8003db8 <_printf_float+0x128>
 8003db2:	6863      	ldr	r3, [r4, #4]
 8003db4:	4299      	cmp	r1, r3
 8003db6:	dd41      	ble.n	8003e3c <_printf_float+0x1ac>
 8003db8:	f1aa 0a02 	sub.w	sl, sl, #2
 8003dbc:	fa5f fa8a 	uxtb.w	sl, sl
 8003dc0:	3901      	subs	r1, #1
 8003dc2:	4652      	mov	r2, sl
 8003dc4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003dc8:	9109      	str	r1, [sp, #36]	@ 0x24
 8003dca:	f7ff ff27 	bl	8003c1c <__exponent>
 8003dce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003dd0:	1813      	adds	r3, r2, r0
 8003dd2:	2a01      	cmp	r2, #1
 8003dd4:	4681      	mov	r9, r0
 8003dd6:	6123      	str	r3, [r4, #16]
 8003dd8:	dc02      	bgt.n	8003de0 <_printf_float+0x150>
 8003dda:	6822      	ldr	r2, [r4, #0]
 8003ddc:	07d2      	lsls	r2, r2, #31
 8003dde:	d501      	bpl.n	8003de4 <_printf_float+0x154>
 8003de0:	3301      	adds	r3, #1
 8003de2:	6123      	str	r3, [r4, #16]
 8003de4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0a2      	beq.n	8003d32 <_printf_float+0xa2>
 8003dec:	232d      	movs	r3, #45	@ 0x2d
 8003dee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003df2:	e79e      	b.n	8003d32 <_printf_float+0xa2>
 8003df4:	9a06      	ldr	r2, [sp, #24]
 8003df6:	2a47      	cmp	r2, #71	@ 0x47
 8003df8:	d1c2      	bne.n	8003d80 <_printf_float+0xf0>
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1c0      	bne.n	8003d80 <_printf_float+0xf0>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e7bd      	b.n	8003d7e <_printf_float+0xee>
 8003e02:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003e06:	d9db      	bls.n	8003dc0 <_printf_float+0x130>
 8003e08:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003e0c:	d118      	bne.n	8003e40 <_printf_float+0x1b0>
 8003e0e:	2900      	cmp	r1, #0
 8003e10:	6863      	ldr	r3, [r4, #4]
 8003e12:	dd0b      	ble.n	8003e2c <_printf_float+0x19c>
 8003e14:	6121      	str	r1, [r4, #16]
 8003e16:	b913      	cbnz	r3, 8003e1e <_printf_float+0x18e>
 8003e18:	6822      	ldr	r2, [r4, #0]
 8003e1a:	07d0      	lsls	r0, r2, #31
 8003e1c:	d502      	bpl.n	8003e24 <_printf_float+0x194>
 8003e1e:	3301      	adds	r3, #1
 8003e20:	440b      	add	r3, r1
 8003e22:	6123      	str	r3, [r4, #16]
 8003e24:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003e26:	f04f 0900 	mov.w	r9, #0
 8003e2a:	e7db      	b.n	8003de4 <_printf_float+0x154>
 8003e2c:	b913      	cbnz	r3, 8003e34 <_printf_float+0x1a4>
 8003e2e:	6822      	ldr	r2, [r4, #0]
 8003e30:	07d2      	lsls	r2, r2, #31
 8003e32:	d501      	bpl.n	8003e38 <_printf_float+0x1a8>
 8003e34:	3302      	adds	r3, #2
 8003e36:	e7f4      	b.n	8003e22 <_printf_float+0x192>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e7f2      	b.n	8003e22 <_printf_float+0x192>
 8003e3c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003e40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003e42:	4299      	cmp	r1, r3
 8003e44:	db05      	blt.n	8003e52 <_printf_float+0x1c2>
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	6121      	str	r1, [r4, #16]
 8003e4a:	07d8      	lsls	r0, r3, #31
 8003e4c:	d5ea      	bpl.n	8003e24 <_printf_float+0x194>
 8003e4e:	1c4b      	adds	r3, r1, #1
 8003e50:	e7e7      	b.n	8003e22 <_printf_float+0x192>
 8003e52:	2900      	cmp	r1, #0
 8003e54:	bfd4      	ite	le
 8003e56:	f1c1 0202 	rsble	r2, r1, #2
 8003e5a:	2201      	movgt	r2, #1
 8003e5c:	4413      	add	r3, r2
 8003e5e:	e7e0      	b.n	8003e22 <_printf_float+0x192>
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	055a      	lsls	r2, r3, #21
 8003e64:	d407      	bmi.n	8003e76 <_printf_float+0x1e6>
 8003e66:	6923      	ldr	r3, [r4, #16]
 8003e68:	4642      	mov	r2, r8
 8003e6a:	4631      	mov	r1, r6
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	47b8      	blx	r7
 8003e70:	3001      	adds	r0, #1
 8003e72:	d12b      	bne.n	8003ecc <_printf_float+0x23c>
 8003e74:	e767      	b.n	8003d46 <_printf_float+0xb6>
 8003e76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003e7a:	f240 80dd 	bls.w	8004038 <_printf_float+0x3a8>
 8003e7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003e82:	2200      	movs	r2, #0
 8003e84:	2300      	movs	r3, #0
 8003e86:	f7fc fe1f 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e8a:	2800      	cmp	r0, #0
 8003e8c:	d033      	beq.n	8003ef6 <_printf_float+0x266>
 8003e8e:	4a37      	ldr	r2, [pc, #220]	@ (8003f6c <_printf_float+0x2dc>)
 8003e90:	2301      	movs	r3, #1
 8003e92:	4631      	mov	r1, r6
 8003e94:	4628      	mov	r0, r5
 8003e96:	47b8      	blx	r7
 8003e98:	3001      	adds	r0, #1
 8003e9a:	f43f af54 	beq.w	8003d46 <_printf_float+0xb6>
 8003e9e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003ea2:	4543      	cmp	r3, r8
 8003ea4:	db02      	blt.n	8003eac <_printf_float+0x21c>
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	07d8      	lsls	r0, r3, #31
 8003eaa:	d50f      	bpl.n	8003ecc <_printf_float+0x23c>
 8003eac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003eb0:	4631      	mov	r1, r6
 8003eb2:	4628      	mov	r0, r5
 8003eb4:	47b8      	blx	r7
 8003eb6:	3001      	adds	r0, #1
 8003eb8:	f43f af45 	beq.w	8003d46 <_printf_float+0xb6>
 8003ebc:	f04f 0900 	mov.w	r9, #0
 8003ec0:	f108 38ff 	add.w	r8, r8, #4294967295
 8003ec4:	f104 0a1a 	add.w	sl, r4, #26
 8003ec8:	45c8      	cmp	r8, r9
 8003eca:	dc09      	bgt.n	8003ee0 <_printf_float+0x250>
 8003ecc:	6823      	ldr	r3, [r4, #0]
 8003ece:	079b      	lsls	r3, r3, #30
 8003ed0:	f100 8103 	bmi.w	80040da <_printf_float+0x44a>
 8003ed4:	68e0      	ldr	r0, [r4, #12]
 8003ed6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003ed8:	4298      	cmp	r0, r3
 8003eda:	bfb8      	it	lt
 8003edc:	4618      	movlt	r0, r3
 8003ede:	e734      	b.n	8003d4a <_printf_float+0xba>
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	4652      	mov	r2, sl
 8003ee4:	4631      	mov	r1, r6
 8003ee6:	4628      	mov	r0, r5
 8003ee8:	47b8      	blx	r7
 8003eea:	3001      	adds	r0, #1
 8003eec:	f43f af2b 	beq.w	8003d46 <_printf_float+0xb6>
 8003ef0:	f109 0901 	add.w	r9, r9, #1
 8003ef4:	e7e8      	b.n	8003ec8 <_printf_float+0x238>
 8003ef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	dc39      	bgt.n	8003f70 <_printf_float+0x2e0>
 8003efc:	4a1b      	ldr	r2, [pc, #108]	@ (8003f6c <_printf_float+0x2dc>)
 8003efe:	2301      	movs	r3, #1
 8003f00:	4631      	mov	r1, r6
 8003f02:	4628      	mov	r0, r5
 8003f04:	47b8      	blx	r7
 8003f06:	3001      	adds	r0, #1
 8003f08:	f43f af1d 	beq.w	8003d46 <_printf_float+0xb6>
 8003f0c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003f10:	ea59 0303 	orrs.w	r3, r9, r3
 8003f14:	d102      	bne.n	8003f1c <_printf_float+0x28c>
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	07d9      	lsls	r1, r3, #31
 8003f1a:	d5d7      	bpl.n	8003ecc <_printf_float+0x23c>
 8003f1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f20:	4631      	mov	r1, r6
 8003f22:	4628      	mov	r0, r5
 8003f24:	47b8      	blx	r7
 8003f26:	3001      	adds	r0, #1
 8003f28:	f43f af0d 	beq.w	8003d46 <_printf_float+0xb6>
 8003f2c:	f04f 0a00 	mov.w	sl, #0
 8003f30:	f104 0b1a 	add.w	fp, r4, #26
 8003f34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f36:	425b      	negs	r3, r3
 8003f38:	4553      	cmp	r3, sl
 8003f3a:	dc01      	bgt.n	8003f40 <_printf_float+0x2b0>
 8003f3c:	464b      	mov	r3, r9
 8003f3e:	e793      	b.n	8003e68 <_printf_float+0x1d8>
 8003f40:	2301      	movs	r3, #1
 8003f42:	465a      	mov	r2, fp
 8003f44:	4631      	mov	r1, r6
 8003f46:	4628      	mov	r0, r5
 8003f48:	47b8      	blx	r7
 8003f4a:	3001      	adds	r0, #1
 8003f4c:	f43f aefb 	beq.w	8003d46 <_printf_float+0xb6>
 8003f50:	f10a 0a01 	add.w	sl, sl, #1
 8003f54:	e7ee      	b.n	8003f34 <_printf_float+0x2a4>
 8003f56:	bf00      	nop
 8003f58:	7fefffff 	.word	0x7fefffff
 8003f5c:	080064a0 	.word	0x080064a0
 8003f60:	080064a4 	.word	0x080064a4
 8003f64:	080064a8 	.word	0x080064a8
 8003f68:	080064ac 	.word	0x080064ac
 8003f6c:	080064b0 	.word	0x080064b0
 8003f70:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003f72:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003f76:	4553      	cmp	r3, sl
 8003f78:	bfa8      	it	ge
 8003f7a:	4653      	movge	r3, sl
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	4699      	mov	r9, r3
 8003f80:	dc36      	bgt.n	8003ff0 <_printf_float+0x360>
 8003f82:	f04f 0b00 	mov.w	fp, #0
 8003f86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f8a:	f104 021a 	add.w	r2, r4, #26
 8003f8e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003f90:	9306      	str	r3, [sp, #24]
 8003f92:	eba3 0309 	sub.w	r3, r3, r9
 8003f96:	455b      	cmp	r3, fp
 8003f98:	dc31      	bgt.n	8003ffe <_printf_float+0x36e>
 8003f9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f9c:	459a      	cmp	sl, r3
 8003f9e:	dc3a      	bgt.n	8004016 <_printf_float+0x386>
 8003fa0:	6823      	ldr	r3, [r4, #0]
 8003fa2:	07da      	lsls	r2, r3, #31
 8003fa4:	d437      	bmi.n	8004016 <_printf_float+0x386>
 8003fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fa8:	ebaa 0903 	sub.w	r9, sl, r3
 8003fac:	9b06      	ldr	r3, [sp, #24]
 8003fae:	ebaa 0303 	sub.w	r3, sl, r3
 8003fb2:	4599      	cmp	r9, r3
 8003fb4:	bfa8      	it	ge
 8003fb6:	4699      	movge	r9, r3
 8003fb8:	f1b9 0f00 	cmp.w	r9, #0
 8003fbc:	dc33      	bgt.n	8004026 <_printf_float+0x396>
 8003fbe:	f04f 0800 	mov.w	r8, #0
 8003fc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003fc6:	f104 0b1a 	add.w	fp, r4, #26
 8003fca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fcc:	ebaa 0303 	sub.w	r3, sl, r3
 8003fd0:	eba3 0309 	sub.w	r3, r3, r9
 8003fd4:	4543      	cmp	r3, r8
 8003fd6:	f77f af79 	ble.w	8003ecc <_printf_float+0x23c>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	465a      	mov	r2, fp
 8003fde:	4631      	mov	r1, r6
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	47b8      	blx	r7
 8003fe4:	3001      	adds	r0, #1
 8003fe6:	f43f aeae 	beq.w	8003d46 <_printf_float+0xb6>
 8003fea:	f108 0801 	add.w	r8, r8, #1
 8003fee:	e7ec      	b.n	8003fca <_printf_float+0x33a>
 8003ff0:	4642      	mov	r2, r8
 8003ff2:	4631      	mov	r1, r6
 8003ff4:	4628      	mov	r0, r5
 8003ff6:	47b8      	blx	r7
 8003ff8:	3001      	adds	r0, #1
 8003ffa:	d1c2      	bne.n	8003f82 <_printf_float+0x2f2>
 8003ffc:	e6a3      	b.n	8003d46 <_printf_float+0xb6>
 8003ffe:	2301      	movs	r3, #1
 8004000:	4631      	mov	r1, r6
 8004002:	4628      	mov	r0, r5
 8004004:	9206      	str	r2, [sp, #24]
 8004006:	47b8      	blx	r7
 8004008:	3001      	adds	r0, #1
 800400a:	f43f ae9c 	beq.w	8003d46 <_printf_float+0xb6>
 800400e:	9a06      	ldr	r2, [sp, #24]
 8004010:	f10b 0b01 	add.w	fp, fp, #1
 8004014:	e7bb      	b.n	8003f8e <_printf_float+0x2fe>
 8004016:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800401a:	4631      	mov	r1, r6
 800401c:	4628      	mov	r0, r5
 800401e:	47b8      	blx	r7
 8004020:	3001      	adds	r0, #1
 8004022:	d1c0      	bne.n	8003fa6 <_printf_float+0x316>
 8004024:	e68f      	b.n	8003d46 <_printf_float+0xb6>
 8004026:	9a06      	ldr	r2, [sp, #24]
 8004028:	464b      	mov	r3, r9
 800402a:	4442      	add	r2, r8
 800402c:	4631      	mov	r1, r6
 800402e:	4628      	mov	r0, r5
 8004030:	47b8      	blx	r7
 8004032:	3001      	adds	r0, #1
 8004034:	d1c3      	bne.n	8003fbe <_printf_float+0x32e>
 8004036:	e686      	b.n	8003d46 <_printf_float+0xb6>
 8004038:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800403c:	f1ba 0f01 	cmp.w	sl, #1
 8004040:	dc01      	bgt.n	8004046 <_printf_float+0x3b6>
 8004042:	07db      	lsls	r3, r3, #31
 8004044:	d536      	bpl.n	80040b4 <_printf_float+0x424>
 8004046:	2301      	movs	r3, #1
 8004048:	4642      	mov	r2, r8
 800404a:	4631      	mov	r1, r6
 800404c:	4628      	mov	r0, r5
 800404e:	47b8      	blx	r7
 8004050:	3001      	adds	r0, #1
 8004052:	f43f ae78 	beq.w	8003d46 <_printf_float+0xb6>
 8004056:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800405a:	4631      	mov	r1, r6
 800405c:	4628      	mov	r0, r5
 800405e:	47b8      	blx	r7
 8004060:	3001      	adds	r0, #1
 8004062:	f43f ae70 	beq.w	8003d46 <_printf_float+0xb6>
 8004066:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800406a:	2200      	movs	r2, #0
 800406c:	2300      	movs	r3, #0
 800406e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004072:	f7fc fd29 	bl	8000ac8 <__aeabi_dcmpeq>
 8004076:	b9c0      	cbnz	r0, 80040aa <_printf_float+0x41a>
 8004078:	4653      	mov	r3, sl
 800407a:	f108 0201 	add.w	r2, r8, #1
 800407e:	4631      	mov	r1, r6
 8004080:	4628      	mov	r0, r5
 8004082:	47b8      	blx	r7
 8004084:	3001      	adds	r0, #1
 8004086:	d10c      	bne.n	80040a2 <_printf_float+0x412>
 8004088:	e65d      	b.n	8003d46 <_printf_float+0xb6>
 800408a:	2301      	movs	r3, #1
 800408c:	465a      	mov	r2, fp
 800408e:	4631      	mov	r1, r6
 8004090:	4628      	mov	r0, r5
 8004092:	47b8      	blx	r7
 8004094:	3001      	adds	r0, #1
 8004096:	f43f ae56 	beq.w	8003d46 <_printf_float+0xb6>
 800409a:	f108 0801 	add.w	r8, r8, #1
 800409e:	45d0      	cmp	r8, sl
 80040a0:	dbf3      	blt.n	800408a <_printf_float+0x3fa>
 80040a2:	464b      	mov	r3, r9
 80040a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80040a8:	e6df      	b.n	8003e6a <_printf_float+0x1da>
 80040aa:	f04f 0800 	mov.w	r8, #0
 80040ae:	f104 0b1a 	add.w	fp, r4, #26
 80040b2:	e7f4      	b.n	800409e <_printf_float+0x40e>
 80040b4:	2301      	movs	r3, #1
 80040b6:	4642      	mov	r2, r8
 80040b8:	e7e1      	b.n	800407e <_printf_float+0x3ee>
 80040ba:	2301      	movs	r3, #1
 80040bc:	464a      	mov	r2, r9
 80040be:	4631      	mov	r1, r6
 80040c0:	4628      	mov	r0, r5
 80040c2:	47b8      	blx	r7
 80040c4:	3001      	adds	r0, #1
 80040c6:	f43f ae3e 	beq.w	8003d46 <_printf_float+0xb6>
 80040ca:	f108 0801 	add.w	r8, r8, #1
 80040ce:	68e3      	ldr	r3, [r4, #12]
 80040d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80040d2:	1a5b      	subs	r3, r3, r1
 80040d4:	4543      	cmp	r3, r8
 80040d6:	dcf0      	bgt.n	80040ba <_printf_float+0x42a>
 80040d8:	e6fc      	b.n	8003ed4 <_printf_float+0x244>
 80040da:	f04f 0800 	mov.w	r8, #0
 80040de:	f104 0919 	add.w	r9, r4, #25
 80040e2:	e7f4      	b.n	80040ce <_printf_float+0x43e>

080040e4 <_printf_common>:
 80040e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040e8:	4616      	mov	r6, r2
 80040ea:	4698      	mov	r8, r3
 80040ec:	688a      	ldr	r2, [r1, #8]
 80040ee:	690b      	ldr	r3, [r1, #16]
 80040f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80040f4:	4293      	cmp	r3, r2
 80040f6:	bfb8      	it	lt
 80040f8:	4613      	movlt	r3, r2
 80040fa:	6033      	str	r3, [r6, #0]
 80040fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004100:	4607      	mov	r7, r0
 8004102:	460c      	mov	r4, r1
 8004104:	b10a      	cbz	r2, 800410a <_printf_common+0x26>
 8004106:	3301      	adds	r3, #1
 8004108:	6033      	str	r3, [r6, #0]
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	0699      	lsls	r1, r3, #26
 800410e:	bf42      	ittt	mi
 8004110:	6833      	ldrmi	r3, [r6, #0]
 8004112:	3302      	addmi	r3, #2
 8004114:	6033      	strmi	r3, [r6, #0]
 8004116:	6825      	ldr	r5, [r4, #0]
 8004118:	f015 0506 	ands.w	r5, r5, #6
 800411c:	d106      	bne.n	800412c <_printf_common+0x48>
 800411e:	f104 0a19 	add.w	sl, r4, #25
 8004122:	68e3      	ldr	r3, [r4, #12]
 8004124:	6832      	ldr	r2, [r6, #0]
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	42ab      	cmp	r3, r5
 800412a:	dc26      	bgt.n	800417a <_printf_common+0x96>
 800412c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004130:	6822      	ldr	r2, [r4, #0]
 8004132:	3b00      	subs	r3, #0
 8004134:	bf18      	it	ne
 8004136:	2301      	movne	r3, #1
 8004138:	0692      	lsls	r2, r2, #26
 800413a:	d42b      	bmi.n	8004194 <_printf_common+0xb0>
 800413c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004140:	4641      	mov	r1, r8
 8004142:	4638      	mov	r0, r7
 8004144:	47c8      	blx	r9
 8004146:	3001      	adds	r0, #1
 8004148:	d01e      	beq.n	8004188 <_printf_common+0xa4>
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	6922      	ldr	r2, [r4, #16]
 800414e:	f003 0306 	and.w	r3, r3, #6
 8004152:	2b04      	cmp	r3, #4
 8004154:	bf02      	ittt	eq
 8004156:	68e5      	ldreq	r5, [r4, #12]
 8004158:	6833      	ldreq	r3, [r6, #0]
 800415a:	1aed      	subeq	r5, r5, r3
 800415c:	68a3      	ldr	r3, [r4, #8]
 800415e:	bf0c      	ite	eq
 8004160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004164:	2500      	movne	r5, #0
 8004166:	4293      	cmp	r3, r2
 8004168:	bfc4      	itt	gt
 800416a:	1a9b      	subgt	r3, r3, r2
 800416c:	18ed      	addgt	r5, r5, r3
 800416e:	2600      	movs	r6, #0
 8004170:	341a      	adds	r4, #26
 8004172:	42b5      	cmp	r5, r6
 8004174:	d11a      	bne.n	80041ac <_printf_common+0xc8>
 8004176:	2000      	movs	r0, #0
 8004178:	e008      	b.n	800418c <_printf_common+0xa8>
 800417a:	2301      	movs	r3, #1
 800417c:	4652      	mov	r2, sl
 800417e:	4641      	mov	r1, r8
 8004180:	4638      	mov	r0, r7
 8004182:	47c8      	blx	r9
 8004184:	3001      	adds	r0, #1
 8004186:	d103      	bne.n	8004190 <_printf_common+0xac>
 8004188:	f04f 30ff 	mov.w	r0, #4294967295
 800418c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004190:	3501      	adds	r5, #1
 8004192:	e7c6      	b.n	8004122 <_printf_common+0x3e>
 8004194:	18e1      	adds	r1, r4, r3
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	2030      	movs	r0, #48	@ 0x30
 800419a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800419e:	4422      	add	r2, r4
 80041a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80041a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80041a8:	3302      	adds	r3, #2
 80041aa:	e7c7      	b.n	800413c <_printf_common+0x58>
 80041ac:	2301      	movs	r3, #1
 80041ae:	4622      	mov	r2, r4
 80041b0:	4641      	mov	r1, r8
 80041b2:	4638      	mov	r0, r7
 80041b4:	47c8      	blx	r9
 80041b6:	3001      	adds	r0, #1
 80041b8:	d0e6      	beq.n	8004188 <_printf_common+0xa4>
 80041ba:	3601      	adds	r6, #1
 80041bc:	e7d9      	b.n	8004172 <_printf_common+0x8e>
	...

080041c0 <_printf_i>:
 80041c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041c4:	7e0f      	ldrb	r7, [r1, #24]
 80041c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041c8:	2f78      	cmp	r7, #120	@ 0x78
 80041ca:	4691      	mov	r9, r2
 80041cc:	4680      	mov	r8, r0
 80041ce:	460c      	mov	r4, r1
 80041d0:	469a      	mov	sl, r3
 80041d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041d6:	d807      	bhi.n	80041e8 <_printf_i+0x28>
 80041d8:	2f62      	cmp	r7, #98	@ 0x62
 80041da:	d80a      	bhi.n	80041f2 <_printf_i+0x32>
 80041dc:	2f00      	cmp	r7, #0
 80041de:	f000 80d2 	beq.w	8004386 <_printf_i+0x1c6>
 80041e2:	2f58      	cmp	r7, #88	@ 0x58
 80041e4:	f000 80b9 	beq.w	800435a <_printf_i+0x19a>
 80041e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80041f0:	e03a      	b.n	8004268 <_printf_i+0xa8>
 80041f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80041f6:	2b15      	cmp	r3, #21
 80041f8:	d8f6      	bhi.n	80041e8 <_printf_i+0x28>
 80041fa:	a101      	add	r1, pc, #4	@ (adr r1, 8004200 <_printf_i+0x40>)
 80041fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004200:	08004259 	.word	0x08004259
 8004204:	0800426d 	.word	0x0800426d
 8004208:	080041e9 	.word	0x080041e9
 800420c:	080041e9 	.word	0x080041e9
 8004210:	080041e9 	.word	0x080041e9
 8004214:	080041e9 	.word	0x080041e9
 8004218:	0800426d 	.word	0x0800426d
 800421c:	080041e9 	.word	0x080041e9
 8004220:	080041e9 	.word	0x080041e9
 8004224:	080041e9 	.word	0x080041e9
 8004228:	080041e9 	.word	0x080041e9
 800422c:	0800436d 	.word	0x0800436d
 8004230:	08004297 	.word	0x08004297
 8004234:	08004327 	.word	0x08004327
 8004238:	080041e9 	.word	0x080041e9
 800423c:	080041e9 	.word	0x080041e9
 8004240:	0800438f 	.word	0x0800438f
 8004244:	080041e9 	.word	0x080041e9
 8004248:	08004297 	.word	0x08004297
 800424c:	080041e9 	.word	0x080041e9
 8004250:	080041e9 	.word	0x080041e9
 8004254:	0800432f 	.word	0x0800432f
 8004258:	6833      	ldr	r3, [r6, #0]
 800425a:	1d1a      	adds	r2, r3, #4
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6032      	str	r2, [r6, #0]
 8004260:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004264:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004268:	2301      	movs	r3, #1
 800426a:	e09d      	b.n	80043a8 <_printf_i+0x1e8>
 800426c:	6833      	ldr	r3, [r6, #0]
 800426e:	6820      	ldr	r0, [r4, #0]
 8004270:	1d19      	adds	r1, r3, #4
 8004272:	6031      	str	r1, [r6, #0]
 8004274:	0606      	lsls	r6, r0, #24
 8004276:	d501      	bpl.n	800427c <_printf_i+0xbc>
 8004278:	681d      	ldr	r5, [r3, #0]
 800427a:	e003      	b.n	8004284 <_printf_i+0xc4>
 800427c:	0645      	lsls	r5, r0, #25
 800427e:	d5fb      	bpl.n	8004278 <_printf_i+0xb8>
 8004280:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004284:	2d00      	cmp	r5, #0
 8004286:	da03      	bge.n	8004290 <_printf_i+0xd0>
 8004288:	232d      	movs	r3, #45	@ 0x2d
 800428a:	426d      	negs	r5, r5
 800428c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004290:	4859      	ldr	r0, [pc, #356]	@ (80043f8 <_printf_i+0x238>)
 8004292:	230a      	movs	r3, #10
 8004294:	e011      	b.n	80042ba <_printf_i+0xfa>
 8004296:	6821      	ldr	r1, [r4, #0]
 8004298:	6833      	ldr	r3, [r6, #0]
 800429a:	0608      	lsls	r0, r1, #24
 800429c:	f853 5b04 	ldr.w	r5, [r3], #4
 80042a0:	d402      	bmi.n	80042a8 <_printf_i+0xe8>
 80042a2:	0649      	lsls	r1, r1, #25
 80042a4:	bf48      	it	mi
 80042a6:	b2ad      	uxthmi	r5, r5
 80042a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80042aa:	4853      	ldr	r0, [pc, #332]	@ (80043f8 <_printf_i+0x238>)
 80042ac:	6033      	str	r3, [r6, #0]
 80042ae:	bf14      	ite	ne
 80042b0:	230a      	movne	r3, #10
 80042b2:	2308      	moveq	r3, #8
 80042b4:	2100      	movs	r1, #0
 80042b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80042ba:	6866      	ldr	r6, [r4, #4]
 80042bc:	60a6      	str	r6, [r4, #8]
 80042be:	2e00      	cmp	r6, #0
 80042c0:	bfa2      	ittt	ge
 80042c2:	6821      	ldrge	r1, [r4, #0]
 80042c4:	f021 0104 	bicge.w	r1, r1, #4
 80042c8:	6021      	strge	r1, [r4, #0]
 80042ca:	b90d      	cbnz	r5, 80042d0 <_printf_i+0x110>
 80042cc:	2e00      	cmp	r6, #0
 80042ce:	d04b      	beq.n	8004368 <_printf_i+0x1a8>
 80042d0:	4616      	mov	r6, r2
 80042d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80042d6:	fb03 5711 	mls	r7, r3, r1, r5
 80042da:	5dc7      	ldrb	r7, [r0, r7]
 80042dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042e0:	462f      	mov	r7, r5
 80042e2:	42bb      	cmp	r3, r7
 80042e4:	460d      	mov	r5, r1
 80042e6:	d9f4      	bls.n	80042d2 <_printf_i+0x112>
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d10b      	bne.n	8004304 <_printf_i+0x144>
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	07df      	lsls	r7, r3, #31
 80042f0:	d508      	bpl.n	8004304 <_printf_i+0x144>
 80042f2:	6923      	ldr	r3, [r4, #16]
 80042f4:	6861      	ldr	r1, [r4, #4]
 80042f6:	4299      	cmp	r1, r3
 80042f8:	bfde      	ittt	le
 80042fa:	2330      	movle	r3, #48	@ 0x30
 80042fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004300:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004304:	1b92      	subs	r2, r2, r6
 8004306:	6122      	str	r2, [r4, #16]
 8004308:	f8cd a000 	str.w	sl, [sp]
 800430c:	464b      	mov	r3, r9
 800430e:	aa03      	add	r2, sp, #12
 8004310:	4621      	mov	r1, r4
 8004312:	4640      	mov	r0, r8
 8004314:	f7ff fee6 	bl	80040e4 <_printf_common>
 8004318:	3001      	adds	r0, #1
 800431a:	d14a      	bne.n	80043b2 <_printf_i+0x1f2>
 800431c:	f04f 30ff 	mov.w	r0, #4294967295
 8004320:	b004      	add	sp, #16
 8004322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	f043 0320 	orr.w	r3, r3, #32
 800432c:	6023      	str	r3, [r4, #0]
 800432e:	4833      	ldr	r0, [pc, #204]	@ (80043fc <_printf_i+0x23c>)
 8004330:	2778      	movs	r7, #120	@ 0x78
 8004332:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	6831      	ldr	r1, [r6, #0]
 800433a:	061f      	lsls	r7, r3, #24
 800433c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004340:	d402      	bmi.n	8004348 <_printf_i+0x188>
 8004342:	065f      	lsls	r7, r3, #25
 8004344:	bf48      	it	mi
 8004346:	b2ad      	uxthmi	r5, r5
 8004348:	6031      	str	r1, [r6, #0]
 800434a:	07d9      	lsls	r1, r3, #31
 800434c:	bf44      	itt	mi
 800434e:	f043 0320 	orrmi.w	r3, r3, #32
 8004352:	6023      	strmi	r3, [r4, #0]
 8004354:	b11d      	cbz	r5, 800435e <_printf_i+0x19e>
 8004356:	2310      	movs	r3, #16
 8004358:	e7ac      	b.n	80042b4 <_printf_i+0xf4>
 800435a:	4827      	ldr	r0, [pc, #156]	@ (80043f8 <_printf_i+0x238>)
 800435c:	e7e9      	b.n	8004332 <_printf_i+0x172>
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	f023 0320 	bic.w	r3, r3, #32
 8004364:	6023      	str	r3, [r4, #0]
 8004366:	e7f6      	b.n	8004356 <_printf_i+0x196>
 8004368:	4616      	mov	r6, r2
 800436a:	e7bd      	b.n	80042e8 <_printf_i+0x128>
 800436c:	6833      	ldr	r3, [r6, #0]
 800436e:	6825      	ldr	r5, [r4, #0]
 8004370:	6961      	ldr	r1, [r4, #20]
 8004372:	1d18      	adds	r0, r3, #4
 8004374:	6030      	str	r0, [r6, #0]
 8004376:	062e      	lsls	r6, r5, #24
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	d501      	bpl.n	8004380 <_printf_i+0x1c0>
 800437c:	6019      	str	r1, [r3, #0]
 800437e:	e002      	b.n	8004386 <_printf_i+0x1c6>
 8004380:	0668      	lsls	r0, r5, #25
 8004382:	d5fb      	bpl.n	800437c <_printf_i+0x1bc>
 8004384:	8019      	strh	r1, [r3, #0]
 8004386:	2300      	movs	r3, #0
 8004388:	6123      	str	r3, [r4, #16]
 800438a:	4616      	mov	r6, r2
 800438c:	e7bc      	b.n	8004308 <_printf_i+0x148>
 800438e:	6833      	ldr	r3, [r6, #0]
 8004390:	1d1a      	adds	r2, r3, #4
 8004392:	6032      	str	r2, [r6, #0]
 8004394:	681e      	ldr	r6, [r3, #0]
 8004396:	6862      	ldr	r2, [r4, #4]
 8004398:	2100      	movs	r1, #0
 800439a:	4630      	mov	r0, r6
 800439c:	f7fb ff18 	bl	80001d0 <memchr>
 80043a0:	b108      	cbz	r0, 80043a6 <_printf_i+0x1e6>
 80043a2:	1b80      	subs	r0, r0, r6
 80043a4:	6060      	str	r0, [r4, #4]
 80043a6:	6863      	ldr	r3, [r4, #4]
 80043a8:	6123      	str	r3, [r4, #16]
 80043aa:	2300      	movs	r3, #0
 80043ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043b0:	e7aa      	b.n	8004308 <_printf_i+0x148>
 80043b2:	6923      	ldr	r3, [r4, #16]
 80043b4:	4632      	mov	r2, r6
 80043b6:	4649      	mov	r1, r9
 80043b8:	4640      	mov	r0, r8
 80043ba:	47d0      	blx	sl
 80043bc:	3001      	adds	r0, #1
 80043be:	d0ad      	beq.n	800431c <_printf_i+0x15c>
 80043c0:	6823      	ldr	r3, [r4, #0]
 80043c2:	079b      	lsls	r3, r3, #30
 80043c4:	d413      	bmi.n	80043ee <_printf_i+0x22e>
 80043c6:	68e0      	ldr	r0, [r4, #12]
 80043c8:	9b03      	ldr	r3, [sp, #12]
 80043ca:	4298      	cmp	r0, r3
 80043cc:	bfb8      	it	lt
 80043ce:	4618      	movlt	r0, r3
 80043d0:	e7a6      	b.n	8004320 <_printf_i+0x160>
 80043d2:	2301      	movs	r3, #1
 80043d4:	4632      	mov	r2, r6
 80043d6:	4649      	mov	r1, r9
 80043d8:	4640      	mov	r0, r8
 80043da:	47d0      	blx	sl
 80043dc:	3001      	adds	r0, #1
 80043de:	d09d      	beq.n	800431c <_printf_i+0x15c>
 80043e0:	3501      	adds	r5, #1
 80043e2:	68e3      	ldr	r3, [r4, #12]
 80043e4:	9903      	ldr	r1, [sp, #12]
 80043e6:	1a5b      	subs	r3, r3, r1
 80043e8:	42ab      	cmp	r3, r5
 80043ea:	dcf2      	bgt.n	80043d2 <_printf_i+0x212>
 80043ec:	e7eb      	b.n	80043c6 <_printf_i+0x206>
 80043ee:	2500      	movs	r5, #0
 80043f0:	f104 0619 	add.w	r6, r4, #25
 80043f4:	e7f5      	b.n	80043e2 <_printf_i+0x222>
 80043f6:	bf00      	nop
 80043f8:	080064b2 	.word	0x080064b2
 80043fc:	080064c3 	.word	0x080064c3

08004400 <std>:
 8004400:	2300      	movs	r3, #0
 8004402:	b510      	push	{r4, lr}
 8004404:	4604      	mov	r4, r0
 8004406:	e9c0 3300 	strd	r3, r3, [r0]
 800440a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800440e:	6083      	str	r3, [r0, #8]
 8004410:	8181      	strh	r1, [r0, #12]
 8004412:	6643      	str	r3, [r0, #100]	@ 0x64
 8004414:	81c2      	strh	r2, [r0, #14]
 8004416:	6183      	str	r3, [r0, #24]
 8004418:	4619      	mov	r1, r3
 800441a:	2208      	movs	r2, #8
 800441c:	305c      	adds	r0, #92	@ 0x5c
 800441e:	f000 f8f4 	bl	800460a <memset>
 8004422:	4b0d      	ldr	r3, [pc, #52]	@ (8004458 <std+0x58>)
 8004424:	6263      	str	r3, [r4, #36]	@ 0x24
 8004426:	4b0d      	ldr	r3, [pc, #52]	@ (800445c <std+0x5c>)
 8004428:	62a3      	str	r3, [r4, #40]	@ 0x28
 800442a:	4b0d      	ldr	r3, [pc, #52]	@ (8004460 <std+0x60>)
 800442c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800442e:	4b0d      	ldr	r3, [pc, #52]	@ (8004464 <std+0x64>)
 8004430:	6323      	str	r3, [r4, #48]	@ 0x30
 8004432:	4b0d      	ldr	r3, [pc, #52]	@ (8004468 <std+0x68>)
 8004434:	6224      	str	r4, [r4, #32]
 8004436:	429c      	cmp	r4, r3
 8004438:	d006      	beq.n	8004448 <std+0x48>
 800443a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800443e:	4294      	cmp	r4, r2
 8004440:	d002      	beq.n	8004448 <std+0x48>
 8004442:	33d0      	adds	r3, #208	@ 0xd0
 8004444:	429c      	cmp	r4, r3
 8004446:	d105      	bne.n	8004454 <std+0x54>
 8004448:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800444c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004450:	f000 b958 	b.w	8004704 <__retarget_lock_init_recursive>
 8004454:	bd10      	pop	{r4, pc}
 8004456:	bf00      	nop
 8004458:	08004585 	.word	0x08004585
 800445c:	080045a7 	.word	0x080045a7
 8004460:	080045df 	.word	0x080045df
 8004464:	08004603 	.word	0x08004603
 8004468:	200002c8 	.word	0x200002c8

0800446c <stdio_exit_handler>:
 800446c:	4a02      	ldr	r2, [pc, #8]	@ (8004478 <stdio_exit_handler+0xc>)
 800446e:	4903      	ldr	r1, [pc, #12]	@ (800447c <stdio_exit_handler+0x10>)
 8004470:	4803      	ldr	r0, [pc, #12]	@ (8004480 <stdio_exit_handler+0x14>)
 8004472:	f000 b869 	b.w	8004548 <_fwalk_sglue>
 8004476:	bf00      	nop
 8004478:	2000000c 	.word	0x2000000c
 800447c:	08005db5 	.word	0x08005db5
 8004480:	2000001c 	.word	0x2000001c

08004484 <cleanup_stdio>:
 8004484:	6841      	ldr	r1, [r0, #4]
 8004486:	4b0c      	ldr	r3, [pc, #48]	@ (80044b8 <cleanup_stdio+0x34>)
 8004488:	4299      	cmp	r1, r3
 800448a:	b510      	push	{r4, lr}
 800448c:	4604      	mov	r4, r0
 800448e:	d001      	beq.n	8004494 <cleanup_stdio+0x10>
 8004490:	f001 fc90 	bl	8005db4 <_fflush_r>
 8004494:	68a1      	ldr	r1, [r4, #8]
 8004496:	4b09      	ldr	r3, [pc, #36]	@ (80044bc <cleanup_stdio+0x38>)
 8004498:	4299      	cmp	r1, r3
 800449a:	d002      	beq.n	80044a2 <cleanup_stdio+0x1e>
 800449c:	4620      	mov	r0, r4
 800449e:	f001 fc89 	bl	8005db4 <_fflush_r>
 80044a2:	68e1      	ldr	r1, [r4, #12]
 80044a4:	4b06      	ldr	r3, [pc, #24]	@ (80044c0 <cleanup_stdio+0x3c>)
 80044a6:	4299      	cmp	r1, r3
 80044a8:	d004      	beq.n	80044b4 <cleanup_stdio+0x30>
 80044aa:	4620      	mov	r0, r4
 80044ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044b0:	f001 bc80 	b.w	8005db4 <_fflush_r>
 80044b4:	bd10      	pop	{r4, pc}
 80044b6:	bf00      	nop
 80044b8:	200002c8 	.word	0x200002c8
 80044bc:	20000330 	.word	0x20000330
 80044c0:	20000398 	.word	0x20000398

080044c4 <global_stdio_init.part.0>:
 80044c4:	b510      	push	{r4, lr}
 80044c6:	4b0b      	ldr	r3, [pc, #44]	@ (80044f4 <global_stdio_init.part.0+0x30>)
 80044c8:	4c0b      	ldr	r4, [pc, #44]	@ (80044f8 <global_stdio_init.part.0+0x34>)
 80044ca:	4a0c      	ldr	r2, [pc, #48]	@ (80044fc <global_stdio_init.part.0+0x38>)
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	4620      	mov	r0, r4
 80044d0:	2200      	movs	r2, #0
 80044d2:	2104      	movs	r1, #4
 80044d4:	f7ff ff94 	bl	8004400 <std>
 80044d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80044dc:	2201      	movs	r2, #1
 80044de:	2109      	movs	r1, #9
 80044e0:	f7ff ff8e 	bl	8004400 <std>
 80044e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80044e8:	2202      	movs	r2, #2
 80044ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044ee:	2112      	movs	r1, #18
 80044f0:	f7ff bf86 	b.w	8004400 <std>
 80044f4:	20000400 	.word	0x20000400
 80044f8:	200002c8 	.word	0x200002c8
 80044fc:	0800446d 	.word	0x0800446d

08004500 <__sfp_lock_acquire>:
 8004500:	4801      	ldr	r0, [pc, #4]	@ (8004508 <__sfp_lock_acquire+0x8>)
 8004502:	f000 b900 	b.w	8004706 <__retarget_lock_acquire_recursive>
 8004506:	bf00      	nop
 8004508:	20000409 	.word	0x20000409

0800450c <__sfp_lock_release>:
 800450c:	4801      	ldr	r0, [pc, #4]	@ (8004514 <__sfp_lock_release+0x8>)
 800450e:	f000 b8fb 	b.w	8004708 <__retarget_lock_release_recursive>
 8004512:	bf00      	nop
 8004514:	20000409 	.word	0x20000409

08004518 <__sinit>:
 8004518:	b510      	push	{r4, lr}
 800451a:	4604      	mov	r4, r0
 800451c:	f7ff fff0 	bl	8004500 <__sfp_lock_acquire>
 8004520:	6a23      	ldr	r3, [r4, #32]
 8004522:	b11b      	cbz	r3, 800452c <__sinit+0x14>
 8004524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004528:	f7ff bff0 	b.w	800450c <__sfp_lock_release>
 800452c:	4b04      	ldr	r3, [pc, #16]	@ (8004540 <__sinit+0x28>)
 800452e:	6223      	str	r3, [r4, #32]
 8004530:	4b04      	ldr	r3, [pc, #16]	@ (8004544 <__sinit+0x2c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1f5      	bne.n	8004524 <__sinit+0xc>
 8004538:	f7ff ffc4 	bl	80044c4 <global_stdio_init.part.0>
 800453c:	e7f2      	b.n	8004524 <__sinit+0xc>
 800453e:	bf00      	nop
 8004540:	08004485 	.word	0x08004485
 8004544:	20000400 	.word	0x20000400

08004548 <_fwalk_sglue>:
 8004548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800454c:	4607      	mov	r7, r0
 800454e:	4688      	mov	r8, r1
 8004550:	4614      	mov	r4, r2
 8004552:	2600      	movs	r6, #0
 8004554:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004558:	f1b9 0901 	subs.w	r9, r9, #1
 800455c:	d505      	bpl.n	800456a <_fwalk_sglue+0x22>
 800455e:	6824      	ldr	r4, [r4, #0]
 8004560:	2c00      	cmp	r4, #0
 8004562:	d1f7      	bne.n	8004554 <_fwalk_sglue+0xc>
 8004564:	4630      	mov	r0, r6
 8004566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800456a:	89ab      	ldrh	r3, [r5, #12]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d907      	bls.n	8004580 <_fwalk_sglue+0x38>
 8004570:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004574:	3301      	adds	r3, #1
 8004576:	d003      	beq.n	8004580 <_fwalk_sglue+0x38>
 8004578:	4629      	mov	r1, r5
 800457a:	4638      	mov	r0, r7
 800457c:	47c0      	blx	r8
 800457e:	4306      	orrs	r6, r0
 8004580:	3568      	adds	r5, #104	@ 0x68
 8004582:	e7e9      	b.n	8004558 <_fwalk_sglue+0x10>

08004584 <__sread>:
 8004584:	b510      	push	{r4, lr}
 8004586:	460c      	mov	r4, r1
 8004588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800458c:	f000 f86c 	bl	8004668 <_read_r>
 8004590:	2800      	cmp	r0, #0
 8004592:	bfab      	itete	ge
 8004594:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004596:	89a3      	ldrhlt	r3, [r4, #12]
 8004598:	181b      	addge	r3, r3, r0
 800459a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800459e:	bfac      	ite	ge
 80045a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80045a2:	81a3      	strhlt	r3, [r4, #12]
 80045a4:	bd10      	pop	{r4, pc}

080045a6 <__swrite>:
 80045a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045aa:	461f      	mov	r7, r3
 80045ac:	898b      	ldrh	r3, [r1, #12]
 80045ae:	05db      	lsls	r3, r3, #23
 80045b0:	4605      	mov	r5, r0
 80045b2:	460c      	mov	r4, r1
 80045b4:	4616      	mov	r6, r2
 80045b6:	d505      	bpl.n	80045c4 <__swrite+0x1e>
 80045b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045bc:	2302      	movs	r3, #2
 80045be:	2200      	movs	r2, #0
 80045c0:	f000 f840 	bl	8004644 <_lseek_r>
 80045c4:	89a3      	ldrh	r3, [r4, #12]
 80045c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045ce:	81a3      	strh	r3, [r4, #12]
 80045d0:	4632      	mov	r2, r6
 80045d2:	463b      	mov	r3, r7
 80045d4:	4628      	mov	r0, r5
 80045d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045da:	f000 b857 	b.w	800468c <_write_r>

080045de <__sseek>:
 80045de:	b510      	push	{r4, lr}
 80045e0:	460c      	mov	r4, r1
 80045e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045e6:	f000 f82d 	bl	8004644 <_lseek_r>
 80045ea:	1c43      	adds	r3, r0, #1
 80045ec:	89a3      	ldrh	r3, [r4, #12]
 80045ee:	bf15      	itete	ne
 80045f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80045f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80045f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80045fa:	81a3      	strheq	r3, [r4, #12]
 80045fc:	bf18      	it	ne
 80045fe:	81a3      	strhne	r3, [r4, #12]
 8004600:	bd10      	pop	{r4, pc}

08004602 <__sclose>:
 8004602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004606:	f000 b80d 	b.w	8004624 <_close_r>

0800460a <memset>:
 800460a:	4402      	add	r2, r0
 800460c:	4603      	mov	r3, r0
 800460e:	4293      	cmp	r3, r2
 8004610:	d100      	bne.n	8004614 <memset+0xa>
 8004612:	4770      	bx	lr
 8004614:	f803 1b01 	strb.w	r1, [r3], #1
 8004618:	e7f9      	b.n	800460e <memset+0x4>
	...

0800461c <_localeconv_r>:
 800461c:	4800      	ldr	r0, [pc, #0]	@ (8004620 <_localeconv_r+0x4>)
 800461e:	4770      	bx	lr
 8004620:	20000158 	.word	0x20000158

08004624 <_close_r>:
 8004624:	b538      	push	{r3, r4, r5, lr}
 8004626:	4d06      	ldr	r5, [pc, #24]	@ (8004640 <_close_r+0x1c>)
 8004628:	2300      	movs	r3, #0
 800462a:	4604      	mov	r4, r0
 800462c:	4608      	mov	r0, r1
 800462e:	602b      	str	r3, [r5, #0]
 8004630:	f7fc fcc6 	bl	8000fc0 <_close>
 8004634:	1c43      	adds	r3, r0, #1
 8004636:	d102      	bne.n	800463e <_close_r+0x1a>
 8004638:	682b      	ldr	r3, [r5, #0]
 800463a:	b103      	cbz	r3, 800463e <_close_r+0x1a>
 800463c:	6023      	str	r3, [r4, #0]
 800463e:	bd38      	pop	{r3, r4, r5, pc}
 8004640:	20000404 	.word	0x20000404

08004644 <_lseek_r>:
 8004644:	b538      	push	{r3, r4, r5, lr}
 8004646:	4d07      	ldr	r5, [pc, #28]	@ (8004664 <_lseek_r+0x20>)
 8004648:	4604      	mov	r4, r0
 800464a:	4608      	mov	r0, r1
 800464c:	4611      	mov	r1, r2
 800464e:	2200      	movs	r2, #0
 8004650:	602a      	str	r2, [r5, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	f7fc fcdb 	bl	800100e <_lseek>
 8004658:	1c43      	adds	r3, r0, #1
 800465a:	d102      	bne.n	8004662 <_lseek_r+0x1e>
 800465c:	682b      	ldr	r3, [r5, #0]
 800465e:	b103      	cbz	r3, 8004662 <_lseek_r+0x1e>
 8004660:	6023      	str	r3, [r4, #0]
 8004662:	bd38      	pop	{r3, r4, r5, pc}
 8004664:	20000404 	.word	0x20000404

08004668 <_read_r>:
 8004668:	b538      	push	{r3, r4, r5, lr}
 800466a:	4d07      	ldr	r5, [pc, #28]	@ (8004688 <_read_r+0x20>)
 800466c:	4604      	mov	r4, r0
 800466e:	4608      	mov	r0, r1
 8004670:	4611      	mov	r1, r2
 8004672:	2200      	movs	r2, #0
 8004674:	602a      	str	r2, [r5, #0]
 8004676:	461a      	mov	r2, r3
 8004678:	f7fc fc69 	bl	8000f4e <_read>
 800467c:	1c43      	adds	r3, r0, #1
 800467e:	d102      	bne.n	8004686 <_read_r+0x1e>
 8004680:	682b      	ldr	r3, [r5, #0]
 8004682:	b103      	cbz	r3, 8004686 <_read_r+0x1e>
 8004684:	6023      	str	r3, [r4, #0]
 8004686:	bd38      	pop	{r3, r4, r5, pc}
 8004688:	20000404 	.word	0x20000404

0800468c <_write_r>:
 800468c:	b538      	push	{r3, r4, r5, lr}
 800468e:	4d07      	ldr	r5, [pc, #28]	@ (80046ac <_write_r+0x20>)
 8004690:	4604      	mov	r4, r0
 8004692:	4608      	mov	r0, r1
 8004694:	4611      	mov	r1, r2
 8004696:	2200      	movs	r2, #0
 8004698:	602a      	str	r2, [r5, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	f7fc fc74 	bl	8000f88 <_write>
 80046a0:	1c43      	adds	r3, r0, #1
 80046a2:	d102      	bne.n	80046aa <_write_r+0x1e>
 80046a4:	682b      	ldr	r3, [r5, #0]
 80046a6:	b103      	cbz	r3, 80046aa <_write_r+0x1e>
 80046a8:	6023      	str	r3, [r4, #0]
 80046aa:	bd38      	pop	{r3, r4, r5, pc}
 80046ac:	20000404 	.word	0x20000404

080046b0 <__errno>:
 80046b0:	4b01      	ldr	r3, [pc, #4]	@ (80046b8 <__errno+0x8>)
 80046b2:	6818      	ldr	r0, [r3, #0]
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	20000018 	.word	0x20000018

080046bc <__libc_init_array>:
 80046bc:	b570      	push	{r4, r5, r6, lr}
 80046be:	4d0d      	ldr	r5, [pc, #52]	@ (80046f4 <__libc_init_array+0x38>)
 80046c0:	4c0d      	ldr	r4, [pc, #52]	@ (80046f8 <__libc_init_array+0x3c>)
 80046c2:	1b64      	subs	r4, r4, r5
 80046c4:	10a4      	asrs	r4, r4, #2
 80046c6:	2600      	movs	r6, #0
 80046c8:	42a6      	cmp	r6, r4
 80046ca:	d109      	bne.n	80046e0 <__libc_init_array+0x24>
 80046cc:	4d0b      	ldr	r5, [pc, #44]	@ (80046fc <__libc_init_array+0x40>)
 80046ce:	4c0c      	ldr	r4, [pc, #48]	@ (8004700 <__libc_init_array+0x44>)
 80046d0:	f001 febe 	bl	8006450 <_init>
 80046d4:	1b64      	subs	r4, r4, r5
 80046d6:	10a4      	asrs	r4, r4, #2
 80046d8:	2600      	movs	r6, #0
 80046da:	42a6      	cmp	r6, r4
 80046dc:	d105      	bne.n	80046ea <__libc_init_array+0x2e>
 80046de:	bd70      	pop	{r4, r5, r6, pc}
 80046e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046e4:	4798      	blx	r3
 80046e6:	3601      	adds	r6, #1
 80046e8:	e7ee      	b.n	80046c8 <__libc_init_array+0xc>
 80046ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ee:	4798      	blx	r3
 80046f0:	3601      	adds	r6, #1
 80046f2:	e7f2      	b.n	80046da <__libc_init_array+0x1e>
 80046f4:	08006818 	.word	0x08006818
 80046f8:	08006818 	.word	0x08006818
 80046fc:	08006818 	.word	0x08006818
 8004700:	0800681c 	.word	0x0800681c

08004704 <__retarget_lock_init_recursive>:
 8004704:	4770      	bx	lr

08004706 <__retarget_lock_acquire_recursive>:
 8004706:	4770      	bx	lr

08004708 <__retarget_lock_release_recursive>:
 8004708:	4770      	bx	lr

0800470a <quorem>:
 800470a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800470e:	6903      	ldr	r3, [r0, #16]
 8004710:	690c      	ldr	r4, [r1, #16]
 8004712:	42a3      	cmp	r3, r4
 8004714:	4607      	mov	r7, r0
 8004716:	db7e      	blt.n	8004816 <quorem+0x10c>
 8004718:	3c01      	subs	r4, #1
 800471a:	f101 0814 	add.w	r8, r1, #20
 800471e:	00a3      	lsls	r3, r4, #2
 8004720:	f100 0514 	add.w	r5, r0, #20
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800472a:	9301      	str	r3, [sp, #4]
 800472c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004730:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004734:	3301      	adds	r3, #1
 8004736:	429a      	cmp	r2, r3
 8004738:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800473c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004740:	d32e      	bcc.n	80047a0 <quorem+0x96>
 8004742:	f04f 0a00 	mov.w	sl, #0
 8004746:	46c4      	mov	ip, r8
 8004748:	46ae      	mov	lr, r5
 800474a:	46d3      	mov	fp, sl
 800474c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004750:	b298      	uxth	r0, r3
 8004752:	fb06 a000 	mla	r0, r6, r0, sl
 8004756:	0c02      	lsrs	r2, r0, #16
 8004758:	0c1b      	lsrs	r3, r3, #16
 800475a:	fb06 2303 	mla	r3, r6, r3, r2
 800475e:	f8de 2000 	ldr.w	r2, [lr]
 8004762:	b280      	uxth	r0, r0
 8004764:	b292      	uxth	r2, r2
 8004766:	1a12      	subs	r2, r2, r0
 8004768:	445a      	add	r2, fp
 800476a:	f8de 0000 	ldr.w	r0, [lr]
 800476e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004772:	b29b      	uxth	r3, r3
 8004774:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004778:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800477c:	b292      	uxth	r2, r2
 800477e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004782:	45e1      	cmp	r9, ip
 8004784:	f84e 2b04 	str.w	r2, [lr], #4
 8004788:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800478c:	d2de      	bcs.n	800474c <quorem+0x42>
 800478e:	9b00      	ldr	r3, [sp, #0]
 8004790:	58eb      	ldr	r3, [r5, r3]
 8004792:	b92b      	cbnz	r3, 80047a0 <quorem+0x96>
 8004794:	9b01      	ldr	r3, [sp, #4]
 8004796:	3b04      	subs	r3, #4
 8004798:	429d      	cmp	r5, r3
 800479a:	461a      	mov	r2, r3
 800479c:	d32f      	bcc.n	80047fe <quorem+0xf4>
 800479e:	613c      	str	r4, [r7, #16]
 80047a0:	4638      	mov	r0, r7
 80047a2:	f001 f97b 	bl	8005a9c <__mcmp>
 80047a6:	2800      	cmp	r0, #0
 80047a8:	db25      	blt.n	80047f6 <quorem+0xec>
 80047aa:	4629      	mov	r1, r5
 80047ac:	2000      	movs	r0, #0
 80047ae:	f858 2b04 	ldr.w	r2, [r8], #4
 80047b2:	f8d1 c000 	ldr.w	ip, [r1]
 80047b6:	fa1f fe82 	uxth.w	lr, r2
 80047ba:	fa1f f38c 	uxth.w	r3, ip
 80047be:	eba3 030e 	sub.w	r3, r3, lr
 80047c2:	4403      	add	r3, r0
 80047c4:	0c12      	lsrs	r2, r2, #16
 80047c6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80047ca:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047d4:	45c1      	cmp	r9, r8
 80047d6:	f841 3b04 	str.w	r3, [r1], #4
 80047da:	ea4f 4022 	mov.w	r0, r2, asr #16
 80047de:	d2e6      	bcs.n	80047ae <quorem+0xa4>
 80047e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80047e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80047e8:	b922      	cbnz	r2, 80047f4 <quorem+0xea>
 80047ea:	3b04      	subs	r3, #4
 80047ec:	429d      	cmp	r5, r3
 80047ee:	461a      	mov	r2, r3
 80047f0:	d30b      	bcc.n	800480a <quorem+0x100>
 80047f2:	613c      	str	r4, [r7, #16]
 80047f4:	3601      	adds	r6, #1
 80047f6:	4630      	mov	r0, r6
 80047f8:	b003      	add	sp, #12
 80047fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047fe:	6812      	ldr	r2, [r2, #0]
 8004800:	3b04      	subs	r3, #4
 8004802:	2a00      	cmp	r2, #0
 8004804:	d1cb      	bne.n	800479e <quorem+0x94>
 8004806:	3c01      	subs	r4, #1
 8004808:	e7c6      	b.n	8004798 <quorem+0x8e>
 800480a:	6812      	ldr	r2, [r2, #0]
 800480c:	3b04      	subs	r3, #4
 800480e:	2a00      	cmp	r2, #0
 8004810:	d1ef      	bne.n	80047f2 <quorem+0xe8>
 8004812:	3c01      	subs	r4, #1
 8004814:	e7ea      	b.n	80047ec <quorem+0xe2>
 8004816:	2000      	movs	r0, #0
 8004818:	e7ee      	b.n	80047f8 <quorem+0xee>
 800481a:	0000      	movs	r0, r0
 800481c:	0000      	movs	r0, r0
	...

08004820 <_dtoa_r>:
 8004820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004824:	69c7      	ldr	r7, [r0, #28]
 8004826:	b099      	sub	sp, #100	@ 0x64
 8004828:	ed8d 0b02 	vstr	d0, [sp, #8]
 800482c:	ec55 4b10 	vmov	r4, r5, d0
 8004830:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004832:	9109      	str	r1, [sp, #36]	@ 0x24
 8004834:	4683      	mov	fp, r0
 8004836:	920e      	str	r2, [sp, #56]	@ 0x38
 8004838:	9313      	str	r3, [sp, #76]	@ 0x4c
 800483a:	b97f      	cbnz	r7, 800485c <_dtoa_r+0x3c>
 800483c:	2010      	movs	r0, #16
 800483e:	f000 fdfd 	bl	800543c <malloc>
 8004842:	4602      	mov	r2, r0
 8004844:	f8cb 001c 	str.w	r0, [fp, #28]
 8004848:	b920      	cbnz	r0, 8004854 <_dtoa_r+0x34>
 800484a:	4ba7      	ldr	r3, [pc, #668]	@ (8004ae8 <_dtoa_r+0x2c8>)
 800484c:	21ef      	movs	r1, #239	@ 0xef
 800484e:	48a7      	ldr	r0, [pc, #668]	@ (8004aec <_dtoa_r+0x2cc>)
 8004850:	f001 faf6 	bl	8005e40 <__assert_func>
 8004854:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004858:	6007      	str	r7, [r0, #0]
 800485a:	60c7      	str	r7, [r0, #12]
 800485c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004860:	6819      	ldr	r1, [r3, #0]
 8004862:	b159      	cbz	r1, 800487c <_dtoa_r+0x5c>
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	604a      	str	r2, [r1, #4]
 8004868:	2301      	movs	r3, #1
 800486a:	4093      	lsls	r3, r2
 800486c:	608b      	str	r3, [r1, #8]
 800486e:	4658      	mov	r0, fp
 8004870:	f000 feda 	bl	8005628 <_Bfree>
 8004874:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	1e2b      	subs	r3, r5, #0
 800487e:	bfb9      	ittee	lt
 8004880:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004884:	9303      	strlt	r3, [sp, #12]
 8004886:	2300      	movge	r3, #0
 8004888:	6033      	strge	r3, [r6, #0]
 800488a:	9f03      	ldr	r7, [sp, #12]
 800488c:	4b98      	ldr	r3, [pc, #608]	@ (8004af0 <_dtoa_r+0x2d0>)
 800488e:	bfbc      	itt	lt
 8004890:	2201      	movlt	r2, #1
 8004892:	6032      	strlt	r2, [r6, #0]
 8004894:	43bb      	bics	r3, r7
 8004896:	d112      	bne.n	80048be <_dtoa_r+0x9e>
 8004898:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800489a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80048a4:	4323      	orrs	r3, r4
 80048a6:	f000 854d 	beq.w	8005344 <_dtoa_r+0xb24>
 80048aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80048ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004b04 <_dtoa_r+0x2e4>
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 854f 	beq.w	8005354 <_dtoa_r+0xb34>
 80048b6:	f10a 0303 	add.w	r3, sl, #3
 80048ba:	f000 bd49 	b.w	8005350 <_dtoa_r+0xb30>
 80048be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80048c2:	2200      	movs	r2, #0
 80048c4:	ec51 0b17 	vmov	r0, r1, d7
 80048c8:	2300      	movs	r3, #0
 80048ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80048ce:	f7fc f8fb 	bl	8000ac8 <__aeabi_dcmpeq>
 80048d2:	4680      	mov	r8, r0
 80048d4:	b158      	cbz	r0, 80048ee <_dtoa_r+0xce>
 80048d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80048d8:	2301      	movs	r3, #1
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80048de:	b113      	cbz	r3, 80048e6 <_dtoa_r+0xc6>
 80048e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80048e2:	4b84      	ldr	r3, [pc, #528]	@ (8004af4 <_dtoa_r+0x2d4>)
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004b08 <_dtoa_r+0x2e8>
 80048ea:	f000 bd33 	b.w	8005354 <_dtoa_r+0xb34>
 80048ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80048f2:	aa16      	add	r2, sp, #88	@ 0x58
 80048f4:	a917      	add	r1, sp, #92	@ 0x5c
 80048f6:	4658      	mov	r0, fp
 80048f8:	f001 f980 	bl	8005bfc <__d2b>
 80048fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004900:	4681      	mov	r9, r0
 8004902:	2e00      	cmp	r6, #0
 8004904:	d077      	beq.n	80049f6 <_dtoa_r+0x1d6>
 8004906:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004908:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800490c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004910:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004914:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004918:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800491c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004920:	4619      	mov	r1, r3
 8004922:	2200      	movs	r2, #0
 8004924:	4b74      	ldr	r3, [pc, #464]	@ (8004af8 <_dtoa_r+0x2d8>)
 8004926:	f7fb fcaf 	bl	8000288 <__aeabi_dsub>
 800492a:	a369      	add	r3, pc, #420	@ (adr r3, 8004ad0 <_dtoa_r+0x2b0>)
 800492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004930:	f7fb fe62 	bl	80005f8 <__aeabi_dmul>
 8004934:	a368      	add	r3, pc, #416	@ (adr r3, 8004ad8 <_dtoa_r+0x2b8>)
 8004936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493a:	f7fb fca7 	bl	800028c <__adddf3>
 800493e:	4604      	mov	r4, r0
 8004940:	4630      	mov	r0, r6
 8004942:	460d      	mov	r5, r1
 8004944:	f7fb fdee 	bl	8000524 <__aeabi_i2d>
 8004948:	a365      	add	r3, pc, #404	@ (adr r3, 8004ae0 <_dtoa_r+0x2c0>)
 800494a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494e:	f7fb fe53 	bl	80005f8 <__aeabi_dmul>
 8004952:	4602      	mov	r2, r0
 8004954:	460b      	mov	r3, r1
 8004956:	4620      	mov	r0, r4
 8004958:	4629      	mov	r1, r5
 800495a:	f7fb fc97 	bl	800028c <__adddf3>
 800495e:	4604      	mov	r4, r0
 8004960:	460d      	mov	r5, r1
 8004962:	f7fc f8f9 	bl	8000b58 <__aeabi_d2iz>
 8004966:	2200      	movs	r2, #0
 8004968:	4607      	mov	r7, r0
 800496a:	2300      	movs	r3, #0
 800496c:	4620      	mov	r0, r4
 800496e:	4629      	mov	r1, r5
 8004970:	f7fc f8b4 	bl	8000adc <__aeabi_dcmplt>
 8004974:	b140      	cbz	r0, 8004988 <_dtoa_r+0x168>
 8004976:	4638      	mov	r0, r7
 8004978:	f7fb fdd4 	bl	8000524 <__aeabi_i2d>
 800497c:	4622      	mov	r2, r4
 800497e:	462b      	mov	r3, r5
 8004980:	f7fc f8a2 	bl	8000ac8 <__aeabi_dcmpeq>
 8004984:	b900      	cbnz	r0, 8004988 <_dtoa_r+0x168>
 8004986:	3f01      	subs	r7, #1
 8004988:	2f16      	cmp	r7, #22
 800498a:	d851      	bhi.n	8004a30 <_dtoa_r+0x210>
 800498c:	4b5b      	ldr	r3, [pc, #364]	@ (8004afc <_dtoa_r+0x2dc>)
 800498e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004996:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800499a:	f7fc f89f 	bl	8000adc <__aeabi_dcmplt>
 800499e:	2800      	cmp	r0, #0
 80049a0:	d048      	beq.n	8004a34 <_dtoa_r+0x214>
 80049a2:	3f01      	subs	r7, #1
 80049a4:	2300      	movs	r3, #0
 80049a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80049a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80049aa:	1b9b      	subs	r3, r3, r6
 80049ac:	1e5a      	subs	r2, r3, #1
 80049ae:	bf44      	itt	mi
 80049b0:	f1c3 0801 	rsbmi	r8, r3, #1
 80049b4:	2300      	movmi	r3, #0
 80049b6:	9208      	str	r2, [sp, #32]
 80049b8:	bf54      	ite	pl
 80049ba:	f04f 0800 	movpl.w	r8, #0
 80049be:	9308      	strmi	r3, [sp, #32]
 80049c0:	2f00      	cmp	r7, #0
 80049c2:	db39      	blt.n	8004a38 <_dtoa_r+0x218>
 80049c4:	9b08      	ldr	r3, [sp, #32]
 80049c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80049c8:	443b      	add	r3, r7
 80049ca:	9308      	str	r3, [sp, #32]
 80049cc:	2300      	movs	r3, #0
 80049ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80049d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049d2:	2b09      	cmp	r3, #9
 80049d4:	d864      	bhi.n	8004aa0 <_dtoa_r+0x280>
 80049d6:	2b05      	cmp	r3, #5
 80049d8:	bfc4      	itt	gt
 80049da:	3b04      	subgt	r3, #4
 80049dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80049de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049e0:	f1a3 0302 	sub.w	r3, r3, #2
 80049e4:	bfcc      	ite	gt
 80049e6:	2400      	movgt	r4, #0
 80049e8:	2401      	movle	r4, #1
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	d863      	bhi.n	8004ab6 <_dtoa_r+0x296>
 80049ee:	e8df f003 	tbb	[pc, r3]
 80049f2:	372a      	.short	0x372a
 80049f4:	5535      	.short	0x5535
 80049f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80049fa:	441e      	add	r6, r3
 80049fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004a00:	2b20      	cmp	r3, #32
 8004a02:	bfc1      	itttt	gt
 8004a04:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004a08:	409f      	lslgt	r7, r3
 8004a0a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004a0e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004a12:	bfd6      	itet	le
 8004a14:	f1c3 0320 	rsble	r3, r3, #32
 8004a18:	ea47 0003 	orrgt.w	r0, r7, r3
 8004a1c:	fa04 f003 	lslle.w	r0, r4, r3
 8004a20:	f7fb fd70 	bl	8000504 <__aeabi_ui2d>
 8004a24:	2201      	movs	r2, #1
 8004a26:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004a2a:	3e01      	subs	r6, #1
 8004a2c:	9214      	str	r2, [sp, #80]	@ 0x50
 8004a2e:	e777      	b.n	8004920 <_dtoa_r+0x100>
 8004a30:	2301      	movs	r3, #1
 8004a32:	e7b8      	b.n	80049a6 <_dtoa_r+0x186>
 8004a34:	9012      	str	r0, [sp, #72]	@ 0x48
 8004a36:	e7b7      	b.n	80049a8 <_dtoa_r+0x188>
 8004a38:	427b      	negs	r3, r7
 8004a3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	eba8 0807 	sub.w	r8, r8, r7
 8004a42:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004a44:	e7c4      	b.n	80049d0 <_dtoa_r+0x1b0>
 8004a46:	2300      	movs	r3, #0
 8004a48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	dc35      	bgt.n	8004abc <_dtoa_r+0x29c>
 8004a50:	2301      	movs	r3, #1
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	9307      	str	r3, [sp, #28]
 8004a56:	461a      	mov	r2, r3
 8004a58:	920e      	str	r2, [sp, #56]	@ 0x38
 8004a5a:	e00b      	b.n	8004a74 <_dtoa_r+0x254>
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e7f3      	b.n	8004a48 <_dtoa_r+0x228>
 8004a60:	2300      	movs	r3, #0
 8004a62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a66:	18fb      	adds	r3, r7, r3
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	9307      	str	r3, [sp, #28]
 8004a70:	bfb8      	it	lt
 8004a72:	2301      	movlt	r3, #1
 8004a74:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004a78:	2100      	movs	r1, #0
 8004a7a:	2204      	movs	r2, #4
 8004a7c:	f102 0514 	add.w	r5, r2, #20
 8004a80:	429d      	cmp	r5, r3
 8004a82:	d91f      	bls.n	8004ac4 <_dtoa_r+0x2a4>
 8004a84:	6041      	str	r1, [r0, #4]
 8004a86:	4658      	mov	r0, fp
 8004a88:	f000 fd8e 	bl	80055a8 <_Balloc>
 8004a8c:	4682      	mov	sl, r0
 8004a8e:	2800      	cmp	r0, #0
 8004a90:	d13c      	bne.n	8004b0c <_dtoa_r+0x2ec>
 8004a92:	4b1b      	ldr	r3, [pc, #108]	@ (8004b00 <_dtoa_r+0x2e0>)
 8004a94:	4602      	mov	r2, r0
 8004a96:	f240 11af 	movw	r1, #431	@ 0x1af
 8004a9a:	e6d8      	b.n	800484e <_dtoa_r+0x2e>
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e7e0      	b.n	8004a62 <_dtoa_r+0x242>
 8004aa0:	2401      	movs	r4, #1
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004aa6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	9307      	str	r3, [sp, #28]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	2312      	movs	r3, #18
 8004ab4:	e7d0      	b.n	8004a58 <_dtoa_r+0x238>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004aba:	e7f5      	b.n	8004aa8 <_dtoa_r+0x288>
 8004abc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	9307      	str	r3, [sp, #28]
 8004ac2:	e7d7      	b.n	8004a74 <_dtoa_r+0x254>
 8004ac4:	3101      	adds	r1, #1
 8004ac6:	0052      	lsls	r2, r2, #1
 8004ac8:	e7d8      	b.n	8004a7c <_dtoa_r+0x25c>
 8004aca:	bf00      	nop
 8004acc:	f3af 8000 	nop.w
 8004ad0:	636f4361 	.word	0x636f4361
 8004ad4:	3fd287a7 	.word	0x3fd287a7
 8004ad8:	8b60c8b3 	.word	0x8b60c8b3
 8004adc:	3fc68a28 	.word	0x3fc68a28
 8004ae0:	509f79fb 	.word	0x509f79fb
 8004ae4:	3fd34413 	.word	0x3fd34413
 8004ae8:	080064e1 	.word	0x080064e1
 8004aec:	080064f8 	.word	0x080064f8
 8004af0:	7ff00000 	.word	0x7ff00000
 8004af4:	080064b1 	.word	0x080064b1
 8004af8:	3ff80000 	.word	0x3ff80000
 8004afc:	080065f0 	.word	0x080065f0
 8004b00:	08006550 	.word	0x08006550
 8004b04:	080064dd 	.word	0x080064dd
 8004b08:	080064b0 	.word	0x080064b0
 8004b0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004b10:	6018      	str	r0, [r3, #0]
 8004b12:	9b07      	ldr	r3, [sp, #28]
 8004b14:	2b0e      	cmp	r3, #14
 8004b16:	f200 80a4 	bhi.w	8004c62 <_dtoa_r+0x442>
 8004b1a:	2c00      	cmp	r4, #0
 8004b1c:	f000 80a1 	beq.w	8004c62 <_dtoa_r+0x442>
 8004b20:	2f00      	cmp	r7, #0
 8004b22:	dd33      	ble.n	8004b8c <_dtoa_r+0x36c>
 8004b24:	4bad      	ldr	r3, [pc, #692]	@ (8004ddc <_dtoa_r+0x5bc>)
 8004b26:	f007 020f 	and.w	r2, r7, #15
 8004b2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b2e:	ed93 7b00 	vldr	d7, [r3]
 8004b32:	05f8      	lsls	r0, r7, #23
 8004b34:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004b38:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004b3c:	d516      	bpl.n	8004b6c <_dtoa_r+0x34c>
 8004b3e:	4ba8      	ldr	r3, [pc, #672]	@ (8004de0 <_dtoa_r+0x5c0>)
 8004b40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b48:	f7fb fe80 	bl	800084c <__aeabi_ddiv>
 8004b4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b50:	f004 040f 	and.w	r4, r4, #15
 8004b54:	2603      	movs	r6, #3
 8004b56:	4da2      	ldr	r5, [pc, #648]	@ (8004de0 <_dtoa_r+0x5c0>)
 8004b58:	b954      	cbnz	r4, 8004b70 <_dtoa_r+0x350>
 8004b5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b62:	f7fb fe73 	bl	800084c <__aeabi_ddiv>
 8004b66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b6a:	e028      	b.n	8004bbe <_dtoa_r+0x39e>
 8004b6c:	2602      	movs	r6, #2
 8004b6e:	e7f2      	b.n	8004b56 <_dtoa_r+0x336>
 8004b70:	07e1      	lsls	r1, r4, #31
 8004b72:	d508      	bpl.n	8004b86 <_dtoa_r+0x366>
 8004b74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004b7c:	f7fb fd3c 	bl	80005f8 <__aeabi_dmul>
 8004b80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b84:	3601      	adds	r6, #1
 8004b86:	1064      	asrs	r4, r4, #1
 8004b88:	3508      	adds	r5, #8
 8004b8a:	e7e5      	b.n	8004b58 <_dtoa_r+0x338>
 8004b8c:	f000 80d2 	beq.w	8004d34 <_dtoa_r+0x514>
 8004b90:	427c      	negs	r4, r7
 8004b92:	4b92      	ldr	r3, [pc, #584]	@ (8004ddc <_dtoa_r+0x5bc>)
 8004b94:	4d92      	ldr	r5, [pc, #584]	@ (8004de0 <_dtoa_r+0x5c0>)
 8004b96:	f004 020f 	and.w	r2, r4, #15
 8004b9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004ba6:	f7fb fd27 	bl	80005f8 <__aeabi_dmul>
 8004baa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bae:	1124      	asrs	r4, r4, #4
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	2602      	movs	r6, #2
 8004bb4:	2c00      	cmp	r4, #0
 8004bb6:	f040 80b2 	bne.w	8004d1e <_dtoa_r+0x4fe>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1d3      	bne.n	8004b66 <_dtoa_r+0x346>
 8004bbe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004bc0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 80b7 	beq.w	8004d38 <_dtoa_r+0x518>
 8004bca:	4b86      	ldr	r3, [pc, #536]	@ (8004de4 <_dtoa_r+0x5c4>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	4620      	mov	r0, r4
 8004bd0:	4629      	mov	r1, r5
 8004bd2:	f7fb ff83 	bl	8000adc <__aeabi_dcmplt>
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	f000 80ae 	beq.w	8004d38 <_dtoa_r+0x518>
 8004bdc:	9b07      	ldr	r3, [sp, #28]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 80aa 	beq.w	8004d38 <_dtoa_r+0x518>
 8004be4:	9b00      	ldr	r3, [sp, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	dd37      	ble.n	8004c5a <_dtoa_r+0x43a>
 8004bea:	1e7b      	subs	r3, r7, #1
 8004bec:	9304      	str	r3, [sp, #16]
 8004bee:	4620      	mov	r0, r4
 8004bf0:	4b7d      	ldr	r3, [pc, #500]	@ (8004de8 <_dtoa_r+0x5c8>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	4629      	mov	r1, r5
 8004bf6:	f7fb fcff 	bl	80005f8 <__aeabi_dmul>
 8004bfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bfe:	9c00      	ldr	r4, [sp, #0]
 8004c00:	3601      	adds	r6, #1
 8004c02:	4630      	mov	r0, r6
 8004c04:	f7fb fc8e 	bl	8000524 <__aeabi_i2d>
 8004c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c0c:	f7fb fcf4 	bl	80005f8 <__aeabi_dmul>
 8004c10:	4b76      	ldr	r3, [pc, #472]	@ (8004dec <_dtoa_r+0x5cc>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	f7fb fb3a 	bl	800028c <__adddf3>
 8004c18:	4605      	mov	r5, r0
 8004c1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004c1e:	2c00      	cmp	r4, #0
 8004c20:	f040 808d 	bne.w	8004d3e <_dtoa_r+0x51e>
 8004c24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c28:	4b71      	ldr	r3, [pc, #452]	@ (8004df0 <_dtoa_r+0x5d0>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f7fb fb2c 	bl	8000288 <__aeabi_dsub>
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c38:	462a      	mov	r2, r5
 8004c3a:	4633      	mov	r3, r6
 8004c3c:	f7fb ff6c 	bl	8000b18 <__aeabi_dcmpgt>
 8004c40:	2800      	cmp	r0, #0
 8004c42:	f040 828b 	bne.w	800515c <_dtoa_r+0x93c>
 8004c46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c4a:	462a      	mov	r2, r5
 8004c4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004c50:	f7fb ff44 	bl	8000adc <__aeabi_dcmplt>
 8004c54:	2800      	cmp	r0, #0
 8004c56:	f040 8128 	bne.w	8004eaa <_dtoa_r+0x68a>
 8004c5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004c5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004c62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f2c0 815a 	blt.w	8004f1e <_dtoa_r+0x6fe>
 8004c6a:	2f0e      	cmp	r7, #14
 8004c6c:	f300 8157 	bgt.w	8004f1e <_dtoa_r+0x6fe>
 8004c70:	4b5a      	ldr	r3, [pc, #360]	@ (8004ddc <_dtoa_r+0x5bc>)
 8004c72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004c76:	ed93 7b00 	vldr	d7, [r3]
 8004c7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	ed8d 7b00 	vstr	d7, [sp]
 8004c82:	da03      	bge.n	8004c8c <_dtoa_r+0x46c>
 8004c84:	9b07      	ldr	r3, [sp, #28]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f340 8101 	ble.w	8004e8e <_dtoa_r+0x66e>
 8004c8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004c90:	4656      	mov	r6, sl
 8004c92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c96:	4620      	mov	r0, r4
 8004c98:	4629      	mov	r1, r5
 8004c9a:	f7fb fdd7 	bl	800084c <__aeabi_ddiv>
 8004c9e:	f7fb ff5b 	bl	8000b58 <__aeabi_d2iz>
 8004ca2:	4680      	mov	r8, r0
 8004ca4:	f7fb fc3e 	bl	8000524 <__aeabi_i2d>
 8004ca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004cac:	f7fb fca4 	bl	80005f8 <__aeabi_dmul>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	4629      	mov	r1, r5
 8004cb8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004cbc:	f7fb fae4 	bl	8000288 <__aeabi_dsub>
 8004cc0:	f806 4b01 	strb.w	r4, [r6], #1
 8004cc4:	9d07      	ldr	r5, [sp, #28]
 8004cc6:	eba6 040a 	sub.w	r4, r6, sl
 8004cca:	42a5      	cmp	r5, r4
 8004ccc:	4602      	mov	r2, r0
 8004cce:	460b      	mov	r3, r1
 8004cd0:	f040 8117 	bne.w	8004f02 <_dtoa_r+0x6e2>
 8004cd4:	f7fb fada 	bl	800028c <__adddf3>
 8004cd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004cdc:	4604      	mov	r4, r0
 8004cde:	460d      	mov	r5, r1
 8004ce0:	f7fb ff1a 	bl	8000b18 <__aeabi_dcmpgt>
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	f040 80f9 	bne.w	8004edc <_dtoa_r+0x6bc>
 8004cea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004cee:	4620      	mov	r0, r4
 8004cf0:	4629      	mov	r1, r5
 8004cf2:	f7fb fee9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cf6:	b118      	cbz	r0, 8004d00 <_dtoa_r+0x4e0>
 8004cf8:	f018 0f01 	tst.w	r8, #1
 8004cfc:	f040 80ee 	bne.w	8004edc <_dtoa_r+0x6bc>
 8004d00:	4649      	mov	r1, r9
 8004d02:	4658      	mov	r0, fp
 8004d04:	f000 fc90 	bl	8005628 <_Bfree>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	7033      	strb	r3, [r6, #0]
 8004d0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004d0e:	3701      	adds	r7, #1
 8004d10:	601f      	str	r7, [r3, #0]
 8004d12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 831d 	beq.w	8005354 <_dtoa_r+0xb34>
 8004d1a:	601e      	str	r6, [r3, #0]
 8004d1c:	e31a      	b.n	8005354 <_dtoa_r+0xb34>
 8004d1e:	07e2      	lsls	r2, r4, #31
 8004d20:	d505      	bpl.n	8004d2e <_dtoa_r+0x50e>
 8004d22:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004d26:	f7fb fc67 	bl	80005f8 <__aeabi_dmul>
 8004d2a:	3601      	adds	r6, #1
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	1064      	asrs	r4, r4, #1
 8004d30:	3508      	adds	r5, #8
 8004d32:	e73f      	b.n	8004bb4 <_dtoa_r+0x394>
 8004d34:	2602      	movs	r6, #2
 8004d36:	e742      	b.n	8004bbe <_dtoa_r+0x39e>
 8004d38:	9c07      	ldr	r4, [sp, #28]
 8004d3a:	9704      	str	r7, [sp, #16]
 8004d3c:	e761      	b.n	8004c02 <_dtoa_r+0x3e2>
 8004d3e:	4b27      	ldr	r3, [pc, #156]	@ (8004ddc <_dtoa_r+0x5bc>)
 8004d40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004d42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004d46:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d4a:	4454      	add	r4, sl
 8004d4c:	2900      	cmp	r1, #0
 8004d4e:	d053      	beq.n	8004df8 <_dtoa_r+0x5d8>
 8004d50:	4928      	ldr	r1, [pc, #160]	@ (8004df4 <_dtoa_r+0x5d4>)
 8004d52:	2000      	movs	r0, #0
 8004d54:	f7fb fd7a 	bl	800084c <__aeabi_ddiv>
 8004d58:	4633      	mov	r3, r6
 8004d5a:	462a      	mov	r2, r5
 8004d5c:	f7fb fa94 	bl	8000288 <__aeabi_dsub>
 8004d60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004d64:	4656      	mov	r6, sl
 8004d66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d6a:	f7fb fef5 	bl	8000b58 <__aeabi_d2iz>
 8004d6e:	4605      	mov	r5, r0
 8004d70:	f7fb fbd8 	bl	8000524 <__aeabi_i2d>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d7c:	f7fb fa84 	bl	8000288 <__aeabi_dsub>
 8004d80:	3530      	adds	r5, #48	@ 0x30
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d8a:	f806 5b01 	strb.w	r5, [r6], #1
 8004d8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004d92:	f7fb fea3 	bl	8000adc <__aeabi_dcmplt>
 8004d96:	2800      	cmp	r0, #0
 8004d98:	d171      	bne.n	8004e7e <_dtoa_r+0x65e>
 8004d9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d9e:	4911      	ldr	r1, [pc, #68]	@ (8004de4 <_dtoa_r+0x5c4>)
 8004da0:	2000      	movs	r0, #0
 8004da2:	f7fb fa71 	bl	8000288 <__aeabi_dsub>
 8004da6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004daa:	f7fb fe97 	bl	8000adc <__aeabi_dcmplt>
 8004dae:	2800      	cmp	r0, #0
 8004db0:	f040 8095 	bne.w	8004ede <_dtoa_r+0x6be>
 8004db4:	42a6      	cmp	r6, r4
 8004db6:	f43f af50 	beq.w	8004c5a <_dtoa_r+0x43a>
 8004dba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8004de8 <_dtoa_r+0x5c8>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f7fb fc19 	bl	80005f8 <__aeabi_dmul>
 8004dc6:	4b08      	ldr	r3, [pc, #32]	@ (8004de8 <_dtoa_r+0x5c8>)
 8004dc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004dcc:	2200      	movs	r2, #0
 8004dce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004dd2:	f7fb fc11 	bl	80005f8 <__aeabi_dmul>
 8004dd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004dda:	e7c4      	b.n	8004d66 <_dtoa_r+0x546>
 8004ddc:	080065f0 	.word	0x080065f0
 8004de0:	080065c8 	.word	0x080065c8
 8004de4:	3ff00000 	.word	0x3ff00000
 8004de8:	40240000 	.word	0x40240000
 8004dec:	401c0000 	.word	0x401c0000
 8004df0:	40140000 	.word	0x40140000
 8004df4:	3fe00000 	.word	0x3fe00000
 8004df8:	4631      	mov	r1, r6
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	f7fb fbfc 	bl	80005f8 <__aeabi_dmul>
 8004e00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004e04:	9415      	str	r4, [sp, #84]	@ 0x54
 8004e06:	4656      	mov	r6, sl
 8004e08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e0c:	f7fb fea4 	bl	8000b58 <__aeabi_d2iz>
 8004e10:	4605      	mov	r5, r0
 8004e12:	f7fb fb87 	bl	8000524 <__aeabi_i2d>
 8004e16:	4602      	mov	r2, r0
 8004e18:	460b      	mov	r3, r1
 8004e1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e1e:	f7fb fa33 	bl	8000288 <__aeabi_dsub>
 8004e22:	3530      	adds	r5, #48	@ 0x30
 8004e24:	f806 5b01 	strb.w	r5, [r6], #1
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	42a6      	cmp	r6, r4
 8004e2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e32:	f04f 0200 	mov.w	r2, #0
 8004e36:	d124      	bne.n	8004e82 <_dtoa_r+0x662>
 8004e38:	4bac      	ldr	r3, [pc, #688]	@ (80050ec <_dtoa_r+0x8cc>)
 8004e3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004e3e:	f7fb fa25 	bl	800028c <__adddf3>
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e4a:	f7fb fe65 	bl	8000b18 <__aeabi_dcmpgt>
 8004e4e:	2800      	cmp	r0, #0
 8004e50:	d145      	bne.n	8004ede <_dtoa_r+0x6be>
 8004e52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004e56:	49a5      	ldr	r1, [pc, #660]	@ (80050ec <_dtoa_r+0x8cc>)
 8004e58:	2000      	movs	r0, #0
 8004e5a:	f7fb fa15 	bl	8000288 <__aeabi_dsub>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e66:	f7fb fe39 	bl	8000adc <__aeabi_dcmplt>
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	f43f aef5 	beq.w	8004c5a <_dtoa_r+0x43a>
 8004e70:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004e72:	1e73      	subs	r3, r6, #1
 8004e74:	9315      	str	r3, [sp, #84]	@ 0x54
 8004e76:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004e7a:	2b30      	cmp	r3, #48	@ 0x30
 8004e7c:	d0f8      	beq.n	8004e70 <_dtoa_r+0x650>
 8004e7e:	9f04      	ldr	r7, [sp, #16]
 8004e80:	e73e      	b.n	8004d00 <_dtoa_r+0x4e0>
 8004e82:	4b9b      	ldr	r3, [pc, #620]	@ (80050f0 <_dtoa_r+0x8d0>)
 8004e84:	f7fb fbb8 	bl	80005f8 <__aeabi_dmul>
 8004e88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e8c:	e7bc      	b.n	8004e08 <_dtoa_r+0x5e8>
 8004e8e:	d10c      	bne.n	8004eaa <_dtoa_r+0x68a>
 8004e90:	4b98      	ldr	r3, [pc, #608]	@ (80050f4 <_dtoa_r+0x8d4>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e98:	f7fb fbae 	bl	80005f8 <__aeabi_dmul>
 8004e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ea0:	f7fb fe30 	bl	8000b04 <__aeabi_dcmpge>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	f000 8157 	beq.w	8005158 <_dtoa_r+0x938>
 8004eaa:	2400      	movs	r4, #0
 8004eac:	4625      	mov	r5, r4
 8004eae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004eb0:	43db      	mvns	r3, r3
 8004eb2:	9304      	str	r3, [sp, #16]
 8004eb4:	4656      	mov	r6, sl
 8004eb6:	2700      	movs	r7, #0
 8004eb8:	4621      	mov	r1, r4
 8004eba:	4658      	mov	r0, fp
 8004ebc:	f000 fbb4 	bl	8005628 <_Bfree>
 8004ec0:	2d00      	cmp	r5, #0
 8004ec2:	d0dc      	beq.n	8004e7e <_dtoa_r+0x65e>
 8004ec4:	b12f      	cbz	r7, 8004ed2 <_dtoa_r+0x6b2>
 8004ec6:	42af      	cmp	r7, r5
 8004ec8:	d003      	beq.n	8004ed2 <_dtoa_r+0x6b2>
 8004eca:	4639      	mov	r1, r7
 8004ecc:	4658      	mov	r0, fp
 8004ece:	f000 fbab 	bl	8005628 <_Bfree>
 8004ed2:	4629      	mov	r1, r5
 8004ed4:	4658      	mov	r0, fp
 8004ed6:	f000 fba7 	bl	8005628 <_Bfree>
 8004eda:	e7d0      	b.n	8004e7e <_dtoa_r+0x65e>
 8004edc:	9704      	str	r7, [sp, #16]
 8004ede:	4633      	mov	r3, r6
 8004ee0:	461e      	mov	r6, r3
 8004ee2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004ee6:	2a39      	cmp	r2, #57	@ 0x39
 8004ee8:	d107      	bne.n	8004efa <_dtoa_r+0x6da>
 8004eea:	459a      	cmp	sl, r3
 8004eec:	d1f8      	bne.n	8004ee0 <_dtoa_r+0x6c0>
 8004eee:	9a04      	ldr	r2, [sp, #16]
 8004ef0:	3201      	adds	r2, #1
 8004ef2:	9204      	str	r2, [sp, #16]
 8004ef4:	2230      	movs	r2, #48	@ 0x30
 8004ef6:	f88a 2000 	strb.w	r2, [sl]
 8004efa:	781a      	ldrb	r2, [r3, #0]
 8004efc:	3201      	adds	r2, #1
 8004efe:	701a      	strb	r2, [r3, #0]
 8004f00:	e7bd      	b.n	8004e7e <_dtoa_r+0x65e>
 8004f02:	4b7b      	ldr	r3, [pc, #492]	@ (80050f0 <_dtoa_r+0x8d0>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	f7fb fb77 	bl	80005f8 <__aeabi_dmul>
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	4604      	mov	r4, r0
 8004f10:	460d      	mov	r5, r1
 8004f12:	f7fb fdd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f16:	2800      	cmp	r0, #0
 8004f18:	f43f aebb 	beq.w	8004c92 <_dtoa_r+0x472>
 8004f1c:	e6f0      	b.n	8004d00 <_dtoa_r+0x4e0>
 8004f1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004f20:	2a00      	cmp	r2, #0
 8004f22:	f000 80db 	beq.w	80050dc <_dtoa_r+0x8bc>
 8004f26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f28:	2a01      	cmp	r2, #1
 8004f2a:	f300 80bf 	bgt.w	80050ac <_dtoa_r+0x88c>
 8004f2e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004f30:	2a00      	cmp	r2, #0
 8004f32:	f000 80b7 	beq.w	80050a4 <_dtoa_r+0x884>
 8004f36:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004f3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004f3c:	4646      	mov	r6, r8
 8004f3e:	9a08      	ldr	r2, [sp, #32]
 8004f40:	2101      	movs	r1, #1
 8004f42:	441a      	add	r2, r3
 8004f44:	4658      	mov	r0, fp
 8004f46:	4498      	add	r8, r3
 8004f48:	9208      	str	r2, [sp, #32]
 8004f4a:	f000 fc21 	bl	8005790 <__i2b>
 8004f4e:	4605      	mov	r5, r0
 8004f50:	b15e      	cbz	r6, 8004f6a <_dtoa_r+0x74a>
 8004f52:	9b08      	ldr	r3, [sp, #32]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	dd08      	ble.n	8004f6a <_dtoa_r+0x74a>
 8004f58:	42b3      	cmp	r3, r6
 8004f5a:	9a08      	ldr	r2, [sp, #32]
 8004f5c:	bfa8      	it	ge
 8004f5e:	4633      	movge	r3, r6
 8004f60:	eba8 0803 	sub.w	r8, r8, r3
 8004f64:	1af6      	subs	r6, r6, r3
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	9308      	str	r3, [sp, #32]
 8004f6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f6c:	b1f3      	cbz	r3, 8004fac <_dtoa_r+0x78c>
 8004f6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 80b7 	beq.w	80050e4 <_dtoa_r+0x8c4>
 8004f76:	b18c      	cbz	r4, 8004f9c <_dtoa_r+0x77c>
 8004f78:	4629      	mov	r1, r5
 8004f7a:	4622      	mov	r2, r4
 8004f7c:	4658      	mov	r0, fp
 8004f7e:	f000 fcc7 	bl	8005910 <__pow5mult>
 8004f82:	464a      	mov	r2, r9
 8004f84:	4601      	mov	r1, r0
 8004f86:	4605      	mov	r5, r0
 8004f88:	4658      	mov	r0, fp
 8004f8a:	f000 fc17 	bl	80057bc <__multiply>
 8004f8e:	4649      	mov	r1, r9
 8004f90:	9004      	str	r0, [sp, #16]
 8004f92:	4658      	mov	r0, fp
 8004f94:	f000 fb48 	bl	8005628 <_Bfree>
 8004f98:	9b04      	ldr	r3, [sp, #16]
 8004f9a:	4699      	mov	r9, r3
 8004f9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f9e:	1b1a      	subs	r2, r3, r4
 8004fa0:	d004      	beq.n	8004fac <_dtoa_r+0x78c>
 8004fa2:	4649      	mov	r1, r9
 8004fa4:	4658      	mov	r0, fp
 8004fa6:	f000 fcb3 	bl	8005910 <__pow5mult>
 8004faa:	4681      	mov	r9, r0
 8004fac:	2101      	movs	r1, #1
 8004fae:	4658      	mov	r0, fp
 8004fb0:	f000 fbee 	bl	8005790 <__i2b>
 8004fb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 81cf 	beq.w	800535c <_dtoa_r+0xb3c>
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	4601      	mov	r1, r0
 8004fc2:	4658      	mov	r0, fp
 8004fc4:	f000 fca4 	bl	8005910 <__pow5mult>
 8004fc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	4604      	mov	r4, r0
 8004fce:	f300 8095 	bgt.w	80050fc <_dtoa_r+0x8dc>
 8004fd2:	9b02      	ldr	r3, [sp, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f040 8087 	bne.w	80050e8 <_dtoa_r+0x8c8>
 8004fda:	9b03      	ldr	r3, [sp, #12]
 8004fdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f040 8089 	bne.w	80050f8 <_dtoa_r+0x8d8>
 8004fe6:	9b03      	ldr	r3, [sp, #12]
 8004fe8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004fec:	0d1b      	lsrs	r3, r3, #20
 8004fee:	051b      	lsls	r3, r3, #20
 8004ff0:	b12b      	cbz	r3, 8004ffe <_dtoa_r+0x7de>
 8004ff2:	9b08      	ldr	r3, [sp, #32]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	9308      	str	r3, [sp, #32]
 8004ff8:	f108 0801 	add.w	r8, r8, #1
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	930a      	str	r3, [sp, #40]	@ 0x28
 8005000:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 81b0 	beq.w	8005368 <_dtoa_r+0xb48>
 8005008:	6923      	ldr	r3, [r4, #16]
 800500a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800500e:	6918      	ldr	r0, [r3, #16]
 8005010:	f000 fb72 	bl	80056f8 <__hi0bits>
 8005014:	f1c0 0020 	rsb	r0, r0, #32
 8005018:	9b08      	ldr	r3, [sp, #32]
 800501a:	4418      	add	r0, r3
 800501c:	f010 001f 	ands.w	r0, r0, #31
 8005020:	d077      	beq.n	8005112 <_dtoa_r+0x8f2>
 8005022:	f1c0 0320 	rsb	r3, r0, #32
 8005026:	2b04      	cmp	r3, #4
 8005028:	dd6b      	ble.n	8005102 <_dtoa_r+0x8e2>
 800502a:	9b08      	ldr	r3, [sp, #32]
 800502c:	f1c0 001c 	rsb	r0, r0, #28
 8005030:	4403      	add	r3, r0
 8005032:	4480      	add	r8, r0
 8005034:	4406      	add	r6, r0
 8005036:	9308      	str	r3, [sp, #32]
 8005038:	f1b8 0f00 	cmp.w	r8, #0
 800503c:	dd05      	ble.n	800504a <_dtoa_r+0x82a>
 800503e:	4649      	mov	r1, r9
 8005040:	4642      	mov	r2, r8
 8005042:	4658      	mov	r0, fp
 8005044:	f000 fcbe 	bl	80059c4 <__lshift>
 8005048:	4681      	mov	r9, r0
 800504a:	9b08      	ldr	r3, [sp, #32]
 800504c:	2b00      	cmp	r3, #0
 800504e:	dd05      	ble.n	800505c <_dtoa_r+0x83c>
 8005050:	4621      	mov	r1, r4
 8005052:	461a      	mov	r2, r3
 8005054:	4658      	mov	r0, fp
 8005056:	f000 fcb5 	bl	80059c4 <__lshift>
 800505a:	4604      	mov	r4, r0
 800505c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800505e:	2b00      	cmp	r3, #0
 8005060:	d059      	beq.n	8005116 <_dtoa_r+0x8f6>
 8005062:	4621      	mov	r1, r4
 8005064:	4648      	mov	r0, r9
 8005066:	f000 fd19 	bl	8005a9c <__mcmp>
 800506a:	2800      	cmp	r0, #0
 800506c:	da53      	bge.n	8005116 <_dtoa_r+0x8f6>
 800506e:	1e7b      	subs	r3, r7, #1
 8005070:	9304      	str	r3, [sp, #16]
 8005072:	4649      	mov	r1, r9
 8005074:	2300      	movs	r3, #0
 8005076:	220a      	movs	r2, #10
 8005078:	4658      	mov	r0, fp
 800507a:	f000 faf7 	bl	800566c <__multadd>
 800507e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005080:	4681      	mov	r9, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 8172 	beq.w	800536c <_dtoa_r+0xb4c>
 8005088:	2300      	movs	r3, #0
 800508a:	4629      	mov	r1, r5
 800508c:	220a      	movs	r2, #10
 800508e:	4658      	mov	r0, fp
 8005090:	f000 faec 	bl	800566c <__multadd>
 8005094:	9b00      	ldr	r3, [sp, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	4605      	mov	r5, r0
 800509a:	dc67      	bgt.n	800516c <_dtoa_r+0x94c>
 800509c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800509e:	2b02      	cmp	r3, #2
 80050a0:	dc41      	bgt.n	8005126 <_dtoa_r+0x906>
 80050a2:	e063      	b.n	800516c <_dtoa_r+0x94c>
 80050a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80050a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80050aa:	e746      	b.n	8004f3a <_dtoa_r+0x71a>
 80050ac:	9b07      	ldr	r3, [sp, #28]
 80050ae:	1e5c      	subs	r4, r3, #1
 80050b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80050b2:	42a3      	cmp	r3, r4
 80050b4:	bfbf      	itttt	lt
 80050b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80050b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80050ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80050bc:	1ae3      	sublt	r3, r4, r3
 80050be:	bfb4      	ite	lt
 80050c0:	18d2      	addlt	r2, r2, r3
 80050c2:	1b1c      	subge	r4, r3, r4
 80050c4:	9b07      	ldr	r3, [sp, #28]
 80050c6:	bfbc      	itt	lt
 80050c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80050ca:	2400      	movlt	r4, #0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	bfb5      	itete	lt
 80050d0:	eba8 0603 	sublt.w	r6, r8, r3
 80050d4:	9b07      	ldrge	r3, [sp, #28]
 80050d6:	2300      	movlt	r3, #0
 80050d8:	4646      	movge	r6, r8
 80050da:	e730      	b.n	8004f3e <_dtoa_r+0x71e>
 80050dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80050de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80050e0:	4646      	mov	r6, r8
 80050e2:	e735      	b.n	8004f50 <_dtoa_r+0x730>
 80050e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80050e6:	e75c      	b.n	8004fa2 <_dtoa_r+0x782>
 80050e8:	2300      	movs	r3, #0
 80050ea:	e788      	b.n	8004ffe <_dtoa_r+0x7de>
 80050ec:	3fe00000 	.word	0x3fe00000
 80050f0:	40240000 	.word	0x40240000
 80050f4:	40140000 	.word	0x40140000
 80050f8:	9b02      	ldr	r3, [sp, #8]
 80050fa:	e780      	b.n	8004ffe <_dtoa_r+0x7de>
 80050fc:	2300      	movs	r3, #0
 80050fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8005100:	e782      	b.n	8005008 <_dtoa_r+0x7e8>
 8005102:	d099      	beq.n	8005038 <_dtoa_r+0x818>
 8005104:	9a08      	ldr	r2, [sp, #32]
 8005106:	331c      	adds	r3, #28
 8005108:	441a      	add	r2, r3
 800510a:	4498      	add	r8, r3
 800510c:	441e      	add	r6, r3
 800510e:	9208      	str	r2, [sp, #32]
 8005110:	e792      	b.n	8005038 <_dtoa_r+0x818>
 8005112:	4603      	mov	r3, r0
 8005114:	e7f6      	b.n	8005104 <_dtoa_r+0x8e4>
 8005116:	9b07      	ldr	r3, [sp, #28]
 8005118:	9704      	str	r7, [sp, #16]
 800511a:	2b00      	cmp	r3, #0
 800511c:	dc20      	bgt.n	8005160 <_dtoa_r+0x940>
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005122:	2b02      	cmp	r3, #2
 8005124:	dd1e      	ble.n	8005164 <_dtoa_r+0x944>
 8005126:	9b00      	ldr	r3, [sp, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	f47f aec0 	bne.w	8004eae <_dtoa_r+0x68e>
 800512e:	4621      	mov	r1, r4
 8005130:	2205      	movs	r2, #5
 8005132:	4658      	mov	r0, fp
 8005134:	f000 fa9a 	bl	800566c <__multadd>
 8005138:	4601      	mov	r1, r0
 800513a:	4604      	mov	r4, r0
 800513c:	4648      	mov	r0, r9
 800513e:	f000 fcad 	bl	8005a9c <__mcmp>
 8005142:	2800      	cmp	r0, #0
 8005144:	f77f aeb3 	ble.w	8004eae <_dtoa_r+0x68e>
 8005148:	4656      	mov	r6, sl
 800514a:	2331      	movs	r3, #49	@ 0x31
 800514c:	f806 3b01 	strb.w	r3, [r6], #1
 8005150:	9b04      	ldr	r3, [sp, #16]
 8005152:	3301      	adds	r3, #1
 8005154:	9304      	str	r3, [sp, #16]
 8005156:	e6ae      	b.n	8004eb6 <_dtoa_r+0x696>
 8005158:	9c07      	ldr	r4, [sp, #28]
 800515a:	9704      	str	r7, [sp, #16]
 800515c:	4625      	mov	r5, r4
 800515e:	e7f3      	b.n	8005148 <_dtoa_r+0x928>
 8005160:	9b07      	ldr	r3, [sp, #28]
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 8104 	beq.w	8005374 <_dtoa_r+0xb54>
 800516c:	2e00      	cmp	r6, #0
 800516e:	dd05      	ble.n	800517c <_dtoa_r+0x95c>
 8005170:	4629      	mov	r1, r5
 8005172:	4632      	mov	r2, r6
 8005174:	4658      	mov	r0, fp
 8005176:	f000 fc25 	bl	80059c4 <__lshift>
 800517a:	4605      	mov	r5, r0
 800517c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800517e:	2b00      	cmp	r3, #0
 8005180:	d05a      	beq.n	8005238 <_dtoa_r+0xa18>
 8005182:	6869      	ldr	r1, [r5, #4]
 8005184:	4658      	mov	r0, fp
 8005186:	f000 fa0f 	bl	80055a8 <_Balloc>
 800518a:	4606      	mov	r6, r0
 800518c:	b928      	cbnz	r0, 800519a <_dtoa_r+0x97a>
 800518e:	4b84      	ldr	r3, [pc, #528]	@ (80053a0 <_dtoa_r+0xb80>)
 8005190:	4602      	mov	r2, r0
 8005192:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005196:	f7ff bb5a 	b.w	800484e <_dtoa_r+0x2e>
 800519a:	692a      	ldr	r2, [r5, #16]
 800519c:	3202      	adds	r2, #2
 800519e:	0092      	lsls	r2, r2, #2
 80051a0:	f105 010c 	add.w	r1, r5, #12
 80051a4:	300c      	adds	r0, #12
 80051a6:	f000 fe3d 	bl	8005e24 <memcpy>
 80051aa:	2201      	movs	r2, #1
 80051ac:	4631      	mov	r1, r6
 80051ae:	4658      	mov	r0, fp
 80051b0:	f000 fc08 	bl	80059c4 <__lshift>
 80051b4:	f10a 0301 	add.w	r3, sl, #1
 80051b8:	9307      	str	r3, [sp, #28]
 80051ba:	9b00      	ldr	r3, [sp, #0]
 80051bc:	4453      	add	r3, sl
 80051be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051c0:	9b02      	ldr	r3, [sp, #8]
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	462f      	mov	r7, r5
 80051c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80051ca:	4605      	mov	r5, r0
 80051cc:	9b07      	ldr	r3, [sp, #28]
 80051ce:	4621      	mov	r1, r4
 80051d0:	3b01      	subs	r3, #1
 80051d2:	4648      	mov	r0, r9
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	f7ff fa98 	bl	800470a <quorem>
 80051da:	4639      	mov	r1, r7
 80051dc:	9002      	str	r0, [sp, #8]
 80051de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80051e2:	4648      	mov	r0, r9
 80051e4:	f000 fc5a 	bl	8005a9c <__mcmp>
 80051e8:	462a      	mov	r2, r5
 80051ea:	9008      	str	r0, [sp, #32]
 80051ec:	4621      	mov	r1, r4
 80051ee:	4658      	mov	r0, fp
 80051f0:	f000 fc70 	bl	8005ad4 <__mdiff>
 80051f4:	68c2      	ldr	r2, [r0, #12]
 80051f6:	4606      	mov	r6, r0
 80051f8:	bb02      	cbnz	r2, 800523c <_dtoa_r+0xa1c>
 80051fa:	4601      	mov	r1, r0
 80051fc:	4648      	mov	r0, r9
 80051fe:	f000 fc4d 	bl	8005a9c <__mcmp>
 8005202:	4602      	mov	r2, r0
 8005204:	4631      	mov	r1, r6
 8005206:	4658      	mov	r0, fp
 8005208:	920e      	str	r2, [sp, #56]	@ 0x38
 800520a:	f000 fa0d 	bl	8005628 <_Bfree>
 800520e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005210:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005212:	9e07      	ldr	r6, [sp, #28]
 8005214:	ea43 0102 	orr.w	r1, r3, r2
 8005218:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800521a:	4319      	orrs	r1, r3
 800521c:	d110      	bne.n	8005240 <_dtoa_r+0xa20>
 800521e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005222:	d029      	beq.n	8005278 <_dtoa_r+0xa58>
 8005224:	9b08      	ldr	r3, [sp, #32]
 8005226:	2b00      	cmp	r3, #0
 8005228:	dd02      	ble.n	8005230 <_dtoa_r+0xa10>
 800522a:	9b02      	ldr	r3, [sp, #8]
 800522c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005230:	9b00      	ldr	r3, [sp, #0]
 8005232:	f883 8000 	strb.w	r8, [r3]
 8005236:	e63f      	b.n	8004eb8 <_dtoa_r+0x698>
 8005238:	4628      	mov	r0, r5
 800523a:	e7bb      	b.n	80051b4 <_dtoa_r+0x994>
 800523c:	2201      	movs	r2, #1
 800523e:	e7e1      	b.n	8005204 <_dtoa_r+0x9e4>
 8005240:	9b08      	ldr	r3, [sp, #32]
 8005242:	2b00      	cmp	r3, #0
 8005244:	db04      	blt.n	8005250 <_dtoa_r+0xa30>
 8005246:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005248:	430b      	orrs	r3, r1
 800524a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800524c:	430b      	orrs	r3, r1
 800524e:	d120      	bne.n	8005292 <_dtoa_r+0xa72>
 8005250:	2a00      	cmp	r2, #0
 8005252:	dded      	ble.n	8005230 <_dtoa_r+0xa10>
 8005254:	4649      	mov	r1, r9
 8005256:	2201      	movs	r2, #1
 8005258:	4658      	mov	r0, fp
 800525a:	f000 fbb3 	bl	80059c4 <__lshift>
 800525e:	4621      	mov	r1, r4
 8005260:	4681      	mov	r9, r0
 8005262:	f000 fc1b 	bl	8005a9c <__mcmp>
 8005266:	2800      	cmp	r0, #0
 8005268:	dc03      	bgt.n	8005272 <_dtoa_r+0xa52>
 800526a:	d1e1      	bne.n	8005230 <_dtoa_r+0xa10>
 800526c:	f018 0f01 	tst.w	r8, #1
 8005270:	d0de      	beq.n	8005230 <_dtoa_r+0xa10>
 8005272:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005276:	d1d8      	bne.n	800522a <_dtoa_r+0xa0a>
 8005278:	9a00      	ldr	r2, [sp, #0]
 800527a:	2339      	movs	r3, #57	@ 0x39
 800527c:	7013      	strb	r3, [r2, #0]
 800527e:	4633      	mov	r3, r6
 8005280:	461e      	mov	r6, r3
 8005282:	3b01      	subs	r3, #1
 8005284:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005288:	2a39      	cmp	r2, #57	@ 0x39
 800528a:	d052      	beq.n	8005332 <_dtoa_r+0xb12>
 800528c:	3201      	adds	r2, #1
 800528e:	701a      	strb	r2, [r3, #0]
 8005290:	e612      	b.n	8004eb8 <_dtoa_r+0x698>
 8005292:	2a00      	cmp	r2, #0
 8005294:	dd07      	ble.n	80052a6 <_dtoa_r+0xa86>
 8005296:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800529a:	d0ed      	beq.n	8005278 <_dtoa_r+0xa58>
 800529c:	9a00      	ldr	r2, [sp, #0]
 800529e:	f108 0301 	add.w	r3, r8, #1
 80052a2:	7013      	strb	r3, [r2, #0]
 80052a4:	e608      	b.n	8004eb8 <_dtoa_r+0x698>
 80052a6:	9b07      	ldr	r3, [sp, #28]
 80052a8:	9a07      	ldr	r2, [sp, #28]
 80052aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80052ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d028      	beq.n	8005306 <_dtoa_r+0xae6>
 80052b4:	4649      	mov	r1, r9
 80052b6:	2300      	movs	r3, #0
 80052b8:	220a      	movs	r2, #10
 80052ba:	4658      	mov	r0, fp
 80052bc:	f000 f9d6 	bl	800566c <__multadd>
 80052c0:	42af      	cmp	r7, r5
 80052c2:	4681      	mov	r9, r0
 80052c4:	f04f 0300 	mov.w	r3, #0
 80052c8:	f04f 020a 	mov.w	r2, #10
 80052cc:	4639      	mov	r1, r7
 80052ce:	4658      	mov	r0, fp
 80052d0:	d107      	bne.n	80052e2 <_dtoa_r+0xac2>
 80052d2:	f000 f9cb 	bl	800566c <__multadd>
 80052d6:	4607      	mov	r7, r0
 80052d8:	4605      	mov	r5, r0
 80052da:	9b07      	ldr	r3, [sp, #28]
 80052dc:	3301      	adds	r3, #1
 80052de:	9307      	str	r3, [sp, #28]
 80052e0:	e774      	b.n	80051cc <_dtoa_r+0x9ac>
 80052e2:	f000 f9c3 	bl	800566c <__multadd>
 80052e6:	4629      	mov	r1, r5
 80052e8:	4607      	mov	r7, r0
 80052ea:	2300      	movs	r3, #0
 80052ec:	220a      	movs	r2, #10
 80052ee:	4658      	mov	r0, fp
 80052f0:	f000 f9bc 	bl	800566c <__multadd>
 80052f4:	4605      	mov	r5, r0
 80052f6:	e7f0      	b.n	80052da <_dtoa_r+0xaba>
 80052f8:	9b00      	ldr	r3, [sp, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	bfcc      	ite	gt
 80052fe:	461e      	movgt	r6, r3
 8005300:	2601      	movle	r6, #1
 8005302:	4456      	add	r6, sl
 8005304:	2700      	movs	r7, #0
 8005306:	4649      	mov	r1, r9
 8005308:	2201      	movs	r2, #1
 800530a:	4658      	mov	r0, fp
 800530c:	f000 fb5a 	bl	80059c4 <__lshift>
 8005310:	4621      	mov	r1, r4
 8005312:	4681      	mov	r9, r0
 8005314:	f000 fbc2 	bl	8005a9c <__mcmp>
 8005318:	2800      	cmp	r0, #0
 800531a:	dcb0      	bgt.n	800527e <_dtoa_r+0xa5e>
 800531c:	d102      	bne.n	8005324 <_dtoa_r+0xb04>
 800531e:	f018 0f01 	tst.w	r8, #1
 8005322:	d1ac      	bne.n	800527e <_dtoa_r+0xa5e>
 8005324:	4633      	mov	r3, r6
 8005326:	461e      	mov	r6, r3
 8005328:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800532c:	2a30      	cmp	r2, #48	@ 0x30
 800532e:	d0fa      	beq.n	8005326 <_dtoa_r+0xb06>
 8005330:	e5c2      	b.n	8004eb8 <_dtoa_r+0x698>
 8005332:	459a      	cmp	sl, r3
 8005334:	d1a4      	bne.n	8005280 <_dtoa_r+0xa60>
 8005336:	9b04      	ldr	r3, [sp, #16]
 8005338:	3301      	adds	r3, #1
 800533a:	9304      	str	r3, [sp, #16]
 800533c:	2331      	movs	r3, #49	@ 0x31
 800533e:	f88a 3000 	strb.w	r3, [sl]
 8005342:	e5b9      	b.n	8004eb8 <_dtoa_r+0x698>
 8005344:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005346:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80053a4 <_dtoa_r+0xb84>
 800534a:	b11b      	cbz	r3, 8005354 <_dtoa_r+0xb34>
 800534c:	f10a 0308 	add.w	r3, sl, #8
 8005350:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005352:	6013      	str	r3, [r2, #0]
 8005354:	4650      	mov	r0, sl
 8005356:	b019      	add	sp, #100	@ 0x64
 8005358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800535c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800535e:	2b01      	cmp	r3, #1
 8005360:	f77f ae37 	ble.w	8004fd2 <_dtoa_r+0x7b2>
 8005364:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005366:	930a      	str	r3, [sp, #40]	@ 0x28
 8005368:	2001      	movs	r0, #1
 800536a:	e655      	b.n	8005018 <_dtoa_r+0x7f8>
 800536c:	9b00      	ldr	r3, [sp, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	f77f aed6 	ble.w	8005120 <_dtoa_r+0x900>
 8005374:	4656      	mov	r6, sl
 8005376:	4621      	mov	r1, r4
 8005378:	4648      	mov	r0, r9
 800537a:	f7ff f9c6 	bl	800470a <quorem>
 800537e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005382:	f806 8b01 	strb.w	r8, [r6], #1
 8005386:	9b00      	ldr	r3, [sp, #0]
 8005388:	eba6 020a 	sub.w	r2, r6, sl
 800538c:	4293      	cmp	r3, r2
 800538e:	ddb3      	ble.n	80052f8 <_dtoa_r+0xad8>
 8005390:	4649      	mov	r1, r9
 8005392:	2300      	movs	r3, #0
 8005394:	220a      	movs	r2, #10
 8005396:	4658      	mov	r0, fp
 8005398:	f000 f968 	bl	800566c <__multadd>
 800539c:	4681      	mov	r9, r0
 800539e:	e7ea      	b.n	8005376 <_dtoa_r+0xb56>
 80053a0:	08006550 	.word	0x08006550
 80053a4:	080064d4 	.word	0x080064d4

080053a8 <_free_r>:
 80053a8:	b538      	push	{r3, r4, r5, lr}
 80053aa:	4605      	mov	r5, r0
 80053ac:	2900      	cmp	r1, #0
 80053ae:	d041      	beq.n	8005434 <_free_r+0x8c>
 80053b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053b4:	1f0c      	subs	r4, r1, #4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	bfb8      	it	lt
 80053ba:	18e4      	addlt	r4, r4, r3
 80053bc:	f000 f8e8 	bl	8005590 <__malloc_lock>
 80053c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005438 <_free_r+0x90>)
 80053c2:	6813      	ldr	r3, [r2, #0]
 80053c4:	b933      	cbnz	r3, 80053d4 <_free_r+0x2c>
 80053c6:	6063      	str	r3, [r4, #4]
 80053c8:	6014      	str	r4, [r2, #0]
 80053ca:	4628      	mov	r0, r5
 80053cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053d0:	f000 b8e4 	b.w	800559c <__malloc_unlock>
 80053d4:	42a3      	cmp	r3, r4
 80053d6:	d908      	bls.n	80053ea <_free_r+0x42>
 80053d8:	6820      	ldr	r0, [r4, #0]
 80053da:	1821      	adds	r1, r4, r0
 80053dc:	428b      	cmp	r3, r1
 80053de:	bf01      	itttt	eq
 80053e0:	6819      	ldreq	r1, [r3, #0]
 80053e2:	685b      	ldreq	r3, [r3, #4]
 80053e4:	1809      	addeq	r1, r1, r0
 80053e6:	6021      	streq	r1, [r4, #0]
 80053e8:	e7ed      	b.n	80053c6 <_free_r+0x1e>
 80053ea:	461a      	mov	r2, r3
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	b10b      	cbz	r3, 80053f4 <_free_r+0x4c>
 80053f0:	42a3      	cmp	r3, r4
 80053f2:	d9fa      	bls.n	80053ea <_free_r+0x42>
 80053f4:	6811      	ldr	r1, [r2, #0]
 80053f6:	1850      	adds	r0, r2, r1
 80053f8:	42a0      	cmp	r0, r4
 80053fa:	d10b      	bne.n	8005414 <_free_r+0x6c>
 80053fc:	6820      	ldr	r0, [r4, #0]
 80053fe:	4401      	add	r1, r0
 8005400:	1850      	adds	r0, r2, r1
 8005402:	4283      	cmp	r3, r0
 8005404:	6011      	str	r1, [r2, #0]
 8005406:	d1e0      	bne.n	80053ca <_free_r+0x22>
 8005408:	6818      	ldr	r0, [r3, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	6053      	str	r3, [r2, #4]
 800540e:	4408      	add	r0, r1
 8005410:	6010      	str	r0, [r2, #0]
 8005412:	e7da      	b.n	80053ca <_free_r+0x22>
 8005414:	d902      	bls.n	800541c <_free_r+0x74>
 8005416:	230c      	movs	r3, #12
 8005418:	602b      	str	r3, [r5, #0]
 800541a:	e7d6      	b.n	80053ca <_free_r+0x22>
 800541c:	6820      	ldr	r0, [r4, #0]
 800541e:	1821      	adds	r1, r4, r0
 8005420:	428b      	cmp	r3, r1
 8005422:	bf04      	itt	eq
 8005424:	6819      	ldreq	r1, [r3, #0]
 8005426:	685b      	ldreq	r3, [r3, #4]
 8005428:	6063      	str	r3, [r4, #4]
 800542a:	bf04      	itt	eq
 800542c:	1809      	addeq	r1, r1, r0
 800542e:	6021      	streq	r1, [r4, #0]
 8005430:	6054      	str	r4, [r2, #4]
 8005432:	e7ca      	b.n	80053ca <_free_r+0x22>
 8005434:	bd38      	pop	{r3, r4, r5, pc}
 8005436:	bf00      	nop
 8005438:	20000410 	.word	0x20000410

0800543c <malloc>:
 800543c:	4b02      	ldr	r3, [pc, #8]	@ (8005448 <malloc+0xc>)
 800543e:	4601      	mov	r1, r0
 8005440:	6818      	ldr	r0, [r3, #0]
 8005442:	f000 b825 	b.w	8005490 <_malloc_r>
 8005446:	bf00      	nop
 8005448:	20000018 	.word	0x20000018

0800544c <sbrk_aligned>:
 800544c:	b570      	push	{r4, r5, r6, lr}
 800544e:	4e0f      	ldr	r6, [pc, #60]	@ (800548c <sbrk_aligned+0x40>)
 8005450:	460c      	mov	r4, r1
 8005452:	6831      	ldr	r1, [r6, #0]
 8005454:	4605      	mov	r5, r0
 8005456:	b911      	cbnz	r1, 800545e <sbrk_aligned+0x12>
 8005458:	f000 fcd4 	bl	8005e04 <_sbrk_r>
 800545c:	6030      	str	r0, [r6, #0]
 800545e:	4621      	mov	r1, r4
 8005460:	4628      	mov	r0, r5
 8005462:	f000 fccf 	bl	8005e04 <_sbrk_r>
 8005466:	1c43      	adds	r3, r0, #1
 8005468:	d103      	bne.n	8005472 <sbrk_aligned+0x26>
 800546a:	f04f 34ff 	mov.w	r4, #4294967295
 800546e:	4620      	mov	r0, r4
 8005470:	bd70      	pop	{r4, r5, r6, pc}
 8005472:	1cc4      	adds	r4, r0, #3
 8005474:	f024 0403 	bic.w	r4, r4, #3
 8005478:	42a0      	cmp	r0, r4
 800547a:	d0f8      	beq.n	800546e <sbrk_aligned+0x22>
 800547c:	1a21      	subs	r1, r4, r0
 800547e:	4628      	mov	r0, r5
 8005480:	f000 fcc0 	bl	8005e04 <_sbrk_r>
 8005484:	3001      	adds	r0, #1
 8005486:	d1f2      	bne.n	800546e <sbrk_aligned+0x22>
 8005488:	e7ef      	b.n	800546a <sbrk_aligned+0x1e>
 800548a:	bf00      	nop
 800548c:	2000040c 	.word	0x2000040c

08005490 <_malloc_r>:
 8005490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005494:	1ccd      	adds	r5, r1, #3
 8005496:	f025 0503 	bic.w	r5, r5, #3
 800549a:	3508      	adds	r5, #8
 800549c:	2d0c      	cmp	r5, #12
 800549e:	bf38      	it	cc
 80054a0:	250c      	movcc	r5, #12
 80054a2:	2d00      	cmp	r5, #0
 80054a4:	4606      	mov	r6, r0
 80054a6:	db01      	blt.n	80054ac <_malloc_r+0x1c>
 80054a8:	42a9      	cmp	r1, r5
 80054aa:	d904      	bls.n	80054b6 <_malloc_r+0x26>
 80054ac:	230c      	movs	r3, #12
 80054ae:	6033      	str	r3, [r6, #0]
 80054b0:	2000      	movs	r0, #0
 80054b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800558c <_malloc_r+0xfc>
 80054ba:	f000 f869 	bl	8005590 <__malloc_lock>
 80054be:	f8d8 3000 	ldr.w	r3, [r8]
 80054c2:	461c      	mov	r4, r3
 80054c4:	bb44      	cbnz	r4, 8005518 <_malloc_r+0x88>
 80054c6:	4629      	mov	r1, r5
 80054c8:	4630      	mov	r0, r6
 80054ca:	f7ff ffbf 	bl	800544c <sbrk_aligned>
 80054ce:	1c43      	adds	r3, r0, #1
 80054d0:	4604      	mov	r4, r0
 80054d2:	d158      	bne.n	8005586 <_malloc_r+0xf6>
 80054d4:	f8d8 4000 	ldr.w	r4, [r8]
 80054d8:	4627      	mov	r7, r4
 80054da:	2f00      	cmp	r7, #0
 80054dc:	d143      	bne.n	8005566 <_malloc_r+0xd6>
 80054de:	2c00      	cmp	r4, #0
 80054e0:	d04b      	beq.n	800557a <_malloc_r+0xea>
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	4639      	mov	r1, r7
 80054e6:	4630      	mov	r0, r6
 80054e8:	eb04 0903 	add.w	r9, r4, r3
 80054ec:	f000 fc8a 	bl	8005e04 <_sbrk_r>
 80054f0:	4581      	cmp	r9, r0
 80054f2:	d142      	bne.n	800557a <_malloc_r+0xea>
 80054f4:	6821      	ldr	r1, [r4, #0]
 80054f6:	1a6d      	subs	r5, r5, r1
 80054f8:	4629      	mov	r1, r5
 80054fa:	4630      	mov	r0, r6
 80054fc:	f7ff ffa6 	bl	800544c <sbrk_aligned>
 8005500:	3001      	adds	r0, #1
 8005502:	d03a      	beq.n	800557a <_malloc_r+0xea>
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	442b      	add	r3, r5
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	f8d8 3000 	ldr.w	r3, [r8]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	bb62      	cbnz	r2, 800556c <_malloc_r+0xdc>
 8005512:	f8c8 7000 	str.w	r7, [r8]
 8005516:	e00f      	b.n	8005538 <_malloc_r+0xa8>
 8005518:	6822      	ldr	r2, [r4, #0]
 800551a:	1b52      	subs	r2, r2, r5
 800551c:	d420      	bmi.n	8005560 <_malloc_r+0xd0>
 800551e:	2a0b      	cmp	r2, #11
 8005520:	d917      	bls.n	8005552 <_malloc_r+0xc2>
 8005522:	1961      	adds	r1, r4, r5
 8005524:	42a3      	cmp	r3, r4
 8005526:	6025      	str	r5, [r4, #0]
 8005528:	bf18      	it	ne
 800552a:	6059      	strne	r1, [r3, #4]
 800552c:	6863      	ldr	r3, [r4, #4]
 800552e:	bf08      	it	eq
 8005530:	f8c8 1000 	streq.w	r1, [r8]
 8005534:	5162      	str	r2, [r4, r5]
 8005536:	604b      	str	r3, [r1, #4]
 8005538:	4630      	mov	r0, r6
 800553a:	f000 f82f 	bl	800559c <__malloc_unlock>
 800553e:	f104 000b 	add.w	r0, r4, #11
 8005542:	1d23      	adds	r3, r4, #4
 8005544:	f020 0007 	bic.w	r0, r0, #7
 8005548:	1ac2      	subs	r2, r0, r3
 800554a:	bf1c      	itt	ne
 800554c:	1a1b      	subne	r3, r3, r0
 800554e:	50a3      	strne	r3, [r4, r2]
 8005550:	e7af      	b.n	80054b2 <_malloc_r+0x22>
 8005552:	6862      	ldr	r2, [r4, #4]
 8005554:	42a3      	cmp	r3, r4
 8005556:	bf0c      	ite	eq
 8005558:	f8c8 2000 	streq.w	r2, [r8]
 800555c:	605a      	strne	r2, [r3, #4]
 800555e:	e7eb      	b.n	8005538 <_malloc_r+0xa8>
 8005560:	4623      	mov	r3, r4
 8005562:	6864      	ldr	r4, [r4, #4]
 8005564:	e7ae      	b.n	80054c4 <_malloc_r+0x34>
 8005566:	463c      	mov	r4, r7
 8005568:	687f      	ldr	r7, [r7, #4]
 800556a:	e7b6      	b.n	80054da <_malloc_r+0x4a>
 800556c:	461a      	mov	r2, r3
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	42a3      	cmp	r3, r4
 8005572:	d1fb      	bne.n	800556c <_malloc_r+0xdc>
 8005574:	2300      	movs	r3, #0
 8005576:	6053      	str	r3, [r2, #4]
 8005578:	e7de      	b.n	8005538 <_malloc_r+0xa8>
 800557a:	230c      	movs	r3, #12
 800557c:	6033      	str	r3, [r6, #0]
 800557e:	4630      	mov	r0, r6
 8005580:	f000 f80c 	bl	800559c <__malloc_unlock>
 8005584:	e794      	b.n	80054b0 <_malloc_r+0x20>
 8005586:	6005      	str	r5, [r0, #0]
 8005588:	e7d6      	b.n	8005538 <_malloc_r+0xa8>
 800558a:	bf00      	nop
 800558c:	20000410 	.word	0x20000410

08005590 <__malloc_lock>:
 8005590:	4801      	ldr	r0, [pc, #4]	@ (8005598 <__malloc_lock+0x8>)
 8005592:	f7ff b8b8 	b.w	8004706 <__retarget_lock_acquire_recursive>
 8005596:	bf00      	nop
 8005598:	20000408 	.word	0x20000408

0800559c <__malloc_unlock>:
 800559c:	4801      	ldr	r0, [pc, #4]	@ (80055a4 <__malloc_unlock+0x8>)
 800559e:	f7ff b8b3 	b.w	8004708 <__retarget_lock_release_recursive>
 80055a2:	bf00      	nop
 80055a4:	20000408 	.word	0x20000408

080055a8 <_Balloc>:
 80055a8:	b570      	push	{r4, r5, r6, lr}
 80055aa:	69c6      	ldr	r6, [r0, #28]
 80055ac:	4604      	mov	r4, r0
 80055ae:	460d      	mov	r5, r1
 80055b0:	b976      	cbnz	r6, 80055d0 <_Balloc+0x28>
 80055b2:	2010      	movs	r0, #16
 80055b4:	f7ff ff42 	bl	800543c <malloc>
 80055b8:	4602      	mov	r2, r0
 80055ba:	61e0      	str	r0, [r4, #28]
 80055bc:	b920      	cbnz	r0, 80055c8 <_Balloc+0x20>
 80055be:	4b18      	ldr	r3, [pc, #96]	@ (8005620 <_Balloc+0x78>)
 80055c0:	4818      	ldr	r0, [pc, #96]	@ (8005624 <_Balloc+0x7c>)
 80055c2:	216b      	movs	r1, #107	@ 0x6b
 80055c4:	f000 fc3c 	bl	8005e40 <__assert_func>
 80055c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80055cc:	6006      	str	r6, [r0, #0]
 80055ce:	60c6      	str	r6, [r0, #12]
 80055d0:	69e6      	ldr	r6, [r4, #28]
 80055d2:	68f3      	ldr	r3, [r6, #12]
 80055d4:	b183      	cbz	r3, 80055f8 <_Balloc+0x50>
 80055d6:	69e3      	ldr	r3, [r4, #28]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80055de:	b9b8      	cbnz	r0, 8005610 <_Balloc+0x68>
 80055e0:	2101      	movs	r1, #1
 80055e2:	fa01 f605 	lsl.w	r6, r1, r5
 80055e6:	1d72      	adds	r2, r6, #5
 80055e8:	0092      	lsls	r2, r2, #2
 80055ea:	4620      	mov	r0, r4
 80055ec:	f000 fc46 	bl	8005e7c <_calloc_r>
 80055f0:	b160      	cbz	r0, 800560c <_Balloc+0x64>
 80055f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80055f6:	e00e      	b.n	8005616 <_Balloc+0x6e>
 80055f8:	2221      	movs	r2, #33	@ 0x21
 80055fa:	2104      	movs	r1, #4
 80055fc:	4620      	mov	r0, r4
 80055fe:	f000 fc3d 	bl	8005e7c <_calloc_r>
 8005602:	69e3      	ldr	r3, [r4, #28]
 8005604:	60f0      	str	r0, [r6, #12]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e4      	bne.n	80055d6 <_Balloc+0x2e>
 800560c:	2000      	movs	r0, #0
 800560e:	bd70      	pop	{r4, r5, r6, pc}
 8005610:	6802      	ldr	r2, [r0, #0]
 8005612:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005616:	2300      	movs	r3, #0
 8005618:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800561c:	e7f7      	b.n	800560e <_Balloc+0x66>
 800561e:	bf00      	nop
 8005620:	080064e1 	.word	0x080064e1
 8005624:	08006561 	.word	0x08006561

08005628 <_Bfree>:
 8005628:	b570      	push	{r4, r5, r6, lr}
 800562a:	69c6      	ldr	r6, [r0, #28]
 800562c:	4605      	mov	r5, r0
 800562e:	460c      	mov	r4, r1
 8005630:	b976      	cbnz	r6, 8005650 <_Bfree+0x28>
 8005632:	2010      	movs	r0, #16
 8005634:	f7ff ff02 	bl	800543c <malloc>
 8005638:	4602      	mov	r2, r0
 800563a:	61e8      	str	r0, [r5, #28]
 800563c:	b920      	cbnz	r0, 8005648 <_Bfree+0x20>
 800563e:	4b09      	ldr	r3, [pc, #36]	@ (8005664 <_Bfree+0x3c>)
 8005640:	4809      	ldr	r0, [pc, #36]	@ (8005668 <_Bfree+0x40>)
 8005642:	218f      	movs	r1, #143	@ 0x8f
 8005644:	f000 fbfc 	bl	8005e40 <__assert_func>
 8005648:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800564c:	6006      	str	r6, [r0, #0]
 800564e:	60c6      	str	r6, [r0, #12]
 8005650:	b13c      	cbz	r4, 8005662 <_Bfree+0x3a>
 8005652:	69eb      	ldr	r3, [r5, #28]
 8005654:	6862      	ldr	r2, [r4, #4]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800565c:	6021      	str	r1, [r4, #0]
 800565e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005662:	bd70      	pop	{r4, r5, r6, pc}
 8005664:	080064e1 	.word	0x080064e1
 8005668:	08006561 	.word	0x08006561

0800566c <__multadd>:
 800566c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005670:	690d      	ldr	r5, [r1, #16]
 8005672:	4607      	mov	r7, r0
 8005674:	460c      	mov	r4, r1
 8005676:	461e      	mov	r6, r3
 8005678:	f101 0c14 	add.w	ip, r1, #20
 800567c:	2000      	movs	r0, #0
 800567e:	f8dc 3000 	ldr.w	r3, [ip]
 8005682:	b299      	uxth	r1, r3
 8005684:	fb02 6101 	mla	r1, r2, r1, r6
 8005688:	0c1e      	lsrs	r6, r3, #16
 800568a:	0c0b      	lsrs	r3, r1, #16
 800568c:	fb02 3306 	mla	r3, r2, r6, r3
 8005690:	b289      	uxth	r1, r1
 8005692:	3001      	adds	r0, #1
 8005694:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005698:	4285      	cmp	r5, r0
 800569a:	f84c 1b04 	str.w	r1, [ip], #4
 800569e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80056a2:	dcec      	bgt.n	800567e <__multadd+0x12>
 80056a4:	b30e      	cbz	r6, 80056ea <__multadd+0x7e>
 80056a6:	68a3      	ldr	r3, [r4, #8]
 80056a8:	42ab      	cmp	r3, r5
 80056aa:	dc19      	bgt.n	80056e0 <__multadd+0x74>
 80056ac:	6861      	ldr	r1, [r4, #4]
 80056ae:	4638      	mov	r0, r7
 80056b0:	3101      	adds	r1, #1
 80056b2:	f7ff ff79 	bl	80055a8 <_Balloc>
 80056b6:	4680      	mov	r8, r0
 80056b8:	b928      	cbnz	r0, 80056c6 <__multadd+0x5a>
 80056ba:	4602      	mov	r2, r0
 80056bc:	4b0c      	ldr	r3, [pc, #48]	@ (80056f0 <__multadd+0x84>)
 80056be:	480d      	ldr	r0, [pc, #52]	@ (80056f4 <__multadd+0x88>)
 80056c0:	21ba      	movs	r1, #186	@ 0xba
 80056c2:	f000 fbbd 	bl	8005e40 <__assert_func>
 80056c6:	6922      	ldr	r2, [r4, #16]
 80056c8:	3202      	adds	r2, #2
 80056ca:	f104 010c 	add.w	r1, r4, #12
 80056ce:	0092      	lsls	r2, r2, #2
 80056d0:	300c      	adds	r0, #12
 80056d2:	f000 fba7 	bl	8005e24 <memcpy>
 80056d6:	4621      	mov	r1, r4
 80056d8:	4638      	mov	r0, r7
 80056da:	f7ff ffa5 	bl	8005628 <_Bfree>
 80056de:	4644      	mov	r4, r8
 80056e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80056e4:	3501      	adds	r5, #1
 80056e6:	615e      	str	r6, [r3, #20]
 80056e8:	6125      	str	r5, [r4, #16]
 80056ea:	4620      	mov	r0, r4
 80056ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056f0:	08006550 	.word	0x08006550
 80056f4:	08006561 	.word	0x08006561

080056f8 <__hi0bits>:
 80056f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80056fc:	4603      	mov	r3, r0
 80056fe:	bf36      	itet	cc
 8005700:	0403      	lslcc	r3, r0, #16
 8005702:	2000      	movcs	r0, #0
 8005704:	2010      	movcc	r0, #16
 8005706:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800570a:	bf3c      	itt	cc
 800570c:	021b      	lslcc	r3, r3, #8
 800570e:	3008      	addcc	r0, #8
 8005710:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005714:	bf3c      	itt	cc
 8005716:	011b      	lslcc	r3, r3, #4
 8005718:	3004      	addcc	r0, #4
 800571a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800571e:	bf3c      	itt	cc
 8005720:	009b      	lslcc	r3, r3, #2
 8005722:	3002      	addcc	r0, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	db05      	blt.n	8005734 <__hi0bits+0x3c>
 8005728:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800572c:	f100 0001 	add.w	r0, r0, #1
 8005730:	bf08      	it	eq
 8005732:	2020      	moveq	r0, #32
 8005734:	4770      	bx	lr

08005736 <__lo0bits>:
 8005736:	6803      	ldr	r3, [r0, #0]
 8005738:	4602      	mov	r2, r0
 800573a:	f013 0007 	ands.w	r0, r3, #7
 800573e:	d00b      	beq.n	8005758 <__lo0bits+0x22>
 8005740:	07d9      	lsls	r1, r3, #31
 8005742:	d421      	bmi.n	8005788 <__lo0bits+0x52>
 8005744:	0798      	lsls	r0, r3, #30
 8005746:	bf49      	itett	mi
 8005748:	085b      	lsrmi	r3, r3, #1
 800574a:	089b      	lsrpl	r3, r3, #2
 800574c:	2001      	movmi	r0, #1
 800574e:	6013      	strmi	r3, [r2, #0]
 8005750:	bf5c      	itt	pl
 8005752:	6013      	strpl	r3, [r2, #0]
 8005754:	2002      	movpl	r0, #2
 8005756:	4770      	bx	lr
 8005758:	b299      	uxth	r1, r3
 800575a:	b909      	cbnz	r1, 8005760 <__lo0bits+0x2a>
 800575c:	0c1b      	lsrs	r3, r3, #16
 800575e:	2010      	movs	r0, #16
 8005760:	b2d9      	uxtb	r1, r3
 8005762:	b909      	cbnz	r1, 8005768 <__lo0bits+0x32>
 8005764:	3008      	adds	r0, #8
 8005766:	0a1b      	lsrs	r3, r3, #8
 8005768:	0719      	lsls	r1, r3, #28
 800576a:	bf04      	itt	eq
 800576c:	091b      	lsreq	r3, r3, #4
 800576e:	3004      	addeq	r0, #4
 8005770:	0799      	lsls	r1, r3, #30
 8005772:	bf04      	itt	eq
 8005774:	089b      	lsreq	r3, r3, #2
 8005776:	3002      	addeq	r0, #2
 8005778:	07d9      	lsls	r1, r3, #31
 800577a:	d403      	bmi.n	8005784 <__lo0bits+0x4e>
 800577c:	085b      	lsrs	r3, r3, #1
 800577e:	f100 0001 	add.w	r0, r0, #1
 8005782:	d003      	beq.n	800578c <__lo0bits+0x56>
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	4770      	bx	lr
 8005788:	2000      	movs	r0, #0
 800578a:	4770      	bx	lr
 800578c:	2020      	movs	r0, #32
 800578e:	4770      	bx	lr

08005790 <__i2b>:
 8005790:	b510      	push	{r4, lr}
 8005792:	460c      	mov	r4, r1
 8005794:	2101      	movs	r1, #1
 8005796:	f7ff ff07 	bl	80055a8 <_Balloc>
 800579a:	4602      	mov	r2, r0
 800579c:	b928      	cbnz	r0, 80057aa <__i2b+0x1a>
 800579e:	4b05      	ldr	r3, [pc, #20]	@ (80057b4 <__i2b+0x24>)
 80057a0:	4805      	ldr	r0, [pc, #20]	@ (80057b8 <__i2b+0x28>)
 80057a2:	f240 1145 	movw	r1, #325	@ 0x145
 80057a6:	f000 fb4b 	bl	8005e40 <__assert_func>
 80057aa:	2301      	movs	r3, #1
 80057ac:	6144      	str	r4, [r0, #20]
 80057ae:	6103      	str	r3, [r0, #16]
 80057b0:	bd10      	pop	{r4, pc}
 80057b2:	bf00      	nop
 80057b4:	08006550 	.word	0x08006550
 80057b8:	08006561 	.word	0x08006561

080057bc <__multiply>:
 80057bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c0:	4614      	mov	r4, r2
 80057c2:	690a      	ldr	r2, [r1, #16]
 80057c4:	6923      	ldr	r3, [r4, #16]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	bfa8      	it	ge
 80057ca:	4623      	movge	r3, r4
 80057cc:	460f      	mov	r7, r1
 80057ce:	bfa4      	itt	ge
 80057d0:	460c      	movge	r4, r1
 80057d2:	461f      	movge	r7, r3
 80057d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80057d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80057dc:	68a3      	ldr	r3, [r4, #8]
 80057de:	6861      	ldr	r1, [r4, #4]
 80057e0:	eb0a 0609 	add.w	r6, sl, r9
 80057e4:	42b3      	cmp	r3, r6
 80057e6:	b085      	sub	sp, #20
 80057e8:	bfb8      	it	lt
 80057ea:	3101      	addlt	r1, #1
 80057ec:	f7ff fedc 	bl	80055a8 <_Balloc>
 80057f0:	b930      	cbnz	r0, 8005800 <__multiply+0x44>
 80057f2:	4602      	mov	r2, r0
 80057f4:	4b44      	ldr	r3, [pc, #272]	@ (8005908 <__multiply+0x14c>)
 80057f6:	4845      	ldr	r0, [pc, #276]	@ (800590c <__multiply+0x150>)
 80057f8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80057fc:	f000 fb20 	bl	8005e40 <__assert_func>
 8005800:	f100 0514 	add.w	r5, r0, #20
 8005804:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005808:	462b      	mov	r3, r5
 800580a:	2200      	movs	r2, #0
 800580c:	4543      	cmp	r3, r8
 800580e:	d321      	bcc.n	8005854 <__multiply+0x98>
 8005810:	f107 0114 	add.w	r1, r7, #20
 8005814:	f104 0214 	add.w	r2, r4, #20
 8005818:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800581c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005820:	9302      	str	r3, [sp, #8]
 8005822:	1b13      	subs	r3, r2, r4
 8005824:	3b15      	subs	r3, #21
 8005826:	f023 0303 	bic.w	r3, r3, #3
 800582a:	3304      	adds	r3, #4
 800582c:	f104 0715 	add.w	r7, r4, #21
 8005830:	42ba      	cmp	r2, r7
 8005832:	bf38      	it	cc
 8005834:	2304      	movcc	r3, #4
 8005836:	9301      	str	r3, [sp, #4]
 8005838:	9b02      	ldr	r3, [sp, #8]
 800583a:	9103      	str	r1, [sp, #12]
 800583c:	428b      	cmp	r3, r1
 800583e:	d80c      	bhi.n	800585a <__multiply+0x9e>
 8005840:	2e00      	cmp	r6, #0
 8005842:	dd03      	ble.n	800584c <__multiply+0x90>
 8005844:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005848:	2b00      	cmp	r3, #0
 800584a:	d05b      	beq.n	8005904 <__multiply+0x148>
 800584c:	6106      	str	r6, [r0, #16]
 800584e:	b005      	add	sp, #20
 8005850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005854:	f843 2b04 	str.w	r2, [r3], #4
 8005858:	e7d8      	b.n	800580c <__multiply+0x50>
 800585a:	f8b1 a000 	ldrh.w	sl, [r1]
 800585e:	f1ba 0f00 	cmp.w	sl, #0
 8005862:	d024      	beq.n	80058ae <__multiply+0xf2>
 8005864:	f104 0e14 	add.w	lr, r4, #20
 8005868:	46a9      	mov	r9, r5
 800586a:	f04f 0c00 	mov.w	ip, #0
 800586e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005872:	f8d9 3000 	ldr.w	r3, [r9]
 8005876:	fa1f fb87 	uxth.w	fp, r7
 800587a:	b29b      	uxth	r3, r3
 800587c:	fb0a 330b 	mla	r3, sl, fp, r3
 8005880:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005884:	f8d9 7000 	ldr.w	r7, [r9]
 8005888:	4463      	add	r3, ip
 800588a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800588e:	fb0a c70b 	mla	r7, sl, fp, ip
 8005892:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005896:	b29b      	uxth	r3, r3
 8005898:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800589c:	4572      	cmp	r2, lr
 800589e:	f849 3b04 	str.w	r3, [r9], #4
 80058a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80058a6:	d8e2      	bhi.n	800586e <__multiply+0xb2>
 80058a8:	9b01      	ldr	r3, [sp, #4]
 80058aa:	f845 c003 	str.w	ip, [r5, r3]
 80058ae:	9b03      	ldr	r3, [sp, #12]
 80058b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80058b4:	3104      	adds	r1, #4
 80058b6:	f1b9 0f00 	cmp.w	r9, #0
 80058ba:	d021      	beq.n	8005900 <__multiply+0x144>
 80058bc:	682b      	ldr	r3, [r5, #0]
 80058be:	f104 0c14 	add.w	ip, r4, #20
 80058c2:	46ae      	mov	lr, r5
 80058c4:	f04f 0a00 	mov.w	sl, #0
 80058c8:	f8bc b000 	ldrh.w	fp, [ip]
 80058cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80058d0:	fb09 770b 	mla	r7, r9, fp, r7
 80058d4:	4457      	add	r7, sl
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80058dc:	f84e 3b04 	str.w	r3, [lr], #4
 80058e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80058e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80058e8:	f8be 3000 	ldrh.w	r3, [lr]
 80058ec:	fb09 330a 	mla	r3, r9, sl, r3
 80058f0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80058f4:	4562      	cmp	r2, ip
 80058f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80058fa:	d8e5      	bhi.n	80058c8 <__multiply+0x10c>
 80058fc:	9f01      	ldr	r7, [sp, #4]
 80058fe:	51eb      	str	r3, [r5, r7]
 8005900:	3504      	adds	r5, #4
 8005902:	e799      	b.n	8005838 <__multiply+0x7c>
 8005904:	3e01      	subs	r6, #1
 8005906:	e79b      	b.n	8005840 <__multiply+0x84>
 8005908:	08006550 	.word	0x08006550
 800590c:	08006561 	.word	0x08006561

08005910 <__pow5mult>:
 8005910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005914:	4615      	mov	r5, r2
 8005916:	f012 0203 	ands.w	r2, r2, #3
 800591a:	4607      	mov	r7, r0
 800591c:	460e      	mov	r6, r1
 800591e:	d007      	beq.n	8005930 <__pow5mult+0x20>
 8005920:	4c25      	ldr	r4, [pc, #148]	@ (80059b8 <__pow5mult+0xa8>)
 8005922:	3a01      	subs	r2, #1
 8005924:	2300      	movs	r3, #0
 8005926:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800592a:	f7ff fe9f 	bl	800566c <__multadd>
 800592e:	4606      	mov	r6, r0
 8005930:	10ad      	asrs	r5, r5, #2
 8005932:	d03d      	beq.n	80059b0 <__pow5mult+0xa0>
 8005934:	69fc      	ldr	r4, [r7, #28]
 8005936:	b97c      	cbnz	r4, 8005958 <__pow5mult+0x48>
 8005938:	2010      	movs	r0, #16
 800593a:	f7ff fd7f 	bl	800543c <malloc>
 800593e:	4602      	mov	r2, r0
 8005940:	61f8      	str	r0, [r7, #28]
 8005942:	b928      	cbnz	r0, 8005950 <__pow5mult+0x40>
 8005944:	4b1d      	ldr	r3, [pc, #116]	@ (80059bc <__pow5mult+0xac>)
 8005946:	481e      	ldr	r0, [pc, #120]	@ (80059c0 <__pow5mult+0xb0>)
 8005948:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800594c:	f000 fa78 	bl	8005e40 <__assert_func>
 8005950:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005954:	6004      	str	r4, [r0, #0]
 8005956:	60c4      	str	r4, [r0, #12]
 8005958:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800595c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005960:	b94c      	cbnz	r4, 8005976 <__pow5mult+0x66>
 8005962:	f240 2171 	movw	r1, #625	@ 0x271
 8005966:	4638      	mov	r0, r7
 8005968:	f7ff ff12 	bl	8005790 <__i2b>
 800596c:	2300      	movs	r3, #0
 800596e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005972:	4604      	mov	r4, r0
 8005974:	6003      	str	r3, [r0, #0]
 8005976:	f04f 0900 	mov.w	r9, #0
 800597a:	07eb      	lsls	r3, r5, #31
 800597c:	d50a      	bpl.n	8005994 <__pow5mult+0x84>
 800597e:	4631      	mov	r1, r6
 8005980:	4622      	mov	r2, r4
 8005982:	4638      	mov	r0, r7
 8005984:	f7ff ff1a 	bl	80057bc <__multiply>
 8005988:	4631      	mov	r1, r6
 800598a:	4680      	mov	r8, r0
 800598c:	4638      	mov	r0, r7
 800598e:	f7ff fe4b 	bl	8005628 <_Bfree>
 8005992:	4646      	mov	r6, r8
 8005994:	106d      	asrs	r5, r5, #1
 8005996:	d00b      	beq.n	80059b0 <__pow5mult+0xa0>
 8005998:	6820      	ldr	r0, [r4, #0]
 800599a:	b938      	cbnz	r0, 80059ac <__pow5mult+0x9c>
 800599c:	4622      	mov	r2, r4
 800599e:	4621      	mov	r1, r4
 80059a0:	4638      	mov	r0, r7
 80059a2:	f7ff ff0b 	bl	80057bc <__multiply>
 80059a6:	6020      	str	r0, [r4, #0]
 80059a8:	f8c0 9000 	str.w	r9, [r0]
 80059ac:	4604      	mov	r4, r0
 80059ae:	e7e4      	b.n	800597a <__pow5mult+0x6a>
 80059b0:	4630      	mov	r0, r6
 80059b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059b6:	bf00      	nop
 80059b8:	080065bc 	.word	0x080065bc
 80059bc:	080064e1 	.word	0x080064e1
 80059c0:	08006561 	.word	0x08006561

080059c4 <__lshift>:
 80059c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c8:	460c      	mov	r4, r1
 80059ca:	6849      	ldr	r1, [r1, #4]
 80059cc:	6923      	ldr	r3, [r4, #16]
 80059ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80059d2:	68a3      	ldr	r3, [r4, #8]
 80059d4:	4607      	mov	r7, r0
 80059d6:	4691      	mov	r9, r2
 80059d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80059dc:	f108 0601 	add.w	r6, r8, #1
 80059e0:	42b3      	cmp	r3, r6
 80059e2:	db0b      	blt.n	80059fc <__lshift+0x38>
 80059e4:	4638      	mov	r0, r7
 80059e6:	f7ff fddf 	bl	80055a8 <_Balloc>
 80059ea:	4605      	mov	r5, r0
 80059ec:	b948      	cbnz	r0, 8005a02 <__lshift+0x3e>
 80059ee:	4602      	mov	r2, r0
 80059f0:	4b28      	ldr	r3, [pc, #160]	@ (8005a94 <__lshift+0xd0>)
 80059f2:	4829      	ldr	r0, [pc, #164]	@ (8005a98 <__lshift+0xd4>)
 80059f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80059f8:	f000 fa22 	bl	8005e40 <__assert_func>
 80059fc:	3101      	adds	r1, #1
 80059fe:	005b      	lsls	r3, r3, #1
 8005a00:	e7ee      	b.n	80059e0 <__lshift+0x1c>
 8005a02:	2300      	movs	r3, #0
 8005a04:	f100 0114 	add.w	r1, r0, #20
 8005a08:	f100 0210 	add.w	r2, r0, #16
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	4553      	cmp	r3, sl
 8005a10:	db33      	blt.n	8005a7a <__lshift+0xb6>
 8005a12:	6920      	ldr	r0, [r4, #16]
 8005a14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a18:	f104 0314 	add.w	r3, r4, #20
 8005a1c:	f019 091f 	ands.w	r9, r9, #31
 8005a20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005a28:	d02b      	beq.n	8005a82 <__lshift+0xbe>
 8005a2a:	f1c9 0e20 	rsb	lr, r9, #32
 8005a2e:	468a      	mov	sl, r1
 8005a30:	2200      	movs	r2, #0
 8005a32:	6818      	ldr	r0, [r3, #0]
 8005a34:	fa00 f009 	lsl.w	r0, r0, r9
 8005a38:	4310      	orrs	r0, r2
 8005a3a:	f84a 0b04 	str.w	r0, [sl], #4
 8005a3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a42:	459c      	cmp	ip, r3
 8005a44:	fa22 f20e 	lsr.w	r2, r2, lr
 8005a48:	d8f3      	bhi.n	8005a32 <__lshift+0x6e>
 8005a4a:	ebac 0304 	sub.w	r3, ip, r4
 8005a4e:	3b15      	subs	r3, #21
 8005a50:	f023 0303 	bic.w	r3, r3, #3
 8005a54:	3304      	adds	r3, #4
 8005a56:	f104 0015 	add.w	r0, r4, #21
 8005a5a:	4584      	cmp	ip, r0
 8005a5c:	bf38      	it	cc
 8005a5e:	2304      	movcc	r3, #4
 8005a60:	50ca      	str	r2, [r1, r3]
 8005a62:	b10a      	cbz	r2, 8005a68 <__lshift+0xa4>
 8005a64:	f108 0602 	add.w	r6, r8, #2
 8005a68:	3e01      	subs	r6, #1
 8005a6a:	4638      	mov	r0, r7
 8005a6c:	612e      	str	r6, [r5, #16]
 8005a6e:	4621      	mov	r1, r4
 8005a70:	f7ff fdda 	bl	8005628 <_Bfree>
 8005a74:	4628      	mov	r0, r5
 8005a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005a7e:	3301      	adds	r3, #1
 8005a80:	e7c5      	b.n	8005a0e <__lshift+0x4a>
 8005a82:	3904      	subs	r1, #4
 8005a84:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a88:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a8c:	459c      	cmp	ip, r3
 8005a8e:	d8f9      	bhi.n	8005a84 <__lshift+0xc0>
 8005a90:	e7ea      	b.n	8005a68 <__lshift+0xa4>
 8005a92:	bf00      	nop
 8005a94:	08006550 	.word	0x08006550
 8005a98:	08006561 	.word	0x08006561

08005a9c <__mcmp>:
 8005a9c:	690a      	ldr	r2, [r1, #16]
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	6900      	ldr	r0, [r0, #16]
 8005aa2:	1a80      	subs	r0, r0, r2
 8005aa4:	b530      	push	{r4, r5, lr}
 8005aa6:	d10e      	bne.n	8005ac6 <__mcmp+0x2a>
 8005aa8:	3314      	adds	r3, #20
 8005aaa:	3114      	adds	r1, #20
 8005aac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005ab0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005ab4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005ab8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005abc:	4295      	cmp	r5, r2
 8005abe:	d003      	beq.n	8005ac8 <__mcmp+0x2c>
 8005ac0:	d205      	bcs.n	8005ace <__mcmp+0x32>
 8005ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac6:	bd30      	pop	{r4, r5, pc}
 8005ac8:	42a3      	cmp	r3, r4
 8005aca:	d3f3      	bcc.n	8005ab4 <__mcmp+0x18>
 8005acc:	e7fb      	b.n	8005ac6 <__mcmp+0x2a>
 8005ace:	2001      	movs	r0, #1
 8005ad0:	e7f9      	b.n	8005ac6 <__mcmp+0x2a>
	...

08005ad4 <__mdiff>:
 8005ad4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad8:	4689      	mov	r9, r1
 8005ada:	4606      	mov	r6, r0
 8005adc:	4611      	mov	r1, r2
 8005ade:	4648      	mov	r0, r9
 8005ae0:	4614      	mov	r4, r2
 8005ae2:	f7ff ffdb 	bl	8005a9c <__mcmp>
 8005ae6:	1e05      	subs	r5, r0, #0
 8005ae8:	d112      	bne.n	8005b10 <__mdiff+0x3c>
 8005aea:	4629      	mov	r1, r5
 8005aec:	4630      	mov	r0, r6
 8005aee:	f7ff fd5b 	bl	80055a8 <_Balloc>
 8005af2:	4602      	mov	r2, r0
 8005af4:	b928      	cbnz	r0, 8005b02 <__mdiff+0x2e>
 8005af6:	4b3f      	ldr	r3, [pc, #252]	@ (8005bf4 <__mdiff+0x120>)
 8005af8:	f240 2137 	movw	r1, #567	@ 0x237
 8005afc:	483e      	ldr	r0, [pc, #248]	@ (8005bf8 <__mdiff+0x124>)
 8005afe:	f000 f99f 	bl	8005e40 <__assert_func>
 8005b02:	2301      	movs	r3, #1
 8005b04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005b08:	4610      	mov	r0, r2
 8005b0a:	b003      	add	sp, #12
 8005b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b10:	bfbc      	itt	lt
 8005b12:	464b      	movlt	r3, r9
 8005b14:	46a1      	movlt	r9, r4
 8005b16:	4630      	mov	r0, r6
 8005b18:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005b1c:	bfba      	itte	lt
 8005b1e:	461c      	movlt	r4, r3
 8005b20:	2501      	movlt	r5, #1
 8005b22:	2500      	movge	r5, #0
 8005b24:	f7ff fd40 	bl	80055a8 <_Balloc>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	b918      	cbnz	r0, 8005b34 <__mdiff+0x60>
 8005b2c:	4b31      	ldr	r3, [pc, #196]	@ (8005bf4 <__mdiff+0x120>)
 8005b2e:	f240 2145 	movw	r1, #581	@ 0x245
 8005b32:	e7e3      	b.n	8005afc <__mdiff+0x28>
 8005b34:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005b38:	6926      	ldr	r6, [r4, #16]
 8005b3a:	60c5      	str	r5, [r0, #12]
 8005b3c:	f109 0310 	add.w	r3, r9, #16
 8005b40:	f109 0514 	add.w	r5, r9, #20
 8005b44:	f104 0e14 	add.w	lr, r4, #20
 8005b48:	f100 0b14 	add.w	fp, r0, #20
 8005b4c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005b50:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005b54:	9301      	str	r3, [sp, #4]
 8005b56:	46d9      	mov	r9, fp
 8005b58:	f04f 0c00 	mov.w	ip, #0
 8005b5c:	9b01      	ldr	r3, [sp, #4]
 8005b5e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005b62:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005b66:	9301      	str	r3, [sp, #4]
 8005b68:	fa1f f38a 	uxth.w	r3, sl
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	b283      	uxth	r3, r0
 8005b70:	1acb      	subs	r3, r1, r3
 8005b72:	0c00      	lsrs	r0, r0, #16
 8005b74:	4463      	add	r3, ip
 8005b76:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005b7a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005b84:	4576      	cmp	r6, lr
 8005b86:	f849 3b04 	str.w	r3, [r9], #4
 8005b8a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005b8e:	d8e5      	bhi.n	8005b5c <__mdiff+0x88>
 8005b90:	1b33      	subs	r3, r6, r4
 8005b92:	3b15      	subs	r3, #21
 8005b94:	f023 0303 	bic.w	r3, r3, #3
 8005b98:	3415      	adds	r4, #21
 8005b9a:	3304      	adds	r3, #4
 8005b9c:	42a6      	cmp	r6, r4
 8005b9e:	bf38      	it	cc
 8005ba0:	2304      	movcc	r3, #4
 8005ba2:	441d      	add	r5, r3
 8005ba4:	445b      	add	r3, fp
 8005ba6:	461e      	mov	r6, r3
 8005ba8:	462c      	mov	r4, r5
 8005baa:	4544      	cmp	r4, r8
 8005bac:	d30e      	bcc.n	8005bcc <__mdiff+0xf8>
 8005bae:	f108 0103 	add.w	r1, r8, #3
 8005bb2:	1b49      	subs	r1, r1, r5
 8005bb4:	f021 0103 	bic.w	r1, r1, #3
 8005bb8:	3d03      	subs	r5, #3
 8005bba:	45a8      	cmp	r8, r5
 8005bbc:	bf38      	it	cc
 8005bbe:	2100      	movcc	r1, #0
 8005bc0:	440b      	add	r3, r1
 8005bc2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005bc6:	b191      	cbz	r1, 8005bee <__mdiff+0x11a>
 8005bc8:	6117      	str	r7, [r2, #16]
 8005bca:	e79d      	b.n	8005b08 <__mdiff+0x34>
 8005bcc:	f854 1b04 	ldr.w	r1, [r4], #4
 8005bd0:	46e6      	mov	lr, ip
 8005bd2:	0c08      	lsrs	r0, r1, #16
 8005bd4:	fa1c fc81 	uxtah	ip, ip, r1
 8005bd8:	4471      	add	r1, lr
 8005bda:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005bde:	b289      	uxth	r1, r1
 8005be0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005be4:	f846 1b04 	str.w	r1, [r6], #4
 8005be8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005bec:	e7dd      	b.n	8005baa <__mdiff+0xd6>
 8005bee:	3f01      	subs	r7, #1
 8005bf0:	e7e7      	b.n	8005bc2 <__mdiff+0xee>
 8005bf2:	bf00      	nop
 8005bf4:	08006550 	.word	0x08006550
 8005bf8:	08006561 	.word	0x08006561

08005bfc <__d2b>:
 8005bfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005c00:	460f      	mov	r7, r1
 8005c02:	2101      	movs	r1, #1
 8005c04:	ec59 8b10 	vmov	r8, r9, d0
 8005c08:	4616      	mov	r6, r2
 8005c0a:	f7ff fccd 	bl	80055a8 <_Balloc>
 8005c0e:	4604      	mov	r4, r0
 8005c10:	b930      	cbnz	r0, 8005c20 <__d2b+0x24>
 8005c12:	4602      	mov	r2, r0
 8005c14:	4b23      	ldr	r3, [pc, #140]	@ (8005ca4 <__d2b+0xa8>)
 8005c16:	4824      	ldr	r0, [pc, #144]	@ (8005ca8 <__d2b+0xac>)
 8005c18:	f240 310f 	movw	r1, #783	@ 0x30f
 8005c1c:	f000 f910 	bl	8005e40 <__assert_func>
 8005c20:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005c24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005c28:	b10d      	cbz	r5, 8005c2e <__d2b+0x32>
 8005c2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c2e:	9301      	str	r3, [sp, #4]
 8005c30:	f1b8 0300 	subs.w	r3, r8, #0
 8005c34:	d023      	beq.n	8005c7e <__d2b+0x82>
 8005c36:	4668      	mov	r0, sp
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	f7ff fd7c 	bl	8005736 <__lo0bits>
 8005c3e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005c42:	b1d0      	cbz	r0, 8005c7a <__d2b+0x7e>
 8005c44:	f1c0 0320 	rsb	r3, r0, #32
 8005c48:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4c:	430b      	orrs	r3, r1
 8005c4e:	40c2      	lsrs	r2, r0
 8005c50:	6163      	str	r3, [r4, #20]
 8005c52:	9201      	str	r2, [sp, #4]
 8005c54:	9b01      	ldr	r3, [sp, #4]
 8005c56:	61a3      	str	r3, [r4, #24]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	bf0c      	ite	eq
 8005c5c:	2201      	moveq	r2, #1
 8005c5e:	2202      	movne	r2, #2
 8005c60:	6122      	str	r2, [r4, #16]
 8005c62:	b1a5      	cbz	r5, 8005c8e <__d2b+0x92>
 8005c64:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005c68:	4405      	add	r5, r0
 8005c6a:	603d      	str	r5, [r7, #0]
 8005c6c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005c70:	6030      	str	r0, [r6, #0]
 8005c72:	4620      	mov	r0, r4
 8005c74:	b003      	add	sp, #12
 8005c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c7a:	6161      	str	r1, [r4, #20]
 8005c7c:	e7ea      	b.n	8005c54 <__d2b+0x58>
 8005c7e:	a801      	add	r0, sp, #4
 8005c80:	f7ff fd59 	bl	8005736 <__lo0bits>
 8005c84:	9b01      	ldr	r3, [sp, #4]
 8005c86:	6163      	str	r3, [r4, #20]
 8005c88:	3020      	adds	r0, #32
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	e7e8      	b.n	8005c60 <__d2b+0x64>
 8005c8e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005c92:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005c96:	6038      	str	r0, [r7, #0]
 8005c98:	6918      	ldr	r0, [r3, #16]
 8005c9a:	f7ff fd2d 	bl	80056f8 <__hi0bits>
 8005c9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005ca2:	e7e5      	b.n	8005c70 <__d2b+0x74>
 8005ca4:	08006550 	.word	0x08006550
 8005ca8:	08006561 	.word	0x08006561

08005cac <__sflush_r>:
 8005cac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cb4:	0716      	lsls	r6, r2, #28
 8005cb6:	4605      	mov	r5, r0
 8005cb8:	460c      	mov	r4, r1
 8005cba:	d454      	bmi.n	8005d66 <__sflush_r+0xba>
 8005cbc:	684b      	ldr	r3, [r1, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	dc02      	bgt.n	8005cc8 <__sflush_r+0x1c>
 8005cc2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	dd48      	ble.n	8005d5a <__sflush_r+0xae>
 8005cc8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005cca:	2e00      	cmp	r6, #0
 8005ccc:	d045      	beq.n	8005d5a <__sflush_r+0xae>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005cd4:	682f      	ldr	r7, [r5, #0]
 8005cd6:	6a21      	ldr	r1, [r4, #32]
 8005cd8:	602b      	str	r3, [r5, #0]
 8005cda:	d030      	beq.n	8005d3e <__sflush_r+0x92>
 8005cdc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005cde:	89a3      	ldrh	r3, [r4, #12]
 8005ce0:	0759      	lsls	r1, r3, #29
 8005ce2:	d505      	bpl.n	8005cf0 <__sflush_r+0x44>
 8005ce4:	6863      	ldr	r3, [r4, #4]
 8005ce6:	1ad2      	subs	r2, r2, r3
 8005ce8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005cea:	b10b      	cbz	r3, 8005cf0 <__sflush_r+0x44>
 8005cec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005cee:	1ad2      	subs	r2, r2, r3
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005cf4:	6a21      	ldr	r1, [r4, #32]
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	47b0      	blx	r6
 8005cfa:	1c43      	adds	r3, r0, #1
 8005cfc:	89a3      	ldrh	r3, [r4, #12]
 8005cfe:	d106      	bne.n	8005d0e <__sflush_r+0x62>
 8005d00:	6829      	ldr	r1, [r5, #0]
 8005d02:	291d      	cmp	r1, #29
 8005d04:	d82b      	bhi.n	8005d5e <__sflush_r+0xb2>
 8005d06:	4a2a      	ldr	r2, [pc, #168]	@ (8005db0 <__sflush_r+0x104>)
 8005d08:	410a      	asrs	r2, r1
 8005d0a:	07d6      	lsls	r6, r2, #31
 8005d0c:	d427      	bmi.n	8005d5e <__sflush_r+0xb2>
 8005d0e:	2200      	movs	r2, #0
 8005d10:	6062      	str	r2, [r4, #4]
 8005d12:	04d9      	lsls	r1, r3, #19
 8005d14:	6922      	ldr	r2, [r4, #16]
 8005d16:	6022      	str	r2, [r4, #0]
 8005d18:	d504      	bpl.n	8005d24 <__sflush_r+0x78>
 8005d1a:	1c42      	adds	r2, r0, #1
 8005d1c:	d101      	bne.n	8005d22 <__sflush_r+0x76>
 8005d1e:	682b      	ldr	r3, [r5, #0]
 8005d20:	b903      	cbnz	r3, 8005d24 <__sflush_r+0x78>
 8005d22:	6560      	str	r0, [r4, #84]	@ 0x54
 8005d24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d26:	602f      	str	r7, [r5, #0]
 8005d28:	b1b9      	cbz	r1, 8005d5a <__sflush_r+0xae>
 8005d2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d2e:	4299      	cmp	r1, r3
 8005d30:	d002      	beq.n	8005d38 <__sflush_r+0x8c>
 8005d32:	4628      	mov	r0, r5
 8005d34:	f7ff fb38 	bl	80053a8 <_free_r>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d3c:	e00d      	b.n	8005d5a <__sflush_r+0xae>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	4628      	mov	r0, r5
 8005d42:	47b0      	blx	r6
 8005d44:	4602      	mov	r2, r0
 8005d46:	1c50      	adds	r0, r2, #1
 8005d48:	d1c9      	bne.n	8005cde <__sflush_r+0x32>
 8005d4a:	682b      	ldr	r3, [r5, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d0c6      	beq.n	8005cde <__sflush_r+0x32>
 8005d50:	2b1d      	cmp	r3, #29
 8005d52:	d001      	beq.n	8005d58 <__sflush_r+0xac>
 8005d54:	2b16      	cmp	r3, #22
 8005d56:	d11e      	bne.n	8005d96 <__sflush_r+0xea>
 8005d58:	602f      	str	r7, [r5, #0]
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	e022      	b.n	8005da4 <__sflush_r+0xf8>
 8005d5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d62:	b21b      	sxth	r3, r3
 8005d64:	e01b      	b.n	8005d9e <__sflush_r+0xf2>
 8005d66:	690f      	ldr	r7, [r1, #16]
 8005d68:	2f00      	cmp	r7, #0
 8005d6a:	d0f6      	beq.n	8005d5a <__sflush_r+0xae>
 8005d6c:	0793      	lsls	r3, r2, #30
 8005d6e:	680e      	ldr	r6, [r1, #0]
 8005d70:	bf08      	it	eq
 8005d72:	694b      	ldreq	r3, [r1, #20]
 8005d74:	600f      	str	r7, [r1, #0]
 8005d76:	bf18      	it	ne
 8005d78:	2300      	movne	r3, #0
 8005d7a:	eba6 0807 	sub.w	r8, r6, r7
 8005d7e:	608b      	str	r3, [r1, #8]
 8005d80:	f1b8 0f00 	cmp.w	r8, #0
 8005d84:	dde9      	ble.n	8005d5a <__sflush_r+0xae>
 8005d86:	6a21      	ldr	r1, [r4, #32]
 8005d88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005d8a:	4643      	mov	r3, r8
 8005d8c:	463a      	mov	r2, r7
 8005d8e:	4628      	mov	r0, r5
 8005d90:	47b0      	blx	r6
 8005d92:	2800      	cmp	r0, #0
 8005d94:	dc08      	bgt.n	8005da8 <__sflush_r+0xfc>
 8005d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d9e:	81a3      	strh	r3, [r4, #12]
 8005da0:	f04f 30ff 	mov.w	r0, #4294967295
 8005da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005da8:	4407      	add	r7, r0
 8005daa:	eba8 0800 	sub.w	r8, r8, r0
 8005dae:	e7e7      	b.n	8005d80 <__sflush_r+0xd4>
 8005db0:	dfbffffe 	.word	0xdfbffffe

08005db4 <_fflush_r>:
 8005db4:	b538      	push	{r3, r4, r5, lr}
 8005db6:	690b      	ldr	r3, [r1, #16]
 8005db8:	4605      	mov	r5, r0
 8005dba:	460c      	mov	r4, r1
 8005dbc:	b913      	cbnz	r3, 8005dc4 <_fflush_r+0x10>
 8005dbe:	2500      	movs	r5, #0
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	bd38      	pop	{r3, r4, r5, pc}
 8005dc4:	b118      	cbz	r0, 8005dce <_fflush_r+0x1a>
 8005dc6:	6a03      	ldr	r3, [r0, #32]
 8005dc8:	b90b      	cbnz	r3, 8005dce <_fflush_r+0x1a>
 8005dca:	f7fe fba5 	bl	8004518 <__sinit>
 8005dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0f3      	beq.n	8005dbe <_fflush_r+0xa>
 8005dd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005dd8:	07d0      	lsls	r0, r2, #31
 8005dda:	d404      	bmi.n	8005de6 <_fflush_r+0x32>
 8005ddc:	0599      	lsls	r1, r3, #22
 8005dde:	d402      	bmi.n	8005de6 <_fflush_r+0x32>
 8005de0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005de2:	f7fe fc90 	bl	8004706 <__retarget_lock_acquire_recursive>
 8005de6:	4628      	mov	r0, r5
 8005de8:	4621      	mov	r1, r4
 8005dea:	f7ff ff5f 	bl	8005cac <__sflush_r>
 8005dee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005df0:	07da      	lsls	r2, r3, #31
 8005df2:	4605      	mov	r5, r0
 8005df4:	d4e4      	bmi.n	8005dc0 <_fflush_r+0xc>
 8005df6:	89a3      	ldrh	r3, [r4, #12]
 8005df8:	059b      	lsls	r3, r3, #22
 8005dfa:	d4e1      	bmi.n	8005dc0 <_fflush_r+0xc>
 8005dfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dfe:	f7fe fc83 	bl	8004708 <__retarget_lock_release_recursive>
 8005e02:	e7dd      	b.n	8005dc0 <_fflush_r+0xc>

08005e04 <_sbrk_r>:
 8005e04:	b538      	push	{r3, r4, r5, lr}
 8005e06:	4d06      	ldr	r5, [pc, #24]	@ (8005e20 <_sbrk_r+0x1c>)
 8005e08:	2300      	movs	r3, #0
 8005e0a:	4604      	mov	r4, r0
 8005e0c:	4608      	mov	r0, r1
 8005e0e:	602b      	str	r3, [r5, #0]
 8005e10:	f7fb f90a 	bl	8001028 <_sbrk>
 8005e14:	1c43      	adds	r3, r0, #1
 8005e16:	d102      	bne.n	8005e1e <_sbrk_r+0x1a>
 8005e18:	682b      	ldr	r3, [r5, #0]
 8005e1a:	b103      	cbz	r3, 8005e1e <_sbrk_r+0x1a>
 8005e1c:	6023      	str	r3, [r4, #0]
 8005e1e:	bd38      	pop	{r3, r4, r5, pc}
 8005e20:	20000404 	.word	0x20000404

08005e24 <memcpy>:
 8005e24:	440a      	add	r2, r1
 8005e26:	4291      	cmp	r1, r2
 8005e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e2c:	d100      	bne.n	8005e30 <memcpy+0xc>
 8005e2e:	4770      	bx	lr
 8005e30:	b510      	push	{r4, lr}
 8005e32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e3a:	4291      	cmp	r1, r2
 8005e3c:	d1f9      	bne.n	8005e32 <memcpy+0xe>
 8005e3e:	bd10      	pop	{r4, pc}

08005e40 <__assert_func>:
 8005e40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e42:	4614      	mov	r4, r2
 8005e44:	461a      	mov	r2, r3
 8005e46:	4b09      	ldr	r3, [pc, #36]	@ (8005e6c <__assert_func+0x2c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4605      	mov	r5, r0
 8005e4c:	68d8      	ldr	r0, [r3, #12]
 8005e4e:	b954      	cbnz	r4, 8005e66 <__assert_func+0x26>
 8005e50:	4b07      	ldr	r3, [pc, #28]	@ (8005e70 <__assert_func+0x30>)
 8005e52:	461c      	mov	r4, r3
 8005e54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005e58:	9100      	str	r1, [sp, #0]
 8005e5a:	462b      	mov	r3, r5
 8005e5c:	4905      	ldr	r1, [pc, #20]	@ (8005e74 <__assert_func+0x34>)
 8005e5e:	f000 f841 	bl	8005ee4 <fiprintf>
 8005e62:	f000 f851 	bl	8005f08 <abort>
 8005e66:	4b04      	ldr	r3, [pc, #16]	@ (8005e78 <__assert_func+0x38>)
 8005e68:	e7f4      	b.n	8005e54 <__assert_func+0x14>
 8005e6a:	bf00      	nop
 8005e6c:	20000018 	.word	0x20000018
 8005e70:	080066fd 	.word	0x080066fd
 8005e74:	080066cf 	.word	0x080066cf
 8005e78:	080066c2 	.word	0x080066c2

08005e7c <_calloc_r>:
 8005e7c:	b570      	push	{r4, r5, r6, lr}
 8005e7e:	fba1 5402 	umull	r5, r4, r1, r2
 8005e82:	b93c      	cbnz	r4, 8005e94 <_calloc_r+0x18>
 8005e84:	4629      	mov	r1, r5
 8005e86:	f7ff fb03 	bl	8005490 <_malloc_r>
 8005e8a:	4606      	mov	r6, r0
 8005e8c:	b928      	cbnz	r0, 8005e9a <_calloc_r+0x1e>
 8005e8e:	2600      	movs	r6, #0
 8005e90:	4630      	mov	r0, r6
 8005e92:	bd70      	pop	{r4, r5, r6, pc}
 8005e94:	220c      	movs	r2, #12
 8005e96:	6002      	str	r2, [r0, #0]
 8005e98:	e7f9      	b.n	8005e8e <_calloc_r+0x12>
 8005e9a:	462a      	mov	r2, r5
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	f7fe fbb4 	bl	800460a <memset>
 8005ea2:	e7f5      	b.n	8005e90 <_calloc_r+0x14>

08005ea4 <__ascii_mbtowc>:
 8005ea4:	b082      	sub	sp, #8
 8005ea6:	b901      	cbnz	r1, 8005eaa <__ascii_mbtowc+0x6>
 8005ea8:	a901      	add	r1, sp, #4
 8005eaa:	b142      	cbz	r2, 8005ebe <__ascii_mbtowc+0x1a>
 8005eac:	b14b      	cbz	r3, 8005ec2 <__ascii_mbtowc+0x1e>
 8005eae:	7813      	ldrb	r3, [r2, #0]
 8005eb0:	600b      	str	r3, [r1, #0]
 8005eb2:	7812      	ldrb	r2, [r2, #0]
 8005eb4:	1e10      	subs	r0, r2, #0
 8005eb6:	bf18      	it	ne
 8005eb8:	2001      	movne	r0, #1
 8005eba:	b002      	add	sp, #8
 8005ebc:	4770      	bx	lr
 8005ebe:	4610      	mov	r0, r2
 8005ec0:	e7fb      	b.n	8005eba <__ascii_mbtowc+0x16>
 8005ec2:	f06f 0001 	mvn.w	r0, #1
 8005ec6:	e7f8      	b.n	8005eba <__ascii_mbtowc+0x16>

08005ec8 <__ascii_wctomb>:
 8005ec8:	4603      	mov	r3, r0
 8005eca:	4608      	mov	r0, r1
 8005ecc:	b141      	cbz	r1, 8005ee0 <__ascii_wctomb+0x18>
 8005ece:	2aff      	cmp	r2, #255	@ 0xff
 8005ed0:	d904      	bls.n	8005edc <__ascii_wctomb+0x14>
 8005ed2:	228a      	movs	r2, #138	@ 0x8a
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8005eda:	4770      	bx	lr
 8005edc:	700a      	strb	r2, [r1, #0]
 8005ede:	2001      	movs	r0, #1
 8005ee0:	4770      	bx	lr
	...

08005ee4 <fiprintf>:
 8005ee4:	b40e      	push	{r1, r2, r3}
 8005ee6:	b503      	push	{r0, r1, lr}
 8005ee8:	4601      	mov	r1, r0
 8005eea:	ab03      	add	r3, sp, #12
 8005eec:	4805      	ldr	r0, [pc, #20]	@ (8005f04 <fiprintf+0x20>)
 8005eee:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ef2:	6800      	ldr	r0, [r0, #0]
 8005ef4:	9301      	str	r3, [sp, #4]
 8005ef6:	f000 f837 	bl	8005f68 <_vfiprintf_r>
 8005efa:	b002      	add	sp, #8
 8005efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f00:	b003      	add	sp, #12
 8005f02:	4770      	bx	lr
 8005f04:	20000018 	.word	0x20000018

08005f08 <abort>:
 8005f08:	b508      	push	{r3, lr}
 8005f0a:	2006      	movs	r0, #6
 8005f0c:	f000 fa00 	bl	8006310 <raise>
 8005f10:	2001      	movs	r0, #1
 8005f12:	f7fb f811 	bl	8000f38 <_exit>

08005f16 <__sfputc_r>:
 8005f16:	6893      	ldr	r3, [r2, #8]
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	b410      	push	{r4}
 8005f1e:	6093      	str	r3, [r2, #8]
 8005f20:	da08      	bge.n	8005f34 <__sfputc_r+0x1e>
 8005f22:	6994      	ldr	r4, [r2, #24]
 8005f24:	42a3      	cmp	r3, r4
 8005f26:	db01      	blt.n	8005f2c <__sfputc_r+0x16>
 8005f28:	290a      	cmp	r1, #10
 8005f2a:	d103      	bne.n	8005f34 <__sfputc_r+0x1e>
 8005f2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f30:	f000 b932 	b.w	8006198 <__swbuf_r>
 8005f34:	6813      	ldr	r3, [r2, #0]
 8005f36:	1c58      	adds	r0, r3, #1
 8005f38:	6010      	str	r0, [r2, #0]
 8005f3a:	7019      	strb	r1, [r3, #0]
 8005f3c:	4608      	mov	r0, r1
 8005f3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <__sfputs_r>:
 8005f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f46:	4606      	mov	r6, r0
 8005f48:	460f      	mov	r7, r1
 8005f4a:	4614      	mov	r4, r2
 8005f4c:	18d5      	adds	r5, r2, r3
 8005f4e:	42ac      	cmp	r4, r5
 8005f50:	d101      	bne.n	8005f56 <__sfputs_r+0x12>
 8005f52:	2000      	movs	r0, #0
 8005f54:	e007      	b.n	8005f66 <__sfputs_r+0x22>
 8005f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f5a:	463a      	mov	r2, r7
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	f7ff ffda 	bl	8005f16 <__sfputc_r>
 8005f62:	1c43      	adds	r3, r0, #1
 8005f64:	d1f3      	bne.n	8005f4e <__sfputs_r+0xa>
 8005f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f68 <_vfiprintf_r>:
 8005f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6c:	460d      	mov	r5, r1
 8005f6e:	b09d      	sub	sp, #116	@ 0x74
 8005f70:	4614      	mov	r4, r2
 8005f72:	4698      	mov	r8, r3
 8005f74:	4606      	mov	r6, r0
 8005f76:	b118      	cbz	r0, 8005f80 <_vfiprintf_r+0x18>
 8005f78:	6a03      	ldr	r3, [r0, #32]
 8005f7a:	b90b      	cbnz	r3, 8005f80 <_vfiprintf_r+0x18>
 8005f7c:	f7fe facc 	bl	8004518 <__sinit>
 8005f80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f82:	07d9      	lsls	r1, r3, #31
 8005f84:	d405      	bmi.n	8005f92 <_vfiprintf_r+0x2a>
 8005f86:	89ab      	ldrh	r3, [r5, #12]
 8005f88:	059a      	lsls	r2, r3, #22
 8005f8a:	d402      	bmi.n	8005f92 <_vfiprintf_r+0x2a>
 8005f8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f8e:	f7fe fbba 	bl	8004706 <__retarget_lock_acquire_recursive>
 8005f92:	89ab      	ldrh	r3, [r5, #12]
 8005f94:	071b      	lsls	r3, r3, #28
 8005f96:	d501      	bpl.n	8005f9c <_vfiprintf_r+0x34>
 8005f98:	692b      	ldr	r3, [r5, #16]
 8005f9a:	b99b      	cbnz	r3, 8005fc4 <_vfiprintf_r+0x5c>
 8005f9c:	4629      	mov	r1, r5
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	f000 f938 	bl	8006214 <__swsetup_r>
 8005fa4:	b170      	cbz	r0, 8005fc4 <_vfiprintf_r+0x5c>
 8005fa6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005fa8:	07dc      	lsls	r4, r3, #31
 8005faa:	d504      	bpl.n	8005fb6 <_vfiprintf_r+0x4e>
 8005fac:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb0:	b01d      	add	sp, #116	@ 0x74
 8005fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb6:	89ab      	ldrh	r3, [r5, #12]
 8005fb8:	0598      	lsls	r0, r3, #22
 8005fba:	d4f7      	bmi.n	8005fac <_vfiprintf_r+0x44>
 8005fbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005fbe:	f7fe fba3 	bl	8004708 <__retarget_lock_release_recursive>
 8005fc2:	e7f3      	b.n	8005fac <_vfiprintf_r+0x44>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fc8:	2320      	movs	r3, #32
 8005fca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005fce:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fd2:	2330      	movs	r3, #48	@ 0x30
 8005fd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006184 <_vfiprintf_r+0x21c>
 8005fd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005fdc:	f04f 0901 	mov.w	r9, #1
 8005fe0:	4623      	mov	r3, r4
 8005fe2:	469a      	mov	sl, r3
 8005fe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fe8:	b10a      	cbz	r2, 8005fee <_vfiprintf_r+0x86>
 8005fea:	2a25      	cmp	r2, #37	@ 0x25
 8005fec:	d1f9      	bne.n	8005fe2 <_vfiprintf_r+0x7a>
 8005fee:	ebba 0b04 	subs.w	fp, sl, r4
 8005ff2:	d00b      	beq.n	800600c <_vfiprintf_r+0xa4>
 8005ff4:	465b      	mov	r3, fp
 8005ff6:	4622      	mov	r2, r4
 8005ff8:	4629      	mov	r1, r5
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	f7ff ffa2 	bl	8005f44 <__sfputs_r>
 8006000:	3001      	adds	r0, #1
 8006002:	f000 80a7 	beq.w	8006154 <_vfiprintf_r+0x1ec>
 8006006:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006008:	445a      	add	r2, fp
 800600a:	9209      	str	r2, [sp, #36]	@ 0x24
 800600c:	f89a 3000 	ldrb.w	r3, [sl]
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 809f 	beq.w	8006154 <_vfiprintf_r+0x1ec>
 8006016:	2300      	movs	r3, #0
 8006018:	f04f 32ff 	mov.w	r2, #4294967295
 800601c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006020:	f10a 0a01 	add.w	sl, sl, #1
 8006024:	9304      	str	r3, [sp, #16]
 8006026:	9307      	str	r3, [sp, #28]
 8006028:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800602c:	931a      	str	r3, [sp, #104]	@ 0x68
 800602e:	4654      	mov	r4, sl
 8006030:	2205      	movs	r2, #5
 8006032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006036:	4853      	ldr	r0, [pc, #332]	@ (8006184 <_vfiprintf_r+0x21c>)
 8006038:	f7fa f8ca 	bl	80001d0 <memchr>
 800603c:	9a04      	ldr	r2, [sp, #16]
 800603e:	b9d8      	cbnz	r0, 8006078 <_vfiprintf_r+0x110>
 8006040:	06d1      	lsls	r1, r2, #27
 8006042:	bf44      	itt	mi
 8006044:	2320      	movmi	r3, #32
 8006046:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800604a:	0713      	lsls	r3, r2, #28
 800604c:	bf44      	itt	mi
 800604e:	232b      	movmi	r3, #43	@ 0x2b
 8006050:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006054:	f89a 3000 	ldrb.w	r3, [sl]
 8006058:	2b2a      	cmp	r3, #42	@ 0x2a
 800605a:	d015      	beq.n	8006088 <_vfiprintf_r+0x120>
 800605c:	9a07      	ldr	r2, [sp, #28]
 800605e:	4654      	mov	r4, sl
 8006060:	2000      	movs	r0, #0
 8006062:	f04f 0c0a 	mov.w	ip, #10
 8006066:	4621      	mov	r1, r4
 8006068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800606c:	3b30      	subs	r3, #48	@ 0x30
 800606e:	2b09      	cmp	r3, #9
 8006070:	d94b      	bls.n	800610a <_vfiprintf_r+0x1a2>
 8006072:	b1b0      	cbz	r0, 80060a2 <_vfiprintf_r+0x13a>
 8006074:	9207      	str	r2, [sp, #28]
 8006076:	e014      	b.n	80060a2 <_vfiprintf_r+0x13a>
 8006078:	eba0 0308 	sub.w	r3, r0, r8
 800607c:	fa09 f303 	lsl.w	r3, r9, r3
 8006080:	4313      	orrs	r3, r2
 8006082:	9304      	str	r3, [sp, #16]
 8006084:	46a2      	mov	sl, r4
 8006086:	e7d2      	b.n	800602e <_vfiprintf_r+0xc6>
 8006088:	9b03      	ldr	r3, [sp, #12]
 800608a:	1d19      	adds	r1, r3, #4
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	9103      	str	r1, [sp, #12]
 8006090:	2b00      	cmp	r3, #0
 8006092:	bfbb      	ittet	lt
 8006094:	425b      	neglt	r3, r3
 8006096:	f042 0202 	orrlt.w	r2, r2, #2
 800609a:	9307      	strge	r3, [sp, #28]
 800609c:	9307      	strlt	r3, [sp, #28]
 800609e:	bfb8      	it	lt
 80060a0:	9204      	strlt	r2, [sp, #16]
 80060a2:	7823      	ldrb	r3, [r4, #0]
 80060a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80060a6:	d10a      	bne.n	80060be <_vfiprintf_r+0x156>
 80060a8:	7863      	ldrb	r3, [r4, #1]
 80060aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80060ac:	d132      	bne.n	8006114 <_vfiprintf_r+0x1ac>
 80060ae:	9b03      	ldr	r3, [sp, #12]
 80060b0:	1d1a      	adds	r2, r3, #4
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	9203      	str	r2, [sp, #12]
 80060b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80060ba:	3402      	adds	r4, #2
 80060bc:	9305      	str	r3, [sp, #20]
 80060be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006194 <_vfiprintf_r+0x22c>
 80060c2:	7821      	ldrb	r1, [r4, #0]
 80060c4:	2203      	movs	r2, #3
 80060c6:	4650      	mov	r0, sl
 80060c8:	f7fa f882 	bl	80001d0 <memchr>
 80060cc:	b138      	cbz	r0, 80060de <_vfiprintf_r+0x176>
 80060ce:	9b04      	ldr	r3, [sp, #16]
 80060d0:	eba0 000a 	sub.w	r0, r0, sl
 80060d4:	2240      	movs	r2, #64	@ 0x40
 80060d6:	4082      	lsls	r2, r0
 80060d8:	4313      	orrs	r3, r2
 80060da:	3401      	adds	r4, #1
 80060dc:	9304      	str	r3, [sp, #16]
 80060de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060e2:	4829      	ldr	r0, [pc, #164]	@ (8006188 <_vfiprintf_r+0x220>)
 80060e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80060e8:	2206      	movs	r2, #6
 80060ea:	f7fa f871 	bl	80001d0 <memchr>
 80060ee:	2800      	cmp	r0, #0
 80060f0:	d03f      	beq.n	8006172 <_vfiprintf_r+0x20a>
 80060f2:	4b26      	ldr	r3, [pc, #152]	@ (800618c <_vfiprintf_r+0x224>)
 80060f4:	bb1b      	cbnz	r3, 800613e <_vfiprintf_r+0x1d6>
 80060f6:	9b03      	ldr	r3, [sp, #12]
 80060f8:	3307      	adds	r3, #7
 80060fa:	f023 0307 	bic.w	r3, r3, #7
 80060fe:	3308      	adds	r3, #8
 8006100:	9303      	str	r3, [sp, #12]
 8006102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006104:	443b      	add	r3, r7
 8006106:	9309      	str	r3, [sp, #36]	@ 0x24
 8006108:	e76a      	b.n	8005fe0 <_vfiprintf_r+0x78>
 800610a:	fb0c 3202 	mla	r2, ip, r2, r3
 800610e:	460c      	mov	r4, r1
 8006110:	2001      	movs	r0, #1
 8006112:	e7a8      	b.n	8006066 <_vfiprintf_r+0xfe>
 8006114:	2300      	movs	r3, #0
 8006116:	3401      	adds	r4, #1
 8006118:	9305      	str	r3, [sp, #20]
 800611a:	4619      	mov	r1, r3
 800611c:	f04f 0c0a 	mov.w	ip, #10
 8006120:	4620      	mov	r0, r4
 8006122:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006126:	3a30      	subs	r2, #48	@ 0x30
 8006128:	2a09      	cmp	r2, #9
 800612a:	d903      	bls.n	8006134 <_vfiprintf_r+0x1cc>
 800612c:	2b00      	cmp	r3, #0
 800612e:	d0c6      	beq.n	80060be <_vfiprintf_r+0x156>
 8006130:	9105      	str	r1, [sp, #20]
 8006132:	e7c4      	b.n	80060be <_vfiprintf_r+0x156>
 8006134:	fb0c 2101 	mla	r1, ip, r1, r2
 8006138:	4604      	mov	r4, r0
 800613a:	2301      	movs	r3, #1
 800613c:	e7f0      	b.n	8006120 <_vfiprintf_r+0x1b8>
 800613e:	ab03      	add	r3, sp, #12
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	462a      	mov	r2, r5
 8006144:	4b12      	ldr	r3, [pc, #72]	@ (8006190 <_vfiprintf_r+0x228>)
 8006146:	a904      	add	r1, sp, #16
 8006148:	4630      	mov	r0, r6
 800614a:	f7fd fda1 	bl	8003c90 <_printf_float>
 800614e:	4607      	mov	r7, r0
 8006150:	1c78      	adds	r0, r7, #1
 8006152:	d1d6      	bne.n	8006102 <_vfiprintf_r+0x19a>
 8006154:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006156:	07d9      	lsls	r1, r3, #31
 8006158:	d405      	bmi.n	8006166 <_vfiprintf_r+0x1fe>
 800615a:	89ab      	ldrh	r3, [r5, #12]
 800615c:	059a      	lsls	r2, r3, #22
 800615e:	d402      	bmi.n	8006166 <_vfiprintf_r+0x1fe>
 8006160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006162:	f7fe fad1 	bl	8004708 <__retarget_lock_release_recursive>
 8006166:	89ab      	ldrh	r3, [r5, #12]
 8006168:	065b      	lsls	r3, r3, #25
 800616a:	f53f af1f 	bmi.w	8005fac <_vfiprintf_r+0x44>
 800616e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006170:	e71e      	b.n	8005fb0 <_vfiprintf_r+0x48>
 8006172:	ab03      	add	r3, sp, #12
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	462a      	mov	r2, r5
 8006178:	4b05      	ldr	r3, [pc, #20]	@ (8006190 <_vfiprintf_r+0x228>)
 800617a:	a904      	add	r1, sp, #16
 800617c:	4630      	mov	r0, r6
 800617e:	f7fe f81f 	bl	80041c0 <_printf_i>
 8006182:	e7e4      	b.n	800614e <_vfiprintf_r+0x1e6>
 8006184:	080067ff 	.word	0x080067ff
 8006188:	08006809 	.word	0x08006809
 800618c:	08003c91 	.word	0x08003c91
 8006190:	08005f45 	.word	0x08005f45
 8006194:	08006805 	.word	0x08006805

08006198 <__swbuf_r>:
 8006198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619a:	460e      	mov	r6, r1
 800619c:	4614      	mov	r4, r2
 800619e:	4605      	mov	r5, r0
 80061a0:	b118      	cbz	r0, 80061aa <__swbuf_r+0x12>
 80061a2:	6a03      	ldr	r3, [r0, #32]
 80061a4:	b90b      	cbnz	r3, 80061aa <__swbuf_r+0x12>
 80061a6:	f7fe f9b7 	bl	8004518 <__sinit>
 80061aa:	69a3      	ldr	r3, [r4, #24]
 80061ac:	60a3      	str	r3, [r4, #8]
 80061ae:	89a3      	ldrh	r3, [r4, #12]
 80061b0:	071a      	lsls	r2, r3, #28
 80061b2:	d501      	bpl.n	80061b8 <__swbuf_r+0x20>
 80061b4:	6923      	ldr	r3, [r4, #16]
 80061b6:	b943      	cbnz	r3, 80061ca <__swbuf_r+0x32>
 80061b8:	4621      	mov	r1, r4
 80061ba:	4628      	mov	r0, r5
 80061bc:	f000 f82a 	bl	8006214 <__swsetup_r>
 80061c0:	b118      	cbz	r0, 80061ca <__swbuf_r+0x32>
 80061c2:	f04f 37ff 	mov.w	r7, #4294967295
 80061c6:	4638      	mov	r0, r7
 80061c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	6922      	ldr	r2, [r4, #16]
 80061ce:	1a98      	subs	r0, r3, r2
 80061d0:	6963      	ldr	r3, [r4, #20]
 80061d2:	b2f6      	uxtb	r6, r6
 80061d4:	4283      	cmp	r3, r0
 80061d6:	4637      	mov	r7, r6
 80061d8:	dc05      	bgt.n	80061e6 <__swbuf_r+0x4e>
 80061da:	4621      	mov	r1, r4
 80061dc:	4628      	mov	r0, r5
 80061de:	f7ff fde9 	bl	8005db4 <_fflush_r>
 80061e2:	2800      	cmp	r0, #0
 80061e4:	d1ed      	bne.n	80061c2 <__swbuf_r+0x2a>
 80061e6:	68a3      	ldr	r3, [r4, #8]
 80061e8:	3b01      	subs	r3, #1
 80061ea:	60a3      	str	r3, [r4, #8]
 80061ec:	6823      	ldr	r3, [r4, #0]
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	6022      	str	r2, [r4, #0]
 80061f2:	701e      	strb	r6, [r3, #0]
 80061f4:	6962      	ldr	r2, [r4, #20]
 80061f6:	1c43      	adds	r3, r0, #1
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d004      	beq.n	8006206 <__swbuf_r+0x6e>
 80061fc:	89a3      	ldrh	r3, [r4, #12]
 80061fe:	07db      	lsls	r3, r3, #31
 8006200:	d5e1      	bpl.n	80061c6 <__swbuf_r+0x2e>
 8006202:	2e0a      	cmp	r6, #10
 8006204:	d1df      	bne.n	80061c6 <__swbuf_r+0x2e>
 8006206:	4621      	mov	r1, r4
 8006208:	4628      	mov	r0, r5
 800620a:	f7ff fdd3 	bl	8005db4 <_fflush_r>
 800620e:	2800      	cmp	r0, #0
 8006210:	d0d9      	beq.n	80061c6 <__swbuf_r+0x2e>
 8006212:	e7d6      	b.n	80061c2 <__swbuf_r+0x2a>

08006214 <__swsetup_r>:
 8006214:	b538      	push	{r3, r4, r5, lr}
 8006216:	4b29      	ldr	r3, [pc, #164]	@ (80062bc <__swsetup_r+0xa8>)
 8006218:	4605      	mov	r5, r0
 800621a:	6818      	ldr	r0, [r3, #0]
 800621c:	460c      	mov	r4, r1
 800621e:	b118      	cbz	r0, 8006228 <__swsetup_r+0x14>
 8006220:	6a03      	ldr	r3, [r0, #32]
 8006222:	b90b      	cbnz	r3, 8006228 <__swsetup_r+0x14>
 8006224:	f7fe f978 	bl	8004518 <__sinit>
 8006228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800622c:	0719      	lsls	r1, r3, #28
 800622e:	d422      	bmi.n	8006276 <__swsetup_r+0x62>
 8006230:	06da      	lsls	r2, r3, #27
 8006232:	d407      	bmi.n	8006244 <__swsetup_r+0x30>
 8006234:	2209      	movs	r2, #9
 8006236:	602a      	str	r2, [r5, #0]
 8006238:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800623c:	81a3      	strh	r3, [r4, #12]
 800623e:	f04f 30ff 	mov.w	r0, #4294967295
 8006242:	e033      	b.n	80062ac <__swsetup_r+0x98>
 8006244:	0758      	lsls	r0, r3, #29
 8006246:	d512      	bpl.n	800626e <__swsetup_r+0x5a>
 8006248:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800624a:	b141      	cbz	r1, 800625e <__swsetup_r+0x4a>
 800624c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006250:	4299      	cmp	r1, r3
 8006252:	d002      	beq.n	800625a <__swsetup_r+0x46>
 8006254:	4628      	mov	r0, r5
 8006256:	f7ff f8a7 	bl	80053a8 <_free_r>
 800625a:	2300      	movs	r3, #0
 800625c:	6363      	str	r3, [r4, #52]	@ 0x34
 800625e:	89a3      	ldrh	r3, [r4, #12]
 8006260:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006264:	81a3      	strh	r3, [r4, #12]
 8006266:	2300      	movs	r3, #0
 8006268:	6063      	str	r3, [r4, #4]
 800626a:	6923      	ldr	r3, [r4, #16]
 800626c:	6023      	str	r3, [r4, #0]
 800626e:	89a3      	ldrh	r3, [r4, #12]
 8006270:	f043 0308 	orr.w	r3, r3, #8
 8006274:	81a3      	strh	r3, [r4, #12]
 8006276:	6923      	ldr	r3, [r4, #16]
 8006278:	b94b      	cbnz	r3, 800628e <__swsetup_r+0x7a>
 800627a:	89a3      	ldrh	r3, [r4, #12]
 800627c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006280:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006284:	d003      	beq.n	800628e <__swsetup_r+0x7a>
 8006286:	4621      	mov	r1, r4
 8006288:	4628      	mov	r0, r5
 800628a:	f000 f883 	bl	8006394 <__smakebuf_r>
 800628e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006292:	f013 0201 	ands.w	r2, r3, #1
 8006296:	d00a      	beq.n	80062ae <__swsetup_r+0x9a>
 8006298:	2200      	movs	r2, #0
 800629a:	60a2      	str	r2, [r4, #8]
 800629c:	6962      	ldr	r2, [r4, #20]
 800629e:	4252      	negs	r2, r2
 80062a0:	61a2      	str	r2, [r4, #24]
 80062a2:	6922      	ldr	r2, [r4, #16]
 80062a4:	b942      	cbnz	r2, 80062b8 <__swsetup_r+0xa4>
 80062a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80062aa:	d1c5      	bne.n	8006238 <__swsetup_r+0x24>
 80062ac:	bd38      	pop	{r3, r4, r5, pc}
 80062ae:	0799      	lsls	r1, r3, #30
 80062b0:	bf58      	it	pl
 80062b2:	6962      	ldrpl	r2, [r4, #20]
 80062b4:	60a2      	str	r2, [r4, #8]
 80062b6:	e7f4      	b.n	80062a2 <__swsetup_r+0x8e>
 80062b8:	2000      	movs	r0, #0
 80062ba:	e7f7      	b.n	80062ac <__swsetup_r+0x98>
 80062bc:	20000018 	.word	0x20000018

080062c0 <_raise_r>:
 80062c0:	291f      	cmp	r1, #31
 80062c2:	b538      	push	{r3, r4, r5, lr}
 80062c4:	4605      	mov	r5, r0
 80062c6:	460c      	mov	r4, r1
 80062c8:	d904      	bls.n	80062d4 <_raise_r+0x14>
 80062ca:	2316      	movs	r3, #22
 80062cc:	6003      	str	r3, [r0, #0]
 80062ce:	f04f 30ff 	mov.w	r0, #4294967295
 80062d2:	bd38      	pop	{r3, r4, r5, pc}
 80062d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80062d6:	b112      	cbz	r2, 80062de <_raise_r+0x1e>
 80062d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80062dc:	b94b      	cbnz	r3, 80062f2 <_raise_r+0x32>
 80062de:	4628      	mov	r0, r5
 80062e0:	f000 f830 	bl	8006344 <_getpid_r>
 80062e4:	4622      	mov	r2, r4
 80062e6:	4601      	mov	r1, r0
 80062e8:	4628      	mov	r0, r5
 80062ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062ee:	f000 b817 	b.w	8006320 <_kill_r>
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d00a      	beq.n	800630c <_raise_r+0x4c>
 80062f6:	1c59      	adds	r1, r3, #1
 80062f8:	d103      	bne.n	8006302 <_raise_r+0x42>
 80062fa:	2316      	movs	r3, #22
 80062fc:	6003      	str	r3, [r0, #0]
 80062fe:	2001      	movs	r0, #1
 8006300:	e7e7      	b.n	80062d2 <_raise_r+0x12>
 8006302:	2100      	movs	r1, #0
 8006304:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006308:	4620      	mov	r0, r4
 800630a:	4798      	blx	r3
 800630c:	2000      	movs	r0, #0
 800630e:	e7e0      	b.n	80062d2 <_raise_r+0x12>

08006310 <raise>:
 8006310:	4b02      	ldr	r3, [pc, #8]	@ (800631c <raise+0xc>)
 8006312:	4601      	mov	r1, r0
 8006314:	6818      	ldr	r0, [r3, #0]
 8006316:	f7ff bfd3 	b.w	80062c0 <_raise_r>
 800631a:	bf00      	nop
 800631c:	20000018 	.word	0x20000018

08006320 <_kill_r>:
 8006320:	b538      	push	{r3, r4, r5, lr}
 8006322:	4d07      	ldr	r5, [pc, #28]	@ (8006340 <_kill_r+0x20>)
 8006324:	2300      	movs	r3, #0
 8006326:	4604      	mov	r4, r0
 8006328:	4608      	mov	r0, r1
 800632a:	4611      	mov	r1, r2
 800632c:	602b      	str	r3, [r5, #0]
 800632e:	f7fa fdf3 	bl	8000f18 <_kill>
 8006332:	1c43      	adds	r3, r0, #1
 8006334:	d102      	bne.n	800633c <_kill_r+0x1c>
 8006336:	682b      	ldr	r3, [r5, #0]
 8006338:	b103      	cbz	r3, 800633c <_kill_r+0x1c>
 800633a:	6023      	str	r3, [r4, #0]
 800633c:	bd38      	pop	{r3, r4, r5, pc}
 800633e:	bf00      	nop
 8006340:	20000404 	.word	0x20000404

08006344 <_getpid_r>:
 8006344:	f7fa bde0 	b.w	8000f08 <_getpid>

08006348 <__swhatbuf_r>:
 8006348:	b570      	push	{r4, r5, r6, lr}
 800634a:	460c      	mov	r4, r1
 800634c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006350:	2900      	cmp	r1, #0
 8006352:	b096      	sub	sp, #88	@ 0x58
 8006354:	4615      	mov	r5, r2
 8006356:	461e      	mov	r6, r3
 8006358:	da0d      	bge.n	8006376 <__swhatbuf_r+0x2e>
 800635a:	89a3      	ldrh	r3, [r4, #12]
 800635c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006360:	f04f 0100 	mov.w	r1, #0
 8006364:	bf14      	ite	ne
 8006366:	2340      	movne	r3, #64	@ 0x40
 8006368:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800636c:	2000      	movs	r0, #0
 800636e:	6031      	str	r1, [r6, #0]
 8006370:	602b      	str	r3, [r5, #0]
 8006372:	b016      	add	sp, #88	@ 0x58
 8006374:	bd70      	pop	{r4, r5, r6, pc}
 8006376:	466a      	mov	r2, sp
 8006378:	f000 f848 	bl	800640c <_fstat_r>
 800637c:	2800      	cmp	r0, #0
 800637e:	dbec      	blt.n	800635a <__swhatbuf_r+0x12>
 8006380:	9901      	ldr	r1, [sp, #4]
 8006382:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006386:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800638a:	4259      	negs	r1, r3
 800638c:	4159      	adcs	r1, r3
 800638e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006392:	e7eb      	b.n	800636c <__swhatbuf_r+0x24>

08006394 <__smakebuf_r>:
 8006394:	898b      	ldrh	r3, [r1, #12]
 8006396:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006398:	079d      	lsls	r5, r3, #30
 800639a:	4606      	mov	r6, r0
 800639c:	460c      	mov	r4, r1
 800639e:	d507      	bpl.n	80063b0 <__smakebuf_r+0x1c>
 80063a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80063a4:	6023      	str	r3, [r4, #0]
 80063a6:	6123      	str	r3, [r4, #16]
 80063a8:	2301      	movs	r3, #1
 80063aa:	6163      	str	r3, [r4, #20]
 80063ac:	b003      	add	sp, #12
 80063ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063b0:	ab01      	add	r3, sp, #4
 80063b2:	466a      	mov	r2, sp
 80063b4:	f7ff ffc8 	bl	8006348 <__swhatbuf_r>
 80063b8:	9f00      	ldr	r7, [sp, #0]
 80063ba:	4605      	mov	r5, r0
 80063bc:	4639      	mov	r1, r7
 80063be:	4630      	mov	r0, r6
 80063c0:	f7ff f866 	bl	8005490 <_malloc_r>
 80063c4:	b948      	cbnz	r0, 80063da <__smakebuf_r+0x46>
 80063c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ca:	059a      	lsls	r2, r3, #22
 80063cc:	d4ee      	bmi.n	80063ac <__smakebuf_r+0x18>
 80063ce:	f023 0303 	bic.w	r3, r3, #3
 80063d2:	f043 0302 	orr.w	r3, r3, #2
 80063d6:	81a3      	strh	r3, [r4, #12]
 80063d8:	e7e2      	b.n	80063a0 <__smakebuf_r+0xc>
 80063da:	89a3      	ldrh	r3, [r4, #12]
 80063dc:	6020      	str	r0, [r4, #0]
 80063de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063e2:	81a3      	strh	r3, [r4, #12]
 80063e4:	9b01      	ldr	r3, [sp, #4]
 80063e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80063ea:	b15b      	cbz	r3, 8006404 <__smakebuf_r+0x70>
 80063ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063f0:	4630      	mov	r0, r6
 80063f2:	f000 f81d 	bl	8006430 <_isatty_r>
 80063f6:	b128      	cbz	r0, 8006404 <__smakebuf_r+0x70>
 80063f8:	89a3      	ldrh	r3, [r4, #12]
 80063fa:	f023 0303 	bic.w	r3, r3, #3
 80063fe:	f043 0301 	orr.w	r3, r3, #1
 8006402:	81a3      	strh	r3, [r4, #12]
 8006404:	89a3      	ldrh	r3, [r4, #12]
 8006406:	431d      	orrs	r5, r3
 8006408:	81a5      	strh	r5, [r4, #12]
 800640a:	e7cf      	b.n	80063ac <__smakebuf_r+0x18>

0800640c <_fstat_r>:
 800640c:	b538      	push	{r3, r4, r5, lr}
 800640e:	4d07      	ldr	r5, [pc, #28]	@ (800642c <_fstat_r+0x20>)
 8006410:	2300      	movs	r3, #0
 8006412:	4604      	mov	r4, r0
 8006414:	4608      	mov	r0, r1
 8006416:	4611      	mov	r1, r2
 8006418:	602b      	str	r3, [r5, #0]
 800641a:	f7fa fddd 	bl	8000fd8 <_fstat>
 800641e:	1c43      	adds	r3, r0, #1
 8006420:	d102      	bne.n	8006428 <_fstat_r+0x1c>
 8006422:	682b      	ldr	r3, [r5, #0]
 8006424:	b103      	cbz	r3, 8006428 <_fstat_r+0x1c>
 8006426:	6023      	str	r3, [r4, #0]
 8006428:	bd38      	pop	{r3, r4, r5, pc}
 800642a:	bf00      	nop
 800642c:	20000404 	.word	0x20000404

08006430 <_isatty_r>:
 8006430:	b538      	push	{r3, r4, r5, lr}
 8006432:	4d06      	ldr	r5, [pc, #24]	@ (800644c <_isatty_r+0x1c>)
 8006434:	2300      	movs	r3, #0
 8006436:	4604      	mov	r4, r0
 8006438:	4608      	mov	r0, r1
 800643a:	602b      	str	r3, [r5, #0]
 800643c:	f7fa fddc 	bl	8000ff8 <_isatty>
 8006440:	1c43      	adds	r3, r0, #1
 8006442:	d102      	bne.n	800644a <_isatty_r+0x1a>
 8006444:	682b      	ldr	r3, [r5, #0]
 8006446:	b103      	cbz	r3, 800644a <_isatty_r+0x1a>
 8006448:	6023      	str	r3, [r4, #0]
 800644a:	bd38      	pop	{r3, r4, r5, pc}
 800644c:	20000404 	.word	0x20000404

08006450 <_init>:
 8006450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006452:	bf00      	nop
 8006454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006456:	bc08      	pop	{r3}
 8006458:	469e      	mov	lr, r3
 800645a:	4770      	bx	lr

0800645c <_fini>:
 800645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645e:	bf00      	nop
 8006460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006462:	bc08      	pop	{r3}
 8006464:	469e      	mov	lr, r3
 8006466:	4770      	bx	lr
