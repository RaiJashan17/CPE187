
Lab6Part1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003634  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080037bc  080037bc  000047bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003800  08003800  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003800  08003800  00004800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003808  08003808  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003808  08003808  00004808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800380c  0800380c  0000480c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003810  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000fc  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000108  20000108  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b720  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018c8  00000000  00000000  0001075c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000940  00000000  00000000  00012028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000739  00000000  00000000  00012968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a59f  00000000  00000000  000130a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d556  00000000  00000000  0002d640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009afdd  00000000  00000000  0003ab96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d5b73  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000025c0  00000000  00000000  000d5bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  000d8178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080037a4 	.word	0x080037a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080037a4 	.word	0x080037a4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b08c      	sub	sp, #48	@ 0x30
 80001dc:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
	char wmsg[] ="Jashan Rai";
 80001de:	4a25      	ldr	r2, [pc, #148]	@ (8000274 <main+0x9c>)
 80001e0:	f107 0314 	add.w	r3, r7, #20
 80001e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80001e6:	c303      	stmia	r3!, {r0, r1}
 80001e8:	801a      	strh	r2, [r3, #0]
 80001ea:	3302      	adds	r3, #2
 80001ec:	0c12      	lsrs	r2, r2, #16
 80001ee:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f0:	f000 fa6a 	bl	80006c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f4:	f000 f844 	bl	8000280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f8:	f000 f904 	bl	8000404 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001fc:	f000 f8d2 	bl	80003a4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000200:	f000 f890 	bl	8000324 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0x1AAA, I2C_MEMADD_SIZE_16BIT, (uint8_t*)wmsg,
  strlen(wmsg)+1, HAL_MAX_DELAY);
 8000204:	f107 0314 	add.w	r3, r7, #20
 8000208:	4618      	mov	r0, r3
 800020a:	f7ff ffdd 	bl	80001c8 <strlen>
 800020e:	4603      	mov	r3, r0
  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0x1AAA, I2C_MEMADD_SIZE_16BIT, (uint8_t*)wmsg,
 8000210:	b29b      	uxth	r3, r3
 8000212:	3301      	adds	r3, #1
 8000214:	b29b      	uxth	r3, r3
 8000216:	f04f 32ff 	mov.w	r2, #4294967295
 800021a:	9202      	str	r2, [sp, #8]
 800021c:	9301      	str	r3, [sp, #4]
 800021e:	f107 0314 	add.w	r3, r7, #20
 8000222:	9300      	str	r3, [sp, #0]
 8000224:	2302      	movs	r3, #2
 8000226:	f641 22aa 	movw	r2, #6826	@ 0x1aaa
 800022a:	21a0      	movs	r1, #160	@ 0xa0
 800022c:	4812      	ldr	r0, [pc, #72]	@ (8000278 <main+0xa0>)
 800022e:	f000 fde1 	bl	8000df4 <HAL_I2C_Mem_Write>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 8000232:	2108      	movs	r1, #8
 8000234:	4811      	ldr	r0, [pc, #68]	@ (800027c <main+0xa4>)
 8000236:	f000 fd29 	bl	8000c8c <HAL_GPIO_ReadPin>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d0f8      	beq.n	8000232 <main+0x5a>
	  {
	  HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0x1AAA, I2C_MEMADD_SIZE_16BIT,
	  (uint8_t*)rmsg, strlen(wmsg)+1, HAL_MAX_DELAY);
 8000240:	f107 0314 	add.w	r3, r7, #20
 8000244:	4618      	mov	r0, r3
 8000246:	f7ff ffbf 	bl	80001c8 <strlen>
 800024a:	4603      	mov	r3, r0
	  HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0x1AAA, I2C_MEMADD_SIZE_16BIT,
 800024c:	b29b      	uxth	r3, r3
 800024e:	3301      	adds	r3, #1
 8000250:	b29b      	uxth	r3, r3
 8000252:	f04f 32ff 	mov.w	r2, #4294967295
 8000256:	9202      	str	r2, [sp, #8]
 8000258:	9301      	str	r3, [sp, #4]
 800025a:	463b      	mov	r3, r7
 800025c:	9300      	str	r3, [sp, #0]
 800025e:	2302      	movs	r3, #2
 8000260:	f641 22aa 	movw	r2, #6826	@ 0x1aaa
 8000264:	21a0      	movs	r1, #160	@ 0xa0
 8000266:	4804      	ldr	r0, [pc, #16]	@ (8000278 <main+0xa0>)
 8000268:	f000 fed8 	bl	800101c <HAL_I2C_Mem_Read>
	  HAL_Delay(100);
 800026c:	2064      	movs	r0, #100	@ 0x64
 800026e:	f000 fa91 	bl	8000794 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 8000272:	e7de      	b.n	8000232 <main+0x5a>
 8000274:	080037bc 	.word	0x080037bc
 8000278:	20000028 	.word	0x20000028
 800027c:	48000400 	.word	0x48000400

08000280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b096      	sub	sp, #88	@ 0x58
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800028a:	2228      	movs	r2, #40	@ 0x28
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f003 fa5b 	bl	800374a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000294:	f107 031c 	add.w	r3, r7, #28
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	605a      	str	r2, [r3, #4]
 800029e:	609a      	str	r2, [r3, #8]
 80002a0:	60da      	str	r2, [r3, #12]
 80002a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
 80002b0:	611a      	str	r2, [r3, #16]
 80002b2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b4:	2302      	movs	r3, #2
 80002b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b8:	2301      	movs	r3, #1
 80002ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002bc:	2310      	movs	r3, #16
 80002be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002c0:	2300      	movs	r3, #0
 80002c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80002c8:	4618      	mov	r0, r3
 80002ca:	f001 fb1b 	bl	8001904 <HAL_RCC_OscConfig>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002d4:	f000 f8da 	bl	800048c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d8:	230f      	movs	r3, #15
 80002da:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002dc:	2300      	movs	r3, #0
 80002de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ec:	f107 031c 	add.w	r3, r7, #28
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f002 fb44 	bl	8002980 <HAL_RCC_ClockConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002fe:	f000 f8c5 	bl	800048c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000302:	2320      	movs	r3, #32
 8000304:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000306:	2300      	movs	r3, #0
 8000308:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4618      	mov	r0, r3
 800030e:	f002 fd57 	bl	8002dc0 <HAL_RCCEx_PeriphCLKConfig>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000318:	f000 f8b8 	bl	800048c <Error_Handler>
  }
}
 800031c:	bf00      	nop
 800031e:	3758      	adds	r7, #88	@ 0x58
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000328:	4b1b      	ldr	r3, [pc, #108]	@ (8000398 <MX_I2C1_Init+0x74>)
 800032a:	4a1c      	ldr	r2, [pc, #112]	@ (800039c <MX_I2C1_Init+0x78>)
 800032c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800032e:	4b1a      	ldr	r3, [pc, #104]	@ (8000398 <MX_I2C1_Init+0x74>)
 8000330:	4a1b      	ldr	r2, [pc, #108]	@ (80003a0 <MX_I2C1_Init+0x7c>)
 8000332:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000334:	4b18      	ldr	r3, [pc, #96]	@ (8000398 <MX_I2C1_Init+0x74>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800033a:	4b17      	ldr	r3, [pc, #92]	@ (8000398 <MX_I2C1_Init+0x74>)
 800033c:	2201      	movs	r2, #1
 800033e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000340:	4b15      	ldr	r3, [pc, #84]	@ (8000398 <MX_I2C1_Init+0x74>)
 8000342:	2200      	movs	r2, #0
 8000344:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000346:	4b14      	ldr	r3, [pc, #80]	@ (8000398 <MX_I2C1_Init+0x74>)
 8000348:	2200      	movs	r2, #0
 800034a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800034c:	4b12      	ldr	r3, [pc, #72]	@ (8000398 <MX_I2C1_Init+0x74>)
 800034e:	2200      	movs	r2, #0
 8000350:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000352:	4b11      	ldr	r3, [pc, #68]	@ (8000398 <MX_I2C1_Init+0x74>)
 8000354:	2200      	movs	r2, #0
 8000356:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000358:	4b0f      	ldr	r3, [pc, #60]	@ (8000398 <MX_I2C1_Init+0x74>)
 800035a:	2200      	movs	r2, #0
 800035c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800035e:	480e      	ldr	r0, [pc, #56]	@ (8000398 <MX_I2C1_Init+0x74>)
 8000360:	f000 fcac 	bl	8000cbc <HAL_I2C_Init>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800036a:	f000 f88f 	bl	800048c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800036e:	2100      	movs	r1, #0
 8000370:	4809      	ldr	r0, [pc, #36]	@ (8000398 <MX_I2C1_Init+0x74>)
 8000372:	f001 fa2f 	bl	80017d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800037c:	f000 f886 	bl	800048c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000380:	2100      	movs	r1, #0
 8000382:	4805      	ldr	r0, [pc, #20]	@ (8000398 <MX_I2C1_Init+0x74>)
 8000384:	f001 fa71 	bl	800186a <HAL_I2CEx_ConfigDigitalFilter>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800038e:	f000 f87d 	bl	800048c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	20000028 	.word	0x20000028
 800039c:	40005400 	.word	0x40005400
 80003a0:	2000090e 	.word	0x2000090e

080003a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003a8:	4b14      	ldr	r3, [pc, #80]	@ (80003fc <MX_USART2_UART_Init+0x58>)
 80003aa:	4a15      	ldr	r2, [pc, #84]	@ (8000400 <MX_USART2_UART_Init+0x5c>)
 80003ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003ae:	4b13      	ldr	r3, [pc, #76]	@ (80003fc <MX_USART2_UART_Init+0x58>)
 80003b0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80003b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003b6:	4b11      	ldr	r3, [pc, #68]	@ (80003fc <MX_USART2_UART_Init+0x58>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <MX_USART2_UART_Init+0x58>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003c2:	4b0e      	ldr	r3, [pc, #56]	@ (80003fc <MX_USART2_UART_Init+0x58>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003c8:	4b0c      	ldr	r3, [pc, #48]	@ (80003fc <MX_USART2_UART_Init+0x58>)
 80003ca:	220c      	movs	r2, #12
 80003cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ce:	4b0b      	ldr	r3, [pc, #44]	@ (80003fc <MX_USART2_UART_Init+0x58>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d4:	4b09      	ldr	r3, [pc, #36]	@ (80003fc <MX_USART2_UART_Init+0x58>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003da:	4b08      	ldr	r3, [pc, #32]	@ (80003fc <MX_USART2_UART_Init+0x58>)
 80003dc:	2200      	movs	r2, #0
 80003de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003e0:	4b06      	ldr	r3, [pc, #24]	@ (80003fc <MX_USART2_UART_Init+0x58>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003e6:	4805      	ldr	r0, [pc, #20]	@ (80003fc <MX_USART2_UART_Init+0x58>)
 80003e8:	f002 fe10 	bl	800300c <HAL_UART_Init>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003f2:	f000 f84b 	bl	800048c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	2000007c 	.word	0x2000007c
 8000400:	40004400 	.word	0x40004400

08000404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040a:	f107 030c 	add.w	r3, r7, #12
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800041a:	4b1a      	ldr	r3, [pc, #104]	@ (8000484 <MX_GPIO_Init+0x80>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a19      	ldr	r2, [pc, #100]	@ (8000484 <MX_GPIO_Init+0x80>)
 8000420:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b17      	ldr	r3, [pc, #92]	@ (8000484 <MX_GPIO_Init+0x80>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800042e:	60bb      	str	r3, [r7, #8]
 8000430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000432:	4b14      	ldr	r3, [pc, #80]	@ (8000484 <MX_GPIO_Init+0x80>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a13      	ldr	r2, [pc, #76]	@ (8000484 <MX_GPIO_Init+0x80>)
 8000438:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800043c:	6153      	str	r3, [r2, #20]
 800043e:	4b11      	ldr	r3, [pc, #68]	@ (8000484 <MX_GPIO_Init+0x80>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044a:	4b0e      	ldr	r3, [pc, #56]	@ (8000484 <MX_GPIO_Init+0x80>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a0d      	ldr	r2, [pc, #52]	@ (8000484 <MX_GPIO_Init+0x80>)
 8000450:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000454:	6153      	str	r3, [r2, #20]
 8000456:	4b0b      	ldr	r3, [pc, #44]	@ (8000484 <MX_GPIO_Init+0x80>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800045e:	603b      	str	r3, [r7, #0]
 8000460:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000462:	2308      	movs	r3, #8
 8000464:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000466:	2300      	movs	r3, #0
 8000468:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800046e:	f107 030c 	add.w	r3, r7, #12
 8000472:	4619      	mov	r1, r3
 8000474:	4804      	ldr	r0, [pc, #16]	@ (8000488 <MX_GPIO_Init+0x84>)
 8000476:	f000 fa97 	bl	80009a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800047a:	bf00      	nop
 800047c:	3720      	adds	r7, #32
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40021000 	.word	0x40021000
 8000488:	48000400 	.word	0x48000400

0800048c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000490:	b672      	cpsid	i
}
 8000492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <Error_Handler+0x8>

08000498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800049e:	4b0f      	ldr	r3, [pc, #60]	@ (80004dc <HAL_MspInit+0x44>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	4a0e      	ldr	r2, [pc, #56]	@ (80004dc <HAL_MspInit+0x44>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	6193      	str	r3, [r2, #24]
 80004aa:	4b0c      	ldr	r3, [pc, #48]	@ (80004dc <HAL_MspInit+0x44>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b6:	4b09      	ldr	r3, [pc, #36]	@ (80004dc <HAL_MspInit+0x44>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	4a08      	ldr	r2, [pc, #32]	@ (80004dc <HAL_MspInit+0x44>)
 80004bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004c0:	61d3      	str	r3, [r2, #28]
 80004c2:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <HAL_MspInit+0x44>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004ca:	603b      	str	r3, [r7, #0]
 80004cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40021000 	.word	0x40021000

080004e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08a      	sub	sp, #40	@ 0x28
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e8:	f107 0314 	add.w	r3, r7, #20
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
 80004f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a17      	ldr	r2, [pc, #92]	@ (800055c <HAL_I2C_MspInit+0x7c>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d127      	bne.n	8000552 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000502:	4b17      	ldr	r3, [pc, #92]	@ (8000560 <HAL_I2C_MspInit+0x80>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	4a16      	ldr	r2, [pc, #88]	@ (8000560 <HAL_I2C_MspInit+0x80>)
 8000508:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800050c:	6153      	str	r3, [r2, #20]
 800050e:	4b14      	ldr	r3, [pc, #80]	@ (8000560 <HAL_I2C_MspInit+0x80>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000516:	613b      	str	r3, [r7, #16]
 8000518:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800051a:	23c0      	movs	r3, #192	@ 0xc0
 800051c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800051e:	2312      	movs	r3, #18
 8000520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	2300      	movs	r3, #0
 8000524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000526:	2303      	movs	r3, #3
 8000528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800052a:	2304      	movs	r3, #4
 800052c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	4619      	mov	r1, r3
 8000534:	480b      	ldr	r0, [pc, #44]	@ (8000564 <HAL_I2C_MspInit+0x84>)
 8000536:	f000 fa37 	bl	80009a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800053a:	4b09      	ldr	r3, [pc, #36]	@ (8000560 <HAL_I2C_MspInit+0x80>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	4a08      	ldr	r2, [pc, #32]	@ (8000560 <HAL_I2C_MspInit+0x80>)
 8000540:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000544:	61d3      	str	r3, [r2, #28]
 8000546:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <HAL_I2C_MspInit+0x80>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000552:	bf00      	nop
 8000554:	3728      	adds	r7, #40	@ 0x28
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40005400 	.word	0x40005400
 8000560:	40021000 	.word	0x40021000
 8000564:	48000400 	.word	0x48000400

08000568 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	@ 0x28
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a18      	ldr	r2, [pc, #96]	@ (80005e8 <HAL_UART_MspInit+0x80>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d129      	bne.n	80005de <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800058a:	4b18      	ldr	r3, [pc, #96]	@ (80005ec <HAL_UART_MspInit+0x84>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	4a17      	ldr	r2, [pc, #92]	@ (80005ec <HAL_UART_MspInit+0x84>)
 8000590:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000594:	61d3      	str	r3, [r2, #28]
 8000596:	4b15      	ldr	r3, [pc, #84]	@ (80005ec <HAL_UART_MspInit+0x84>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	4b12      	ldr	r3, [pc, #72]	@ (80005ec <HAL_UART_MspInit+0x84>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	4a11      	ldr	r2, [pc, #68]	@ (80005ec <HAL_UART_MspInit+0x84>)
 80005a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005ac:	6153      	str	r3, [r2, #20]
 80005ae:	4b0f      	ldr	r3, [pc, #60]	@ (80005ec <HAL_UART_MspInit+0x84>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80005ba:	f248 0304 	movw	r3, #32772	@ 0x8004
 80005be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c0:	2302      	movs	r3, #2
 80005c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c8:	2303      	movs	r3, #3
 80005ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005cc:	2307      	movs	r3, #7
 80005ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	4619      	mov	r1, r3
 80005d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005da:	f000 f9e5 	bl	80009a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005de:	bf00      	nop
 80005e0:	3728      	adds	r7, #40	@ 0x28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40004400 	.word	0x40004400
 80005ec:	40021000 	.word	0x40021000

080005f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <NMI_Handler+0x4>

080005f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <HardFault_Handler+0x4>

08000600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <MemManage_Handler+0x4>

08000608 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <BusFault_Handler+0x4>

08000610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <UsageFault_Handler+0x4>

08000618 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr

08000642 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000646:	f000 f885 	bl	8000754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
	...

08000650 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <SystemInit+0x20>)
 8000656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800065a:	4a05      	ldr	r2, [pc, #20]	@ (8000670 <SystemInit+0x20>)
 800065c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000660:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000674:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006ac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000678:	f7ff ffea 	bl	8000650 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800067c:	480c      	ldr	r0, [pc, #48]	@ (80006b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800067e:	490d      	ldr	r1, [pc, #52]	@ (80006b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000680:	4a0d      	ldr	r2, [pc, #52]	@ (80006b8 <LoopForever+0xe>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000684:	e002      	b.n	800068c <LoopCopyDataInit>

08000686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800068a:	3304      	adds	r3, #4

0800068c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800068c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800068e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000690:	d3f9      	bcc.n	8000686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000692:	4a0a      	ldr	r2, [pc, #40]	@ (80006bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000694:	4c0a      	ldr	r4, [pc, #40]	@ (80006c0 <LoopForever+0x16>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000698:	e001      	b.n	800069e <LoopFillZerobss>

0800069a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800069a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800069c:	3204      	adds	r2, #4

0800069e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800069e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a0:	d3fb      	bcc.n	800069a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006a2:	f003 f85b 	bl	800375c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006a6:	f7ff fd97 	bl	80001d8 <main>

080006aa <LoopForever>:

LoopForever:
    b LoopForever
 80006aa:	e7fe      	b.n	80006aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006ac:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80006b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006b8:	08003810 	.word	0x08003810
  ldr r2, =_sbss
 80006bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006c0:	20000108 	.word	0x20000108

080006c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006c4:	e7fe      	b.n	80006c4 <ADC1_2_IRQHandler>
	...

080006c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006cc:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <HAL_Init+0x28>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a07      	ldr	r2, [pc, #28]	@ (80006f0 <HAL_Init+0x28>)
 80006d2:	f043 0310 	orr.w	r3, r3, #16
 80006d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d8:	2003      	movs	r0, #3
 80006da:	f000 f931 	bl	8000940 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006de:	2000      	movs	r0, #0
 80006e0:	f000 f808 	bl	80006f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006e4:	f7ff fed8 	bl	8000498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40022000 	.word	0x40022000

080006f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006fc:	4b12      	ldr	r3, [pc, #72]	@ (8000748 <HAL_InitTick+0x54>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <HAL_InitTick+0x58>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4619      	mov	r1, r3
 8000706:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800070a:	fbb3 f3f1 	udiv	r3, r3, r1
 800070e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000712:	4618      	mov	r0, r3
 8000714:	f000 f93b 	bl	800098e <HAL_SYSTICK_Config>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800071e:	2301      	movs	r3, #1
 8000720:	e00e      	b.n	8000740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2b0f      	cmp	r3, #15
 8000726:	d80a      	bhi.n	800073e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000728:	2200      	movs	r2, #0
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	f04f 30ff 	mov.w	r0, #4294967295
 8000730:	f000 f911 	bl	8000956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000734:	4a06      	ldr	r2, [pc, #24]	@ (8000750 <HAL_InitTick+0x5c>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800073a:	2300      	movs	r3, #0
 800073c:	e000      	b.n	8000740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800073e:	2301      	movs	r3, #1
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000000 	.word	0x20000000
 800074c:	20000008 	.word	0x20000008
 8000750:	20000004 	.word	0x20000004

08000754 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000758:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <HAL_IncTick+0x20>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	461a      	mov	r2, r3
 800075e:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <HAL_IncTick+0x24>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4413      	add	r3, r2
 8000764:	4a04      	ldr	r2, [pc, #16]	@ (8000778 <HAL_IncTick+0x24>)
 8000766:	6013      	str	r3, [r2, #0]
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	20000008 	.word	0x20000008
 8000778:	20000104 	.word	0x20000104

0800077c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000780:	4b03      	ldr	r3, [pc, #12]	@ (8000790 <HAL_GetTick+0x14>)
 8000782:	681b      	ldr	r3, [r3, #0]
}
 8000784:	4618      	mov	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20000104 	.word	0x20000104

08000794 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800079c:	f7ff ffee 	bl	800077c <HAL_GetTick>
 80007a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ac:	d005      	beq.n	80007ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ae:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <HAL_Delay+0x44>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	461a      	mov	r2, r3
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	4413      	add	r3, r2
 80007b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80007ba:	bf00      	nop
 80007bc:	f7ff ffde 	bl	800077c <HAL_GetTick>
 80007c0:	4602      	mov	r2, r0
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	68fa      	ldr	r2, [r7, #12]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d8f7      	bhi.n	80007bc <HAL_Delay+0x28>
  {
  }
}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000008 	.word	0x20000008

080007dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <__NVIC_SetPriorityGrouping+0x44>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007f2:	68ba      	ldr	r2, [r7, #8]
 80007f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007f8:	4013      	ands	r3, r2
 80007fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000804:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800080c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800080e:	4a04      	ldr	r2, [pc, #16]	@ (8000820 <__NVIC_SetPriorityGrouping+0x44>)
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	60d3      	str	r3, [r2, #12]
}
 8000814:	bf00      	nop
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000828:	4b04      	ldr	r3, [pc, #16]	@ (800083c <__NVIC_GetPriorityGrouping+0x18>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	0a1b      	lsrs	r3, r3, #8
 800082e:	f003 0307 	and.w	r3, r3, #7
}
 8000832:	4618      	mov	r0, r3
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	6039      	str	r1, [r7, #0]
 800084a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800084c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000850:	2b00      	cmp	r3, #0
 8000852:	db0a      	blt.n	800086a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	b2da      	uxtb	r2, r3
 8000858:	490c      	ldr	r1, [pc, #48]	@ (800088c <__NVIC_SetPriority+0x4c>)
 800085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085e:	0112      	lsls	r2, r2, #4
 8000860:	b2d2      	uxtb	r2, r2
 8000862:	440b      	add	r3, r1
 8000864:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000868:	e00a      	b.n	8000880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4908      	ldr	r1, [pc, #32]	@ (8000890 <__NVIC_SetPriority+0x50>)
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	f003 030f 	and.w	r3, r3, #15
 8000876:	3b04      	subs	r3, #4
 8000878:	0112      	lsls	r2, r2, #4
 800087a:	b2d2      	uxtb	r2, r2
 800087c:	440b      	add	r3, r1
 800087e:	761a      	strb	r2, [r3, #24]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	e000e100 	.word	0xe000e100
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000894:	b480      	push	{r7}
 8000896:	b089      	sub	sp, #36	@ 0x24
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f003 0307 	and.w	r3, r3, #7
 80008a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	f1c3 0307 	rsb	r3, r3, #7
 80008ae:	2b04      	cmp	r3, #4
 80008b0:	bf28      	it	cs
 80008b2:	2304      	movcs	r3, #4
 80008b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	3304      	adds	r3, #4
 80008ba:	2b06      	cmp	r3, #6
 80008bc:	d902      	bls.n	80008c4 <NVIC_EncodePriority+0x30>
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3b03      	subs	r3, #3
 80008c2:	e000      	b.n	80008c6 <NVIC_EncodePriority+0x32>
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c8:	f04f 32ff 	mov.w	r2, #4294967295
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	43da      	mvns	r2, r3
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	401a      	ands	r2, r3
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008dc:	f04f 31ff 	mov.w	r1, #4294967295
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	fa01 f303 	lsl.w	r3, r1, r3
 80008e6:	43d9      	mvns	r1, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ec:	4313      	orrs	r3, r2
         );
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3724      	adds	r7, #36	@ 0x24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
	...

080008fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	3b01      	subs	r3, #1
 8000908:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800090c:	d301      	bcc.n	8000912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800090e:	2301      	movs	r3, #1
 8000910:	e00f      	b.n	8000932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000912:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <SysTick_Config+0x40>)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3b01      	subs	r3, #1
 8000918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800091a:	210f      	movs	r1, #15
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	f7ff ff8e 	bl	8000840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000924:	4b05      	ldr	r3, [pc, #20]	@ (800093c <SysTick_Config+0x40>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800092a:	4b04      	ldr	r3, [pc, #16]	@ (800093c <SysTick_Config+0x40>)
 800092c:	2207      	movs	r2, #7
 800092e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	e000e010 	.word	0xe000e010

08000940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f7ff ff47 	bl	80007dc <__NVIC_SetPriorityGrouping>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b086      	sub	sp, #24
 800095a:	af00      	add	r7, sp, #0
 800095c:	4603      	mov	r3, r0
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]
 8000962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000968:	f7ff ff5c 	bl	8000824 <__NVIC_GetPriorityGrouping>
 800096c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	68b9      	ldr	r1, [r7, #8]
 8000972:	6978      	ldr	r0, [r7, #20]
 8000974:	f7ff ff8e 	bl	8000894 <NVIC_EncodePriority>
 8000978:	4602      	mov	r2, r0
 800097a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800097e:	4611      	mov	r1, r2
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ff5d 	bl	8000840 <__NVIC_SetPriority>
}
 8000986:	bf00      	nop
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b082      	sub	sp, #8
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff ffb0 	bl	80008fc <SysTick_Config>
 800099c:	4603      	mov	r3, r0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b087      	sub	sp, #28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009b6:	e14e      	b.n	8000c56 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	2101      	movs	r1, #1
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	fa01 f303 	lsl.w	r3, r1, r3
 80009c4:	4013      	ands	r3, r2
 80009c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f000 8140 	beq.w	8000c50 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f003 0303 	and.w	r3, r3, #3
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d005      	beq.n	80009e8 <HAL_GPIO_Init+0x40>
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f003 0303 	and.w	r3, r3, #3
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d130      	bne.n	8000a4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	2203      	movs	r2, #3
 80009f4:	fa02 f303 	lsl.w	r3, r2, r3
 80009f8:	43db      	mvns	r3, r3
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4013      	ands	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	68da      	ldr	r2, [r3, #12]
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a1e:	2201      	movs	r2, #1
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43db      	mvns	r3, r3
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	091b      	lsrs	r3, r3, #4
 8000a34:	f003 0201 	and.w	r2, r3, #1
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f003 0303 	and.w	r3, r3, #3
 8000a52:	2b03      	cmp	r3, #3
 8000a54:	d017      	beq.n	8000a86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	2203      	movs	r2, #3
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	43db      	mvns	r3, r3
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	689a      	ldr	r2, [r3, #8]
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f003 0303 	and.w	r3, r3, #3
 8000a8e:	2b02      	cmp	r3, #2
 8000a90:	d123      	bne.n	8000ada <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	08da      	lsrs	r2, r3, #3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	3208      	adds	r2, #8
 8000a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	220f      	movs	r2, #15
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	691a      	ldr	r2, [r3, #16]
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	f003 0307 	and.w	r3, r3, #7
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	08da      	lsrs	r2, r3, #3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3208      	adds	r2, #8
 8000ad4:	6939      	ldr	r1, [r7, #16]
 8000ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43db      	mvns	r3, r3
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	4013      	ands	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f003 0203 	and.w	r2, r3, #3
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f000 809a 	beq.w	8000c50 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1c:	4b55      	ldr	r3, [pc, #340]	@ (8000c74 <HAL_GPIO_Init+0x2cc>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a54      	ldr	r2, [pc, #336]	@ (8000c74 <HAL_GPIO_Init+0x2cc>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b52      	ldr	r3, [pc, #328]	@ (8000c74 <HAL_GPIO_Init+0x2cc>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b34:	4a50      	ldr	r2, [pc, #320]	@ (8000c78 <HAL_GPIO_Init+0x2d0>)
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	089b      	lsrs	r3, r3, #2
 8000b3a:	3302      	adds	r3, #2
 8000b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	f003 0303 	and.w	r3, r3, #3
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	220f      	movs	r2, #15
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	43db      	mvns	r3, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b5e:	d013      	beq.n	8000b88 <HAL_GPIO_Init+0x1e0>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a46      	ldr	r2, [pc, #280]	@ (8000c7c <HAL_GPIO_Init+0x2d4>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d00d      	beq.n	8000b84 <HAL_GPIO_Init+0x1dc>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a45      	ldr	r2, [pc, #276]	@ (8000c80 <HAL_GPIO_Init+0x2d8>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d007      	beq.n	8000b80 <HAL_GPIO_Init+0x1d8>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a44      	ldr	r2, [pc, #272]	@ (8000c84 <HAL_GPIO_Init+0x2dc>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d101      	bne.n	8000b7c <HAL_GPIO_Init+0x1d4>
 8000b78:	2303      	movs	r3, #3
 8000b7a:	e006      	b.n	8000b8a <HAL_GPIO_Init+0x1e2>
 8000b7c:	2305      	movs	r3, #5
 8000b7e:	e004      	b.n	8000b8a <HAL_GPIO_Init+0x1e2>
 8000b80:	2302      	movs	r3, #2
 8000b82:	e002      	b.n	8000b8a <HAL_GPIO_Init+0x1e2>
 8000b84:	2301      	movs	r3, #1
 8000b86:	e000      	b.n	8000b8a <HAL_GPIO_Init+0x1e2>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	697a      	ldr	r2, [r7, #20]
 8000b8c:	f002 0203 	and.w	r2, r2, #3
 8000b90:	0092      	lsls	r2, r2, #2
 8000b92:	4093      	lsls	r3, r2
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b9a:	4937      	ldr	r1, [pc, #220]	@ (8000c78 <HAL_GPIO_Init+0x2d0>)
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	089b      	lsrs	r3, r3, #2
 8000ba0:	3302      	adds	r3, #2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ba8:	4b37      	ldr	r3, [pc, #220]	@ (8000c88 <HAL_GPIO_Init+0x2e0>)
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d003      	beq.n	8000bcc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bcc:	4a2e      	ldr	r2, [pc, #184]	@ (8000c88 <HAL_GPIO_Init+0x2e0>)
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bd2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c88 <HAL_GPIO_Init+0x2e0>)
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	4013      	ands	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d003      	beq.n	8000bf6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bf6:	4a24      	ldr	r2, [pc, #144]	@ (8000c88 <HAL_GPIO_Init+0x2e0>)
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000bfc:	4b22      	ldr	r3, [pc, #136]	@ (8000c88 <HAL_GPIO_Init+0x2e0>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	43db      	mvns	r3, r3
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d003      	beq.n	8000c20 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c20:	4a19      	ldr	r2, [pc, #100]	@ (8000c88 <HAL_GPIO_Init+0x2e0>)
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c26:	4b18      	ldr	r3, [pc, #96]	@ (8000c88 <HAL_GPIO_Init+0x2e0>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d003      	beq.n	8000c4a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c88 <HAL_GPIO_Init+0x2e0>)
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	3301      	adds	r3, #1
 8000c54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	f47f aea9 	bne.w	80009b8 <HAL_GPIO_Init+0x10>
  }
}
 8000c66:	bf00      	nop
 8000c68:	bf00      	nop
 8000c6a:	371c      	adds	r7, #28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010000 	.word	0x40010000
 8000c7c:	48000400 	.word	0x48000400
 8000c80:	48000800 	.word	0x48000800
 8000c84:	48000c00 	.word	0x48000c00
 8000c88:	40010400 	.word	0x40010400

08000c8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	460b      	mov	r3, r1
 8000c96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	691a      	ldr	r2, [r3, #16]
 8000c9c:	887b      	ldrh	r3, [r7, #2]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d002      	beq.n	8000caa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	73fb      	strb	r3, [r7, #15]
 8000ca8:	e001      	b.n	8000cae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000caa:	2300      	movs	r3, #0
 8000cac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d101      	bne.n	8000cce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e08d      	b.n	8000dea <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d106      	bne.n	8000ce8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff fbfc 	bl	80004e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2224      	movs	r2, #36	@ 0x24
 8000cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f022 0201 	bic.w	r2, r2, #1
 8000cfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685a      	ldr	r2, [r3, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000d0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	689a      	ldr	r2, [r3, #8]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000d1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d107      	bne.n	8000d36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	689a      	ldr	r2, [r3, #8]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	e006      	b.n	8000d44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	689a      	ldr	r2, [r3, #8]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000d42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d108      	bne.n	8000d5e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	e007      	b.n	8000d6e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	685a      	ldr	r2, [r3, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000d6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	6812      	ldr	r2, [r2, #0]
 8000d78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d80:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	68da      	ldr	r2, [r3, #12]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000d90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	691a      	ldr	r2, [r3, #16]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	430a      	orrs	r2, r1
 8000daa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	69d9      	ldr	r1, [r3, #28]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a1a      	ldr	r2, [r3, #32]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	430a      	orrs	r2, r1
 8000dba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f042 0201 	orr.w	r2, r2, #1
 8000dca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2220      	movs	r2, #32
 8000dd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af02      	add	r7, sp, #8
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	4611      	mov	r1, r2
 8000e00:	461a      	mov	r2, r3
 8000e02:	4603      	mov	r3, r0
 8000e04:	817b      	strh	r3, [r7, #10]
 8000e06:	460b      	mov	r3, r1
 8000e08:	813b      	strh	r3, [r7, #8]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b20      	cmp	r3, #32
 8000e18:	f040 80f9 	bne.w	800100e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000e1c:	6a3b      	ldr	r3, [r7, #32]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d002      	beq.n	8000e28 <HAL_I2C_Mem_Write+0x34>
 8000e22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d105      	bne.n	8000e34 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e2e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e0ed      	b.n	8001010 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d101      	bne.n	8000e42 <HAL_I2C_Mem_Write+0x4e>
 8000e3e:	2302      	movs	r3, #2
 8000e40:	e0e6      	b.n	8001010 <HAL_I2C_Mem_Write+0x21c>
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	2201      	movs	r2, #1
 8000e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000e4a:	f7ff fc97 	bl	800077c <HAL_GetTick>
 8000e4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	2319      	movs	r3, #25
 8000e56:	2201      	movs	r2, #1
 8000e58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e5c:	68f8      	ldr	r0, [r7, #12]
 8000e5e:	f000 fac3 	bl	80013e8 <I2C_WaitOnFlagUntilTimeout>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e0d1      	b.n	8001010 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2221      	movs	r2, #33	@ 0x21
 8000e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2240      	movs	r2, #64	@ 0x40
 8000e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	6a3a      	ldr	r2, [r7, #32]
 8000e86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000e8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	2200      	movs	r2, #0
 8000e92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000e94:	88f8      	ldrh	r0, [r7, #6]
 8000e96:	893a      	ldrh	r2, [r7, #8]
 8000e98:	8979      	ldrh	r1, [r7, #10]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	9301      	str	r3, [sp, #4]
 8000e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	f000 f9d3 	bl	8001250 <I2C_RequestMemoryWrite>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d005      	beq.n	8000ebc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e0a9      	b.n	8001010 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	2bff      	cmp	r3, #255	@ 0xff
 8000ec4:	d90e      	bls.n	8000ee4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	22ff      	movs	r2, #255	@ 0xff
 8000eca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	8979      	ldrh	r1, [r7, #10]
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000edc:	68f8      	ldr	r0, [r7, #12]
 8000ede:	f000 fc47 	bl	8001770 <I2C_TransferConfig>
 8000ee2:	e00f      	b.n	8000f04 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	8979      	ldrh	r1, [r7, #10]
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	f000 fc36 	bl	8001770 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	f000 fac6 	bl	800149a <I2C_WaitOnTXISFlagUntilTimeout>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e07b      	b.n	8001010 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f1c:	781a      	ldrb	r2, [r3, #0]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f28:	1c5a      	adds	r2, r3, #1
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	3b01      	subs	r3, #1
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f40:	3b01      	subs	r3, #1
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d034      	beq.n	8000fbc <HAL_I2C_Mem_Write+0x1c8>
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d130      	bne.n	8000fbc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f60:	2200      	movs	r2, #0
 8000f62:	2180      	movs	r1, #128	@ 0x80
 8000f64:	68f8      	ldr	r0, [r7, #12]
 8000f66:	f000 fa3f 	bl	80013e8 <I2C_WaitOnFlagUntilTimeout>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e04d      	b.n	8001010 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	2bff      	cmp	r3, #255	@ 0xff
 8000f7c:	d90e      	bls.n	8000f9c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	22ff      	movs	r2, #255	@ 0xff
 8000f82:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	8979      	ldrh	r1, [r7, #10]
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f94:	68f8      	ldr	r0, [r7, #12]
 8000f96:	f000 fbeb 	bl	8001770 <I2C_TransferConfig>
 8000f9a:	e00f      	b.n	8000fbc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	8979      	ldrh	r1, [r7, #10]
 8000fae:	2300      	movs	r3, #0
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f000 fbda 	bl	8001770 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d19e      	bne.n	8000f04 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f000 faac 	bl	8001528 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e01a      	b.n	8001010 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2220      	movs	r2, #32
 8000fe0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6859      	ldr	r1, [r3, #4]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b0a      	ldr	r3, [pc, #40]	@ (8001018 <HAL_I2C_Mem_Write+0x224>)
 8000fee:	400b      	ands	r3, r1
 8000ff0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	2220      	movs	r2, #32
 8000ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e000      	b.n	8001010 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800100e:	2302      	movs	r3, #2
  }
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	fe00e800 	.word	0xfe00e800

0800101c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af02      	add	r7, sp, #8
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	4608      	mov	r0, r1
 8001026:	4611      	mov	r1, r2
 8001028:	461a      	mov	r2, r3
 800102a:	4603      	mov	r3, r0
 800102c:	817b      	strh	r3, [r7, #10]
 800102e:	460b      	mov	r3, r1
 8001030:	813b      	strh	r3, [r7, #8]
 8001032:	4613      	mov	r3, r2
 8001034:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b20      	cmp	r3, #32
 8001040:	f040 80fd 	bne.w	800123e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001044:	6a3b      	ldr	r3, [r7, #32]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d002      	beq.n	8001050 <HAL_I2C_Mem_Read+0x34>
 800104a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800104c:	2b00      	cmp	r3, #0
 800104e:	d105      	bne.n	800105c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001056:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e0f1      	b.n	8001240 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001062:	2b01      	cmp	r3, #1
 8001064:	d101      	bne.n	800106a <HAL_I2C_Mem_Read+0x4e>
 8001066:	2302      	movs	r3, #2
 8001068:	e0ea      	b.n	8001240 <HAL_I2C_Mem_Read+0x224>
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2201      	movs	r2, #1
 800106e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001072:	f7ff fb83 	bl	800077c <HAL_GetTick>
 8001076:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2319      	movs	r3, #25
 800107e:	2201      	movs	r2, #1
 8001080:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f000 f9af 	bl	80013e8 <I2C_WaitOnFlagUntilTimeout>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e0d5      	b.n	8001240 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2222      	movs	r2, #34	@ 0x22
 8001098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2240      	movs	r2, #64	@ 0x40
 80010a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2200      	movs	r2, #0
 80010a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6a3a      	ldr	r2, [r7, #32]
 80010ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80010b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2200      	movs	r2, #0
 80010ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80010bc:	88f8      	ldrh	r0, [r7, #6]
 80010be:	893a      	ldrh	r2, [r7, #8]
 80010c0:	8979      	ldrh	r1, [r7, #10]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	4603      	mov	r3, r0
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f000 f913 	bl	80012f8 <I2C_RequestMemoryRead>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d005      	beq.n	80010e4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e0ad      	b.n	8001240 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	2bff      	cmp	r3, #255	@ 0xff
 80010ec:	d90e      	bls.n	800110c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2201      	movs	r2, #1
 80010f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	8979      	ldrh	r1, [r7, #10]
 80010fc:	4b52      	ldr	r3, [pc, #328]	@ (8001248 <HAL_I2C_Mem_Read+0x22c>)
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f000 fb33 	bl	8001770 <I2C_TransferConfig>
 800110a:	e00f      	b.n	800112c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001110:	b29a      	uxth	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800111a:	b2da      	uxtb	r2, r3
 800111c:	8979      	ldrh	r1, [r7, #10]
 800111e:	4b4a      	ldr	r3, [pc, #296]	@ (8001248 <HAL_I2C_Mem_Read+0x22c>)
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001126:	68f8      	ldr	r0, [r7, #12]
 8001128:	f000 fb22 	bl	8001770 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001132:	2200      	movs	r2, #0
 8001134:	2104      	movs	r1, #4
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f000 f956 	bl	80013e8 <I2C_WaitOnFlagUntilTimeout>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e07c      	b.n	8001240 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001158:	1c5a      	adds	r2, r3, #1
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001162:	3b01      	subs	r3, #1
 8001164:	b29a      	uxth	r2, r3
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800116e:	b29b      	uxth	r3, r3
 8001170:	3b01      	subs	r3, #1
 8001172:	b29a      	uxth	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800117c:	b29b      	uxth	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d034      	beq.n	80011ec <HAL_I2C_Mem_Read+0x1d0>
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001186:	2b00      	cmp	r3, #0
 8001188:	d130      	bne.n	80011ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001190:	2200      	movs	r2, #0
 8001192:	2180      	movs	r1, #128	@ 0x80
 8001194:	68f8      	ldr	r0, [r7, #12]
 8001196:	f000 f927 	bl	80013e8 <I2C_WaitOnFlagUntilTimeout>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e04d      	b.n	8001240 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	2bff      	cmp	r3, #255	@ 0xff
 80011ac:	d90e      	bls.n	80011cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2201      	movs	r2, #1
 80011b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	8979      	ldrh	r1, [r7, #10]
 80011bc:	2300      	movs	r3, #0
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f000 fad3 	bl	8001770 <I2C_TransferConfig>
 80011ca:	e00f      	b.n	80011ec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	8979      	ldrh	r1, [r7, #10]
 80011de:	2300      	movs	r3, #0
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f000 fac2 	bl	8001770 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d19a      	bne.n	800112c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	f000 f994 	bl	8001528 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e01a      	b.n	8001240 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2220      	movs	r2, #32
 8001210:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6859      	ldr	r1, [r3, #4]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b0b      	ldr	r3, [pc, #44]	@ (800124c <HAL_I2C_Mem_Read+0x230>)
 800121e:	400b      	ands	r3, r1
 8001220:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2220      	movs	r2, #32
 8001226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2200      	movs	r2, #0
 800122e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	e000      	b.n	8001240 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800123e:	2302      	movs	r3, #2
  }
}
 8001240:	4618      	mov	r0, r3
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	80002400 	.word	0x80002400
 800124c:	fe00e800 	.word	0xfe00e800

08001250 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af02      	add	r7, sp, #8
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	4608      	mov	r0, r1
 800125a:	4611      	mov	r1, r2
 800125c:	461a      	mov	r2, r3
 800125e:	4603      	mov	r3, r0
 8001260:	817b      	strh	r3, [r7, #10]
 8001262:	460b      	mov	r3, r1
 8001264:	813b      	strh	r3, [r7, #8]
 8001266:	4613      	mov	r3, r2
 8001268:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	b2da      	uxtb	r2, r3
 800126e:	8979      	ldrh	r1, [r7, #10]
 8001270:	4b20      	ldr	r3, [pc, #128]	@ (80012f4 <I2C_RequestMemoryWrite+0xa4>)
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f000 fa79 	bl	8001770 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800127e:	69fa      	ldr	r2, [r7, #28]
 8001280:	69b9      	ldr	r1, [r7, #24]
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	f000 f909 	bl	800149a <I2C_WaitOnTXISFlagUntilTimeout>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e02c      	b.n	80012ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d105      	bne.n	80012a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001298:	893b      	ldrh	r3, [r7, #8]
 800129a:	b2da      	uxtb	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80012a2:	e015      	b.n	80012d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80012a4:	893b      	ldrh	r3, [r7, #8]
 80012a6:	0a1b      	lsrs	r3, r3, #8
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012b2:	69fa      	ldr	r2, [r7, #28]
 80012b4:	69b9      	ldr	r1, [r7, #24]
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f000 f8ef 	bl	800149a <I2C_WaitOnTXISFlagUntilTimeout>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e012      	b.n	80012ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80012c6:	893b      	ldrh	r3, [r7, #8]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	2200      	movs	r2, #0
 80012d8:	2180      	movs	r1, #128	@ 0x80
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f000 f884 	bl	80013e8 <I2C_WaitOnFlagUntilTimeout>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e000      	b.n	80012ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	80002000 	.word	0x80002000

080012f8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af02      	add	r7, sp, #8
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	4608      	mov	r0, r1
 8001302:	4611      	mov	r1, r2
 8001304:	461a      	mov	r2, r3
 8001306:	4603      	mov	r3, r0
 8001308:	817b      	strh	r3, [r7, #10]
 800130a:	460b      	mov	r3, r1
 800130c:	813b      	strh	r3, [r7, #8]
 800130e:	4613      	mov	r3, r2
 8001310:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	8979      	ldrh	r1, [r7, #10]
 8001318:	4b20      	ldr	r3, [pc, #128]	@ (800139c <I2C_RequestMemoryRead+0xa4>)
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2300      	movs	r3, #0
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f000 fa26 	bl	8001770 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001324:	69fa      	ldr	r2, [r7, #28]
 8001326:	69b9      	ldr	r1, [r7, #24]
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	f000 f8b6 	bl	800149a <I2C_WaitOnTXISFlagUntilTimeout>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e02c      	b.n	8001392 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d105      	bne.n	800134a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800133e:	893b      	ldrh	r3, [r7, #8]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	629a      	str	r2, [r3, #40]	@ 0x28
 8001348:	e015      	b.n	8001376 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800134a:	893b      	ldrh	r3, [r7, #8]
 800134c:	0a1b      	lsrs	r3, r3, #8
 800134e:	b29b      	uxth	r3, r3
 8001350:	b2da      	uxtb	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	69b9      	ldr	r1, [r7, #24]
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f000 f89c 	bl	800149a <I2C_WaitOnTXISFlagUntilTimeout>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e012      	b.n	8001392 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800136c:	893b      	ldrh	r3, [r7, #8]
 800136e:	b2da      	uxtb	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	2200      	movs	r2, #0
 800137e:	2140      	movs	r1, #64	@ 0x40
 8001380:	68f8      	ldr	r0, [r7, #12]
 8001382:	f000 f831 	bl	80013e8 <I2C_WaitOnFlagUntilTimeout>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e000      	b.n	8001392 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	80002000 	.word	0x80002000

080013a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d103      	bne.n	80013be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2200      	movs	r2, #0
 80013bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d007      	beq.n	80013dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	699a      	ldr	r2, [r3, #24]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f042 0201 	orr.w	r2, r2, #1
 80013da:	619a      	str	r2, [r3, #24]
  }
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	4613      	mov	r3, r2
 80013f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013f8:	e03b      	b.n	8001472 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	6839      	ldr	r1, [r7, #0]
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f000 f8d6 	bl	80015b0 <I2C_IsErrorOccurred>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e041      	b.n	8001492 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001414:	d02d      	beq.n	8001472 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001416:	f7ff f9b1 	bl	800077c <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	429a      	cmp	r2, r3
 8001424:	d302      	bcc.n	800142c <I2C_WaitOnFlagUntilTimeout+0x44>
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d122      	bne.n	8001472 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	699a      	ldr	r2, [r3, #24]
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	4013      	ands	r3, r2
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	429a      	cmp	r2, r3
 800143a:	bf0c      	ite	eq
 800143c:	2301      	moveq	r3, #1
 800143e:	2300      	movne	r3, #0
 8001440:	b2db      	uxtb	r3, r3
 8001442:	461a      	mov	r2, r3
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	429a      	cmp	r2, r3
 8001448:	d113      	bne.n	8001472 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144e:	f043 0220 	orr.w	r2, r3, #32
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2220      	movs	r2, #32
 800145a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e00f      	b.n	8001492 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	699a      	ldr	r2, [r3, #24]
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	4013      	ands	r3, r2
 800147c:	68ba      	ldr	r2, [r7, #8]
 800147e:	429a      	cmp	r2, r3
 8001480:	bf0c      	ite	eq
 8001482:	2301      	moveq	r3, #1
 8001484:	2300      	movne	r3, #0
 8001486:	b2db      	uxtb	r3, r3
 8001488:	461a      	mov	r2, r3
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	429a      	cmp	r2, r3
 800148e:	d0b4      	beq.n	80013fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b084      	sub	sp, #16
 800149e:	af00      	add	r7, sp, #0
 80014a0:	60f8      	str	r0, [r7, #12]
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80014a6:	e033      	b.n	8001510 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	68b9      	ldr	r1, [r7, #8]
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 f87f 	bl	80015b0 <I2C_IsErrorOccurred>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e031      	b.n	8001520 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c2:	d025      	beq.n	8001510 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014c4:	f7ff f95a 	bl	800077c <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d302      	bcc.n	80014da <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d11a      	bne.n	8001510 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d013      	beq.n	8001510 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ec:	f043 0220 	orr.w	r2, r3, #32
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2220      	movs	r2, #32
 80014f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e007      	b.n	8001520 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b02      	cmp	r3, #2
 800151c:	d1c4      	bne.n	80014a8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001534:	e02f      	b.n	8001596 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f000 f838 	bl	80015b0 <I2C_IsErrorOccurred>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e02d      	b.n	80015a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800154a:	f7ff f917 	bl	800077c <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	68ba      	ldr	r2, [r7, #8]
 8001556:	429a      	cmp	r2, r3
 8001558:	d302      	bcc.n	8001560 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d11a      	bne.n	8001596 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	f003 0320 	and.w	r3, r3, #32
 800156a:	2b20      	cmp	r3, #32
 800156c:	d013      	beq.n	8001596 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001572:	f043 0220 	orr.w	r2, r3, #32
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2220      	movs	r2, #32
 800157e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e007      	b.n	80015a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	f003 0320 	and.w	r3, r3, #32
 80015a0:	2b20      	cmp	r3, #32
 80015a2:	d1c8      	bne.n	8001536 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	@ 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015bc:	2300      	movs	r3, #0
 80015be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	f003 0310 	and.w	r3, r3, #16
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d068      	beq.n	80016ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2210      	movs	r2, #16
 80015e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80015e4:	e049      	b.n	800167a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ec:	d045      	beq.n	800167a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80015ee:	f7ff f8c5 	bl	800077c <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	68ba      	ldr	r2, [r7, #8]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d302      	bcc.n	8001604 <I2C_IsErrorOccurred+0x54>
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d13a      	bne.n	800167a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800160e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001616:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001622:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001626:	d121      	bne.n	800166c <I2C_IsErrorOccurred+0xbc>
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800162e:	d01d      	beq.n	800166c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001630:	7cfb      	ldrb	r3, [r7, #19]
 8001632:	2b20      	cmp	r3, #32
 8001634:	d01a      	beq.n	800166c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001644:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001646:	f7ff f899 	bl	800077c <HAL_GetTick>
 800164a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800164c:	e00e      	b.n	800166c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800164e:	f7ff f895 	bl	800077c <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b19      	cmp	r3, #25
 800165a:	d907      	bls.n	800166c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800165c:	6a3b      	ldr	r3, [r7, #32]
 800165e:	f043 0320 	orr.w	r3, r3, #32
 8001662:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800166a:	e006      	b.n	800167a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	f003 0320 	and.w	r3, r3, #32
 8001676:	2b20      	cmp	r3, #32
 8001678:	d1e9      	bne.n	800164e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f003 0320 	and.w	r3, r3, #32
 8001684:	2b20      	cmp	r3, #32
 8001686:	d003      	beq.n	8001690 <I2C_IsErrorOccurred+0xe0>
 8001688:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0aa      	beq.n	80015e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001690:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001694:	2b00      	cmp	r3, #0
 8001696:	d103      	bne.n	80016a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2220      	movs	r2, #32
 800169e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80016a0:	6a3b      	ldr	r3, [r7, #32]
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00b      	beq.n	80016d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80016c0:	6a3b      	ldr	r3, [r7, #32]
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00b      	beq.n	80016fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80016e2:	6a3b      	ldr	r3, [r7, #32]
 80016e4:	f043 0308 	orr.w	r3, r3, #8
 80016e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001700:	2b00      	cmp	r3, #0
 8001702:	d00b      	beq.n	800171c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001704:	6a3b      	ldr	r3, [r7, #32]
 8001706:	f043 0302 	orr.w	r3, r3, #2
 800170a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001714:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800171c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001720:	2b00      	cmp	r3, #0
 8001722:	d01c      	beq.n	800175e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f7ff fe3b 	bl	80013a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6859      	ldr	r1, [r3, #4]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b0d      	ldr	r3, [pc, #52]	@ (800176c <I2C_IsErrorOccurred+0x1bc>)
 8001736:	400b      	ands	r3, r1
 8001738:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	431a      	orrs	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2220      	movs	r2, #32
 800174a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800175e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001762:	4618      	mov	r0, r3
 8001764:	3728      	adds	r7, #40	@ 0x28
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	fe00e800 	.word	0xfe00e800

08001770 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001770:	b480      	push	{r7}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	460b      	mov	r3, r1
 800177c:	817b      	strh	r3, [r7, #10]
 800177e:	4613      	mov	r3, r2
 8001780:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001782:	897b      	ldrh	r3, [r7, #10]
 8001784:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001788:	7a7b      	ldrb	r3, [r7, #9]
 800178a:	041b      	lsls	r3, r3, #16
 800178c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001790:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	4313      	orrs	r3, r2
 800179a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800179e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	6a3b      	ldr	r3, [r7, #32]
 80017a8:	0d5b      	lsrs	r3, r3, #21
 80017aa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80017ae:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <I2C_TransferConfig+0x60>)
 80017b0:	430b      	orrs	r3, r1
 80017b2:	43db      	mvns	r3, r3
 80017b4:	ea02 0103 	and.w	r1, r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	430a      	orrs	r2, r1
 80017c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80017c2:	bf00      	nop
 80017c4:	371c      	adds	r7, #28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	03ff63ff 	.word	0x03ff63ff

080017d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b20      	cmp	r3, #32
 80017e8:	d138      	bne.n	800185c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d101      	bne.n	80017f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80017f4:	2302      	movs	r3, #2
 80017f6:	e032      	b.n	800185e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2224      	movs	r2, #36	@ 0x24
 8001804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f022 0201 	bic.w	r2, r2, #1
 8001816:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001826:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6819      	ldr	r1, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0201 	orr.w	r2, r2, #1
 8001846:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2220      	movs	r2, #32
 800184c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	e000      	b.n	800185e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800185c:	2302      	movs	r3, #2
  }
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800186a:	b480      	push	{r7}
 800186c:	b085      	sub	sp, #20
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b20      	cmp	r3, #32
 800187e:	d139      	bne.n	80018f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800188a:	2302      	movs	r3, #2
 800188c:	e033      	b.n	80018f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2224      	movs	r2, #36	@ 0x24
 800189a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0201 	bic.w	r2, r2, #1
 80018ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80018bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	021b      	lsls	r3, r3, #8
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0201 	orr.w	r2, r2, #1
 80018de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2220      	movs	r2, #32
 80018e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	e000      	b.n	80018f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80018f4:	2302      	movs	r3, #2
  }
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800190a:	af00      	add	r7, sp, #0
 800190c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001910:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001914:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800191a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	f001 b823 	b.w	8002970 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800192a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800192e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 817d 	beq.w	8001c3a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001940:	4bbc      	ldr	r3, [pc, #752]	@ (8001c34 <HAL_RCC_OscConfig+0x330>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b04      	cmp	r3, #4
 800194a:	d00c      	beq.n	8001966 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800194c:	4bb9      	ldr	r3, [pc, #740]	@ (8001c34 <HAL_RCC_OscConfig+0x330>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 030c 	and.w	r3, r3, #12
 8001954:	2b08      	cmp	r3, #8
 8001956:	d15c      	bne.n	8001a12 <HAL_RCC_OscConfig+0x10e>
 8001958:	4bb6      	ldr	r3, [pc, #728]	@ (8001c34 <HAL_RCC_OscConfig+0x330>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001964:	d155      	bne.n	8001a12 <HAL_RCC_OscConfig+0x10e>
 8001966:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800196a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001972:	fa93 f3a3 	rbit	r3, r3
 8001976:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800197a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197e:	fab3 f383 	clz	r3, r3
 8001982:	b2db      	uxtb	r3, r3
 8001984:	095b      	lsrs	r3, r3, #5
 8001986:	b2db      	uxtb	r3, r3
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b01      	cmp	r3, #1
 8001990:	d102      	bne.n	8001998 <HAL_RCC_OscConfig+0x94>
 8001992:	4ba8      	ldr	r3, [pc, #672]	@ (8001c34 <HAL_RCC_OscConfig+0x330>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	e015      	b.n	80019c4 <HAL_RCC_OscConfig+0xc0>
 8001998:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800199c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80019a4:	fa93 f3a3 	rbit	r3, r3
 80019a8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80019ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019b0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80019b4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80019b8:	fa93 f3a3 	rbit	r3, r3
 80019bc:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80019c0:	4b9c      	ldr	r3, [pc, #624]	@ (8001c34 <HAL_RCC_OscConfig+0x330>)
 80019c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019c8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80019cc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80019d0:	fa92 f2a2 	rbit	r2, r2
 80019d4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80019d8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80019dc:	fab2 f282 	clz	r2, r2
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	f042 0220 	orr.w	r2, r2, #32
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	f002 021f 	and.w	r2, r2, #31
 80019ec:	2101      	movs	r1, #1
 80019ee:	fa01 f202 	lsl.w	r2, r1, r2
 80019f2:	4013      	ands	r3, r2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 811f 	beq.w	8001c38 <HAL_RCC_OscConfig+0x334>
 80019fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f040 8116 	bne.w	8001c38 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	f000 bfaf 	b.w	8002970 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a22:	d106      	bne.n	8001a32 <HAL_RCC_OscConfig+0x12e>
 8001a24:	4b83      	ldr	r3, [pc, #524]	@ (8001c34 <HAL_RCC_OscConfig+0x330>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a82      	ldr	r2, [pc, #520]	@ (8001c34 <HAL_RCC_OscConfig+0x330>)
 8001a2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	e036      	b.n	8001aa0 <HAL_RCC_OscConfig+0x19c>
 8001a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x158>
 8001a42:	4b7c      	ldr	r3, [pc, #496]	@ (8001c34 <HAL_RCC_OscConfig+0x330>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a7b      	ldr	r2, [pc, #492]	@ (8001c34 <HAL_RCC_OscConfig+0x330>)
 8001a48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	4b79      	ldr	r3, [pc, #484]	@ (8001c34 <HAL_RCC_OscConfig+0x330>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a78      	ldr	r2, [pc, #480]	@ (8001c34 <HAL_RCC_OscConfig+0x330>)
 8001a54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	e021      	b.n	8001aa0 <HAL_RCC_OscConfig+0x19c>
 8001a5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a60:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a6c:	d10c      	bne.n	8001a88 <HAL_RCC_OscConfig+0x184>
 8001a6e:	4b71      	ldr	r3, [pc, #452]	@ (8001c34 <HAL_RCC_OscConfig+0x330>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a70      	ldr	r2, [pc, #448]	@ (8001c34 <HAL_RCC_OscConfig+0x330>)
 8001a74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	4b6e      	ldr	r3, [pc, #440]	@ (8001c34 <HAL_RCC_OscConfig+0x330>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a6d      	ldr	r2, [pc, #436]	@ (8001c34 <HAL_RCC_OscConfig+0x330>)
 8001a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	e00b      	b.n	8001aa0 <HAL_RCC_OscConfig+0x19c>
 8001a88:	4b6a      	ldr	r3, [pc, #424]	@ (8001c34 <HAL_RCC_OscConfig+0x330>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a69      	ldr	r2, [pc, #420]	@ (8001c34 <HAL_RCC_OscConfig+0x330>)
 8001a8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	4b67      	ldr	r3, [pc, #412]	@ (8001c34 <HAL_RCC_OscConfig+0x330>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a66      	ldr	r2, [pc, #408]	@ (8001c34 <HAL_RCC_OscConfig+0x330>)
 8001a9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a9e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001aa0:	4b64      	ldr	r3, [pc, #400]	@ (8001c34 <HAL_RCC_OscConfig+0x330>)
 8001aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa4:	f023 020f 	bic.w	r2, r3, #15
 8001aa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	495f      	ldr	r1, [pc, #380]	@ (8001c34 <HAL_RCC_OscConfig+0x330>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001abe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d059      	beq.n	8001b7e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aca:	f7fe fe57 	bl	800077c <HAL_GetTick>
 8001ace:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad2:	e00a      	b.n	8001aea <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad4:	f7fe fe52 	bl	800077c <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b64      	cmp	r3, #100	@ 0x64
 8001ae2:	d902      	bls.n	8001aea <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	f000 bf43 	b.w	8002970 <HAL_RCC_OscConfig+0x106c>
 8001aea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aee:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001af6:	fa93 f3a3 	rbit	r3, r3
 8001afa:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001afe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b02:	fab3 f383 	clz	r3, r3
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	095b      	lsrs	r3, r3, #5
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d102      	bne.n	8001b1c <HAL_RCC_OscConfig+0x218>
 8001b16:	4b47      	ldr	r3, [pc, #284]	@ (8001c34 <HAL_RCC_OscConfig+0x330>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	e015      	b.n	8001b48 <HAL_RCC_OscConfig+0x244>
 8001b1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b20:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b24:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001b28:	fa93 f3a3 	rbit	r3, r3
 8001b2c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001b30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b34:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001b38:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001b3c:	fa93 f3a3 	rbit	r3, r3
 8001b40:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001b44:	4b3b      	ldr	r3, [pc, #236]	@ (8001c34 <HAL_RCC_OscConfig+0x330>)
 8001b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b48:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b4c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001b50:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001b54:	fa92 f2a2 	rbit	r2, r2
 8001b58:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001b5c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001b60:	fab2 f282 	clz	r2, r2
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	f042 0220 	orr.w	r2, r2, #32
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	f002 021f 	and.w	r2, r2, #31
 8001b70:	2101      	movs	r1, #1
 8001b72:	fa01 f202 	lsl.w	r2, r1, r2
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0ab      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x1d0>
 8001b7c:	e05d      	b.n	8001c3a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7e:	f7fe fdfd 	bl	800077c <HAL_GetTick>
 8001b82:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b86:	e00a      	b.n	8001b9e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b88:	f7fe fdf8 	bl	800077c <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b64      	cmp	r3, #100	@ 0x64
 8001b96:	d902      	bls.n	8001b9e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	f000 bee9 	b.w	8002970 <HAL_RCC_OscConfig+0x106c>
 8001b9e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ba2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001baa:	fa93 f3a3 	rbit	r3, r3
 8001bae:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001bb2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb6:	fab3 f383 	clz	r3, r3
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	095b      	lsrs	r3, r3, #5
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d102      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x2cc>
 8001bca:	4b1a      	ldr	r3, [pc, #104]	@ (8001c34 <HAL_RCC_OscConfig+0x330>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	e015      	b.n	8001bfc <HAL_RCC_OscConfig+0x2f8>
 8001bd0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bd4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001bdc:	fa93 f3a3 	rbit	r3, r3
 8001be0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001be4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001be8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001bec:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001bf0:	fa93 f3a3 	rbit	r3, r3
 8001bf4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c34 <HAL_RCC_OscConfig+0x330>)
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c00:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001c04:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001c08:	fa92 f2a2 	rbit	r2, r2
 8001c0c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001c10:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001c14:	fab2 f282 	clz	r2, r2
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	f042 0220 	orr.w	r2, r2, #32
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	f002 021f 	and.w	r2, r2, #31
 8001c24:	2101      	movs	r1, #1
 8001c26:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1ab      	bne.n	8001b88 <HAL_RCC_OscConfig+0x284>
 8001c30:	e003      	b.n	8001c3a <HAL_RCC_OscConfig+0x336>
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 817d 	beq.w	8001f4a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c50:	4ba6      	ldr	r3, [pc, #664]	@ (8001eec <HAL_RCC_OscConfig+0x5e8>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 030c 	and.w	r3, r3, #12
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00b      	beq.n	8001c74 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c5c:	4ba3      	ldr	r3, [pc, #652]	@ (8001eec <HAL_RCC_OscConfig+0x5e8>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 030c 	and.w	r3, r3, #12
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d172      	bne.n	8001d4e <HAL_RCC_OscConfig+0x44a>
 8001c68:	4ba0      	ldr	r3, [pc, #640]	@ (8001eec <HAL_RCC_OscConfig+0x5e8>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d16c      	bne.n	8001d4e <HAL_RCC_OscConfig+0x44a>
 8001c74:	2302      	movs	r3, #2
 8001c76:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c7e:	fa93 f3a3 	rbit	r3, r3
 8001c82:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001c86:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8a:	fab3 f383 	clz	r3, r3
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	095b      	lsrs	r3, r3, #5
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d102      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x3a0>
 8001c9e:	4b93      	ldr	r3, [pc, #588]	@ (8001eec <HAL_RCC_OscConfig+0x5e8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	e013      	b.n	8001ccc <HAL_RCC_OscConfig+0x3c8>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001caa:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001cae:	fa93 f3a3 	rbit	r3, r3
 8001cb2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001cbc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001cc0:	fa93 f3a3 	rbit	r3, r3
 8001cc4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001cc8:	4b88      	ldr	r3, [pc, #544]	@ (8001eec <HAL_RCC_OscConfig+0x5e8>)
 8001cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ccc:	2202      	movs	r2, #2
 8001cce:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001cd2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001cd6:	fa92 f2a2 	rbit	r2, r2
 8001cda:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001cde:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001ce2:	fab2 f282 	clz	r2, r2
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	f042 0220 	orr.w	r2, r2, #32
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	f002 021f 	and.w	r2, r2, #31
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00a      	beq.n	8001d14 <HAL_RCC_OscConfig+0x410>
 8001cfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d002      	beq.n	8001d14 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	f000 be2e 	b.w	8002970 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d14:	4b75      	ldr	r3, [pc, #468]	@ (8001eec <HAL_RCC_OscConfig+0x5e8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d20:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	21f8      	movs	r1, #248	@ 0xf8
 8001d2a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001d32:	fa91 f1a1 	rbit	r1, r1
 8001d36:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001d3a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001d3e:	fab1 f181 	clz	r1, r1
 8001d42:	b2c9      	uxtb	r1, r1
 8001d44:	408b      	lsls	r3, r1
 8001d46:	4969      	ldr	r1, [pc, #420]	@ (8001eec <HAL_RCC_OscConfig+0x5e8>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4c:	e0fd      	b.n	8001f4a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 8088 	beq.w	8001e70 <HAL_RCC_OscConfig+0x56c>
 8001d60:	2301      	movs	r3, #1
 8001d62:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001d6a:	fa93 f3a3 	rbit	r3, r3
 8001d6e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001d72:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d80:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	461a      	mov	r2, r3
 8001d88:	2301      	movs	r3, #1
 8001d8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7fe fcf6 	bl	800077c <HAL_GetTick>
 8001d90:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d94:	e00a      	b.n	8001dac <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d96:	f7fe fcf1 	bl	800077c <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d902      	bls.n	8001dac <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	f000 bde2 	b.w	8002970 <HAL_RCC_OscConfig+0x106c>
 8001dac:	2302      	movs	r3, #2
 8001dae:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001db6:	fa93 f3a3 	rbit	r3, r3
 8001dba:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001dbe:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc2:	fab3 f383 	clz	r3, r3
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	095b      	lsrs	r3, r3, #5
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d102      	bne.n	8001ddc <HAL_RCC_OscConfig+0x4d8>
 8001dd6:	4b45      	ldr	r3, [pc, #276]	@ (8001eec <HAL_RCC_OscConfig+0x5e8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	e013      	b.n	8001e04 <HAL_RCC_OscConfig+0x500>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001de6:	fa93 f3a3 	rbit	r3, r3
 8001dea:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001dee:	2302      	movs	r3, #2
 8001df0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001df4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001e00:	4b3a      	ldr	r3, [pc, #232]	@ (8001eec <HAL_RCC_OscConfig+0x5e8>)
 8001e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e04:	2202      	movs	r2, #2
 8001e06:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001e0a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001e0e:	fa92 f2a2 	rbit	r2, r2
 8001e12:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001e16:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001e1a:	fab2 f282 	clz	r2, r2
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	f042 0220 	orr.w	r2, r2, #32
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	f002 021f 	and.w	r2, r2, #31
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0af      	beq.n	8001d96 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e36:	4b2d      	ldr	r3, [pc, #180]	@ (8001eec <HAL_RCC_OscConfig+0x5e8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	21f8      	movs	r1, #248	@ 0xf8
 8001e4c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001e54:	fa91 f1a1 	rbit	r1, r1
 8001e58:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001e5c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001e60:	fab1 f181 	clz	r1, r1
 8001e64:	b2c9      	uxtb	r1, r1
 8001e66:	408b      	lsls	r3, r1
 8001e68:	4920      	ldr	r1, [pc, #128]	@ (8001eec <HAL_RCC_OscConfig+0x5e8>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]
 8001e6e:	e06c      	b.n	8001f4a <HAL_RCC_OscConfig+0x646>
 8001e70:	2301      	movs	r3, #1
 8001e72:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e76:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001e7a:	fa93 f3a3 	rbit	r3, r3
 8001e7e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001e82:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e86:	fab3 f383 	clz	r3, r3
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e90:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	461a      	mov	r2, r3
 8001e98:	2300      	movs	r3, #0
 8001e9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7fe fc6e 	bl	800077c <HAL_GetTick>
 8001ea0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea4:	e00a      	b.n	8001ebc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ea6:	f7fe fc69 	bl	800077c <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d902      	bls.n	8001ebc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	f000 bd5a 	b.w	8002970 <HAL_RCC_OscConfig+0x106c>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001ec6:	fa93 f3a3 	rbit	r3, r3
 8001eca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001ece:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed2:	fab3 f383 	clz	r3, r3
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	095b      	lsrs	r3, r3, #5
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d104      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x5ec>
 8001ee6:	4b01      	ldr	r3, [pc, #4]	@ (8001eec <HAL_RCC_OscConfig+0x5e8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	e015      	b.n	8001f18 <HAL_RCC_OscConfig+0x614>
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001efa:	fa93 f3a3 	rbit	r3, r3
 8001efe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001f02:	2302      	movs	r3, #2
 8001f04:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001f08:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001f0c:	fa93 f3a3 	rbit	r3, r3
 8001f10:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001f14:	4bc8      	ldr	r3, [pc, #800]	@ (8002238 <HAL_RCC_OscConfig+0x934>)
 8001f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f18:	2202      	movs	r2, #2
 8001f1a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001f1e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001f22:	fa92 f2a2 	rbit	r2, r2
 8001f26:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001f2a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001f2e:	fab2 f282 	clz	r2, r2
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	f042 0220 	orr.w	r2, r2, #32
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	f002 021f 	and.w	r2, r2, #31
 8001f3e:	2101      	movs	r1, #1
 8001f40:	fa01 f202 	lsl.w	r2, r1, r2
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1ad      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 8110 	beq.w	8002180 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d079      	beq.n	8002064 <HAL_RCC_OscConfig+0x760>
 8001f70:	2301      	movs	r3, #1
 8001f72:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f76:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001f7a:	fa93 f3a3 	rbit	r3, r3
 8001f7e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f86:	fab3 f383 	clz	r3, r3
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4bab      	ldr	r3, [pc, #684]	@ (800223c <HAL_RCC_OscConfig+0x938>)
 8001f90:	4413      	add	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	461a      	mov	r2, r3
 8001f96:	2301      	movs	r3, #1
 8001f98:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9a:	f7fe fbef 	bl	800077c <HAL_GetTick>
 8001f9e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fa4:	f7fe fbea 	bl	800077c <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d902      	bls.n	8001fba <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	f000 bcdb 	b.w	8002970 <HAL_RCC_OscConfig+0x106c>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001fc4:	fa93 f3a3 	rbit	r3, r3
 8001fc8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001fcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fdc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	fa93 f2a3 	rbit	r2, r3
 8001fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002000:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	fa93 f2a3 	rbit	r2, r3
 800200a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800200e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002012:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002014:	4b88      	ldr	r3, [pc, #544]	@ (8002238 <HAL_RCC_OscConfig+0x934>)
 8002016:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800201c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002020:	2102      	movs	r1, #2
 8002022:	6019      	str	r1, [r3, #0]
 8002024:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002028:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	fa93 f1a3 	rbit	r1, r3
 8002032:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002036:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800203a:	6019      	str	r1, [r3, #0]
  return result;
 800203c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002040:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002050:	b2db      	uxtb	r3, r3
 8002052:	f003 031f 	and.w	r3, r3, #31
 8002056:	2101      	movs	r1, #1
 8002058:	fa01 f303 	lsl.w	r3, r1, r3
 800205c:	4013      	ands	r3, r2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0a0      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x6a0>
 8002062:	e08d      	b.n	8002180 <HAL_RCC_OscConfig+0x87c>
 8002064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002068:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800206c:	2201      	movs	r2, #1
 800206e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002074:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	fa93 f2a3 	rbit	r2, r3
 800207e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002082:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002086:	601a      	str	r2, [r3, #0]
  return result;
 8002088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800208c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002090:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	461a      	mov	r2, r3
 800209a:	4b68      	ldr	r3, [pc, #416]	@ (800223c <HAL_RCC_OscConfig+0x938>)
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	461a      	mov	r2, r3
 80020a2:	2300      	movs	r3, #0
 80020a4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a6:	f7fe fb69 	bl	800077c <HAL_GetTick>
 80020aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ae:	e00a      	b.n	80020c6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020b0:	f7fe fb64 	bl	800077c <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d902      	bls.n	80020c6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	f000 bc55 	b.w	8002970 <HAL_RCC_OscConfig+0x106c>
 80020c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ca:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80020ce:	2202      	movs	r2, #2
 80020d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	fa93 f2a3 	rbit	r2, r3
 80020e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80020f2:	2202      	movs	r2, #2
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	fa93 f2a3 	rbit	r2, r3
 8002104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002108:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002112:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002116:	2202      	movs	r2, #2
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800211e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	fa93 f2a3 	rbit	r2, r3
 8002128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800212c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002130:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002132:	4b41      	ldr	r3, [pc, #260]	@ (8002238 <HAL_RCC_OscConfig+0x934>)
 8002134:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002136:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800213e:	2102      	movs	r1, #2
 8002140:	6019      	str	r1, [r3, #0]
 8002142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002146:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	fa93 f1a3 	rbit	r1, r3
 8002150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002154:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002158:	6019      	str	r1, [r3, #0]
  return result;
 800215a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800215e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	fab3 f383 	clz	r3, r3
 8002168:	b2db      	uxtb	r3, r3
 800216a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800216e:	b2db      	uxtb	r3, r3
 8002170:	f003 031f 	and.w	r3, r3, #31
 8002174:	2101      	movs	r1, #1
 8002176:	fa01 f303 	lsl.w	r3, r1, r3
 800217a:	4013      	ands	r3, r2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d197      	bne.n	80020b0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002180:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002184:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 81a1 	beq.w	80024d8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002196:	2300      	movs	r3, #0
 8002198:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800219c:	4b26      	ldr	r3, [pc, #152]	@ (8002238 <HAL_RCC_OscConfig+0x934>)
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d116      	bne.n	80021d6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a8:	4b23      	ldr	r3, [pc, #140]	@ (8002238 <HAL_RCC_OscConfig+0x934>)
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	4a22      	ldr	r2, [pc, #136]	@ (8002238 <HAL_RCC_OscConfig+0x934>)
 80021ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021b2:	61d3      	str	r3, [r2, #28]
 80021b4:	4b20      	ldr	r3, [pc, #128]	@ (8002238 <HAL_RCC_OscConfig+0x934>)
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80021bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ca:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80021ce:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80021d0:	2301      	movs	r3, #1
 80021d2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002240 <HAL_RCC_OscConfig+0x93c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d11a      	bne.n	8002218 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021e2:	4b17      	ldr	r3, [pc, #92]	@ (8002240 <HAL_RCC_OscConfig+0x93c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a16      	ldr	r2, [pc, #88]	@ (8002240 <HAL_RCC_OscConfig+0x93c>)
 80021e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ee:	f7fe fac5 	bl	800077c <HAL_GetTick>
 80021f2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f6:	e009      	b.n	800220c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f8:	f7fe fac0 	bl	800077c <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b64      	cmp	r3, #100	@ 0x64
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e3b1      	b.n	8002970 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220c:	4b0c      	ldr	r3, [pc, #48]	@ (8002240 <HAL_RCC_OscConfig+0x93c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0ef      	beq.n	80021f8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002218:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800221c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d10d      	bne.n	8002244 <HAL_RCC_OscConfig+0x940>
 8002228:	4b03      	ldr	r3, [pc, #12]	@ (8002238 <HAL_RCC_OscConfig+0x934>)
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	4a02      	ldr	r2, [pc, #8]	@ (8002238 <HAL_RCC_OscConfig+0x934>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	6213      	str	r3, [r2, #32]
 8002234:	e03c      	b.n	80022b0 <HAL_RCC_OscConfig+0x9ac>
 8002236:	bf00      	nop
 8002238:	40021000 	.word	0x40021000
 800223c:	10908120 	.word	0x10908120
 8002240:	40007000 	.word	0x40007000
 8002244:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002248:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10c      	bne.n	800226e <HAL_RCC_OscConfig+0x96a>
 8002254:	4bc1      	ldr	r3, [pc, #772]	@ (800255c <HAL_RCC_OscConfig+0xc58>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	4ac0      	ldr	r2, [pc, #768]	@ (800255c <HAL_RCC_OscConfig+0xc58>)
 800225a:	f023 0301 	bic.w	r3, r3, #1
 800225e:	6213      	str	r3, [r2, #32]
 8002260:	4bbe      	ldr	r3, [pc, #760]	@ (800255c <HAL_RCC_OscConfig+0xc58>)
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	4abd      	ldr	r2, [pc, #756]	@ (800255c <HAL_RCC_OscConfig+0xc58>)
 8002266:	f023 0304 	bic.w	r3, r3, #4
 800226a:	6213      	str	r3, [r2, #32]
 800226c:	e020      	b.n	80022b0 <HAL_RCC_OscConfig+0x9ac>
 800226e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002272:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2b05      	cmp	r3, #5
 800227c:	d10c      	bne.n	8002298 <HAL_RCC_OscConfig+0x994>
 800227e:	4bb7      	ldr	r3, [pc, #732]	@ (800255c <HAL_RCC_OscConfig+0xc58>)
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	4ab6      	ldr	r2, [pc, #728]	@ (800255c <HAL_RCC_OscConfig+0xc58>)
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	6213      	str	r3, [r2, #32]
 800228a:	4bb4      	ldr	r3, [pc, #720]	@ (800255c <HAL_RCC_OscConfig+0xc58>)
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	4ab3      	ldr	r2, [pc, #716]	@ (800255c <HAL_RCC_OscConfig+0xc58>)
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	6213      	str	r3, [r2, #32]
 8002296:	e00b      	b.n	80022b0 <HAL_RCC_OscConfig+0x9ac>
 8002298:	4bb0      	ldr	r3, [pc, #704]	@ (800255c <HAL_RCC_OscConfig+0xc58>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4aaf      	ldr	r2, [pc, #700]	@ (800255c <HAL_RCC_OscConfig+0xc58>)
 800229e:	f023 0301 	bic.w	r3, r3, #1
 80022a2:	6213      	str	r3, [r2, #32]
 80022a4:	4bad      	ldr	r3, [pc, #692]	@ (800255c <HAL_RCC_OscConfig+0xc58>)
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	4aac      	ldr	r2, [pc, #688]	@ (800255c <HAL_RCC_OscConfig+0xc58>)
 80022aa:	f023 0304 	bic.w	r3, r3, #4
 80022ae:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 8081 	beq.w	80023c4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c2:	f7fe fa5b 	bl	800077c <HAL_GetTick>
 80022c6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ca:	e00b      	b.n	80022e4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022cc:	f7fe fa56 	bl	800077c <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022dc:	4293      	cmp	r3, r2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e345      	b.n	8002970 <HAL_RCC_OscConfig+0x106c>
 80022e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80022ec:	2202      	movs	r2, #2
 80022ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	fa93 f2a3 	rbit	r2, r3
 80022fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002302:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800230c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002310:	2202      	movs	r2, #2
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002318:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	fa93 f2a3 	rbit	r2, r3
 8002322:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002326:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800232a:	601a      	str	r2, [r3, #0]
  return result;
 800232c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002330:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002334:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002336:	fab3 f383 	clz	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	095b      	lsrs	r3, r3, #5
 800233e:	b2db      	uxtb	r3, r3
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d102      	bne.n	8002350 <HAL_RCC_OscConfig+0xa4c>
 800234a:	4b84      	ldr	r3, [pc, #528]	@ (800255c <HAL_RCC_OscConfig+0xc58>)
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	e013      	b.n	8002378 <HAL_RCC_OscConfig+0xa74>
 8002350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002354:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002358:	2202      	movs	r2, #2
 800235a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002360:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	fa93 f2a3 	rbit	r2, r3
 800236a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800236e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	4b79      	ldr	r3, [pc, #484]	@ (800255c <HAL_RCC_OscConfig+0xc58>)
 8002376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002378:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800237c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002380:	2102      	movs	r1, #2
 8002382:	6011      	str	r1, [r2, #0]
 8002384:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002388:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	fa92 f1a2 	rbit	r1, r2
 8002392:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002396:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800239a:	6011      	str	r1, [r2, #0]
  return result;
 800239c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023a0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80023a4:	6812      	ldr	r2, [r2, #0]
 80023a6:	fab2 f282 	clz	r2, r2
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	f002 021f 	and.w	r2, r2, #31
 80023b6:	2101      	movs	r1, #1
 80023b8:	fa01 f202 	lsl.w	r2, r1, r2
 80023bc:	4013      	ands	r3, r2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d084      	beq.n	80022cc <HAL_RCC_OscConfig+0x9c8>
 80023c2:	e07f      	b.n	80024c4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c4:	f7fe f9da 	bl	800077c <HAL_GetTick>
 80023c8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023cc:	e00b      	b.n	80023e6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ce:	f7fe f9d5 	bl	800077c <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023de:	4293      	cmp	r3, r2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e2c4      	b.n	8002970 <HAL_RCC_OscConfig+0x106c>
 80023e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ea:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80023ee:	2202      	movs	r2, #2
 80023f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	fa93 f2a3 	rbit	r2, r3
 8002400:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002404:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800240e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002412:	2202      	movs	r2, #2
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800241a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	fa93 f2a3 	rbit	r2, r3
 8002424:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002428:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800242c:	601a      	str	r2, [r3, #0]
  return result;
 800242e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002432:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002436:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	b2db      	uxtb	r3, r3
 8002442:	f043 0302 	orr.w	r3, r3, #2
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d102      	bne.n	8002452 <HAL_RCC_OscConfig+0xb4e>
 800244c:	4b43      	ldr	r3, [pc, #268]	@ (800255c <HAL_RCC_OscConfig+0xc58>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	e013      	b.n	800247a <HAL_RCC_OscConfig+0xb76>
 8002452:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002456:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800245a:	2202      	movs	r2, #2
 800245c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002462:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	fa93 f2a3 	rbit	r2, r3
 800246c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002470:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	4b39      	ldr	r3, [pc, #228]	@ (800255c <HAL_RCC_OscConfig+0xc58>)
 8002478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800247e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002482:	2102      	movs	r1, #2
 8002484:	6011      	str	r1, [r2, #0]
 8002486:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800248a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	fa92 f1a2 	rbit	r1, r2
 8002494:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002498:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800249c:	6011      	str	r1, [r2, #0]
  return result;
 800249e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024a2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	fab2 f282 	clz	r2, r2
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	f002 021f 	and.w	r2, r2, #31
 80024b8:	2101      	movs	r1, #1
 80024ba:	fa01 f202 	lsl.w	r2, r1, r2
 80024be:	4013      	ands	r3, r2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d184      	bne.n	80023ce <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024c4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d105      	bne.n	80024d8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024cc:	4b23      	ldr	r3, [pc, #140]	@ (800255c <HAL_RCC_OscConfig+0xc58>)
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	4a22      	ldr	r2, [pc, #136]	@ (800255c <HAL_RCC_OscConfig+0xc58>)
 80024d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024d6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 8242 	beq.w	800296e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024ea:	4b1c      	ldr	r3, [pc, #112]	@ (800255c <HAL_RCC_OscConfig+0xc58>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 030c 	and.w	r3, r3, #12
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	f000 8213 	beq.w	800291e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	2b02      	cmp	r3, #2
 8002506:	f040 8162 	bne.w	80027ce <HAL_RCC_OscConfig+0xeca>
 800250a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002512:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002516:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800251c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	fa93 f2a3 	rbit	r2, r3
 8002526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800252e:	601a      	str	r2, [r3, #0]
  return result;
 8002530:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002534:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002538:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253a:	fab3 f383 	clz	r3, r3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002544:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	461a      	mov	r2, r3
 800254c:	2300      	movs	r3, #0
 800254e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7fe f914 	bl	800077c <HAL_GetTick>
 8002554:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002558:	e00c      	b.n	8002574 <HAL_RCC_OscConfig+0xc70>
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002560:	f7fe f90c 	bl	800077c <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e1fd      	b.n	8002970 <HAL_RCC_OscConfig+0x106c>
 8002574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002578:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800257c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002580:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002582:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002586:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	fa93 f2a3 	rbit	r2, r3
 8002590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002594:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002598:	601a      	str	r2, [r3, #0]
  return result;
 800259a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800259e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80025a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a4:	fab3 f383 	clz	r3, r3
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d102      	bne.n	80025be <HAL_RCC_OscConfig+0xcba>
 80025b8:	4bb0      	ldr	r3, [pc, #704]	@ (800287c <HAL_RCC_OscConfig+0xf78>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	e027      	b.n	800260e <HAL_RCC_OscConfig+0xd0a>
 80025be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80025c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	fa93 f2a3 	rbit	r2, r3
 80025da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025de:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80025ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	fa93 f2a3 	rbit	r2, r3
 8002600:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002604:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	4b9c      	ldr	r3, [pc, #624]	@ (800287c <HAL_RCC_OscConfig+0xf78>)
 800260c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002612:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002616:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800261a:	6011      	str	r1, [r2, #0]
 800261c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002620:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	fa92 f1a2 	rbit	r1, r2
 800262a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800262e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002632:	6011      	str	r1, [r2, #0]
  return result;
 8002634:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002638:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800263c:	6812      	ldr	r2, [r2, #0]
 800263e:	fab2 f282 	clz	r2, r2
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	f042 0220 	orr.w	r2, r2, #32
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	f002 021f 	and.w	r2, r2, #31
 800264e:	2101      	movs	r1, #1
 8002650:	fa01 f202 	lsl.w	r2, r1, r2
 8002654:	4013      	ands	r3, r2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d182      	bne.n	8002560 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800265a:	4b88      	ldr	r3, [pc, #544]	@ (800287c <HAL_RCC_OscConfig+0xf78>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002662:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002666:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800266e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002672:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	430b      	orrs	r3, r1
 800267c:	497f      	ldr	r1, [pc, #508]	@ (800287c <HAL_RCC_OscConfig+0xf78>)
 800267e:	4313      	orrs	r3, r2
 8002680:	604b      	str	r3, [r1, #4]
 8002682:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002686:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800268a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800268e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002694:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	fa93 f2a3 	rbit	r2, r3
 800269e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80026a6:	601a      	str	r2, [r3, #0]
  return result;
 80026a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ac:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80026b0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026b2:	fab3 f383 	clz	r3, r3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026bc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	461a      	mov	r2, r3
 80026c4:	2301      	movs	r3, #1
 80026c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c8:	f7fe f858 	bl	800077c <HAL_GetTick>
 80026cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026d0:	e009      	b.n	80026e6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d2:	f7fe f853 	bl	800077c <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e144      	b.n	8002970 <HAL_RCC_OscConfig+0x106c>
 80026e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ea:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80026ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	fa93 f2a3 	rbit	r2, r3
 8002702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002706:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800270a:	601a      	str	r2, [r3, #0]
  return result;
 800270c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002710:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002714:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002716:	fab3 f383 	clz	r3, r3
 800271a:	b2db      	uxtb	r3, r3
 800271c:	095b      	lsrs	r3, r3, #5
 800271e:	b2db      	uxtb	r3, r3
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b01      	cmp	r3, #1
 8002728:	d102      	bne.n	8002730 <HAL_RCC_OscConfig+0xe2c>
 800272a:	4b54      	ldr	r3, [pc, #336]	@ (800287c <HAL_RCC_OscConfig+0xf78>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	e027      	b.n	8002780 <HAL_RCC_OscConfig+0xe7c>
 8002730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002734:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002738:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800273c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002742:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	fa93 f2a3 	rbit	r2, r3
 800274c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002750:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800275e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002768:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	fa93 f2a3 	rbit	r2, r3
 8002772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002776:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	4b3f      	ldr	r3, [pc, #252]	@ (800287c <HAL_RCC_OscConfig+0xf78>)
 800277e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002780:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002784:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002788:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800278c:	6011      	str	r1, [r2, #0]
 800278e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002792:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	fa92 f1a2 	rbit	r1, r2
 800279c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027a0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80027a4:	6011      	str	r1, [r2, #0]
  return result;
 80027a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027aa:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80027ae:	6812      	ldr	r2, [r2, #0]
 80027b0:	fab2 f282 	clz	r2, r2
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	f042 0220 	orr.w	r2, r2, #32
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	f002 021f 	and.w	r2, r2, #31
 80027c0:	2101      	movs	r1, #1
 80027c2:	fa01 f202 	lsl.w	r2, r1, r2
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d082      	beq.n	80026d2 <HAL_RCC_OscConfig+0xdce>
 80027cc:	e0cf      	b.n	800296e <HAL_RCC_OscConfig+0x106a>
 80027ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80027d6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	fa93 f2a3 	rbit	r2, r3
 80027ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ee:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80027f2:	601a      	str	r2, [r3, #0]
  return result;
 80027f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80027fc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002808:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	461a      	mov	r2, r3
 8002810:	2300      	movs	r3, #0
 8002812:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7fd ffb2 	bl	800077c <HAL_GetTick>
 8002818:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800281c:	e009      	b.n	8002832 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800281e:	f7fd ffad 	bl	800077c <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e09e      	b.n	8002970 <HAL_RCC_OscConfig+0x106c>
 8002832:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002836:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800283a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800283e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002844:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	fa93 f2a3 	rbit	r2, r3
 800284e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002852:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002856:	601a      	str	r2, [r3, #0]
  return result;
 8002858:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002860:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002862:	fab3 f383 	clz	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	095b      	lsrs	r3, r3, #5
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b01      	cmp	r3, #1
 8002874:	d104      	bne.n	8002880 <HAL_RCC_OscConfig+0xf7c>
 8002876:	4b01      	ldr	r3, [pc, #4]	@ (800287c <HAL_RCC_OscConfig+0xf78>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	e029      	b.n	80028d0 <HAL_RCC_OscConfig+0xfcc>
 800287c:	40021000 	.word	0x40021000
 8002880:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002884:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002888:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800288c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002892:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	fa93 f2a3 	rbit	r2, r3
 800289c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028aa:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80028ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	fa93 f2a3 	rbit	r2, r3
 80028c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	4b2b      	ldr	r3, [pc, #172]	@ (800297c <HAL_RCC_OscConfig+0x1078>)
 80028ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028d4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80028d8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80028dc:	6011      	str	r1, [r2, #0]
 80028de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028e2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	fa92 f1a2 	rbit	r1, r2
 80028ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028f0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80028f4:	6011      	str	r1, [r2, #0]
  return result;
 80028f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028fa:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	fab2 f282 	clz	r2, r2
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	f042 0220 	orr.w	r2, r2, #32
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	f002 021f 	and.w	r2, r2, #31
 8002910:	2101      	movs	r1, #1
 8002912:	fa01 f202 	lsl.w	r2, r1, r2
 8002916:	4013      	ands	r3, r2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d180      	bne.n	800281e <HAL_RCC_OscConfig+0xf1a>
 800291c:	e027      	b.n	800296e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800291e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002922:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e01e      	b.n	8002970 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002932:	4b12      	ldr	r3, [pc, #72]	@ (800297c <HAL_RCC_OscConfig+0x1078>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800293a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800293e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002946:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	429a      	cmp	r2, r3
 8002950:	d10b      	bne.n	800296a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002952:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002956:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800295a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800295e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002966:	429a      	cmp	r2, r3
 8002968:	d001      	beq.n	800296e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40021000 	.word	0x40021000

08002980 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b09e      	sub	sp, #120	@ 0x78
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e162      	b.n	8002c5e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002998:	4b90      	ldr	r3, [pc, #576]	@ (8002bdc <HAL_RCC_ClockConfig+0x25c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d910      	bls.n	80029c8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a6:	4b8d      	ldr	r3, [pc, #564]	@ (8002bdc <HAL_RCC_ClockConfig+0x25c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f023 0207 	bic.w	r2, r3, #7
 80029ae:	498b      	ldr	r1, [pc, #556]	@ (8002bdc <HAL_RCC_ClockConfig+0x25c>)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b6:	4b89      	ldr	r3, [pc, #548]	@ (8002bdc <HAL_RCC_ClockConfig+0x25c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d001      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e14a      	b.n	8002c5e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d008      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d4:	4b82      	ldr	r3, [pc, #520]	@ (8002be0 <HAL_RCC_ClockConfig+0x260>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	497f      	ldr	r1, [pc, #508]	@ (8002be0 <HAL_RCC_ClockConfig+0x260>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 80dc 	beq.w	8002bac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d13c      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xf6>
 80029fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a00:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a04:	fa93 f3a3 	rbit	r3, r3
 8002a08:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002a0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0c:	fab3 f383 	clz	r3, r3
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	095b      	lsrs	r3, r3, #5
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d102      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xa6>
 8002a20:	4b6f      	ldr	r3, [pc, #444]	@ (8002be0 <HAL_RCC_ClockConfig+0x260>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	e00f      	b.n	8002a46 <HAL_RCC_ClockConfig+0xc6>
 8002a26:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a2a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a2e:	fa93 f3a3 	rbit	r3, r3
 8002a32:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a38:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a3c:	fa93 f3a3 	rbit	r3, r3
 8002a40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a42:	4b67      	ldr	r3, [pc, #412]	@ (8002be0 <HAL_RCC_ClockConfig+0x260>)
 8002a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a46:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a4a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a4e:	fa92 f2a2 	rbit	r2, r2
 8002a52:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002a54:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002a56:	fab2 f282 	clz	r2, r2
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	f042 0220 	orr.w	r2, r2, #32
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	f002 021f 	and.w	r2, r2, #31
 8002a66:	2101      	movs	r1, #1
 8002a68:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d17b      	bne.n	8002b6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e0f3      	b.n	8002c5e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d13c      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x178>
 8002a7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a82:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a86:	fa93 f3a3 	rbit	r3, r3
 8002a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002a8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	095b      	lsrs	r3, r3, #5
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d102      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x128>
 8002aa2:	4b4f      	ldr	r3, [pc, #316]	@ (8002be0 <HAL_RCC_ClockConfig+0x260>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	e00f      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x148>
 8002aa8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002aac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ab0:	fa93 f3a3 	rbit	r3, r3
 8002ab4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ab6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002aba:	643b      	str	r3, [r7, #64]	@ 0x40
 8002abc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ac4:	4b46      	ldr	r3, [pc, #280]	@ (8002be0 <HAL_RCC_ClockConfig+0x260>)
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002acc:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002ace:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002ad0:	fa92 f2a2 	rbit	r2, r2
 8002ad4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002ad6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ad8:	fab2 f282 	clz	r2, r2
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	f042 0220 	orr.w	r2, r2, #32
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	f002 021f 	and.w	r2, r2, #31
 8002ae8:	2101      	movs	r1, #1
 8002aea:	fa01 f202 	lsl.w	r2, r1, r2
 8002aee:	4013      	ands	r3, r2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d13a      	bne.n	8002b6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0b2      	b.n	8002c5e <HAL_RCC_ClockConfig+0x2de>
 8002af8:	2302      	movs	r3, #2
 8002afa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002afe:	fa93 f3a3 	rbit	r3, r3
 8002b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b06:	fab3 f383 	clz	r3, r3
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	095b      	lsrs	r3, r3, #5
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d102      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x1a0>
 8002b1a:	4b31      	ldr	r3, [pc, #196]	@ (8002be0 <HAL_RCC_ClockConfig+0x260>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	e00d      	b.n	8002b3c <HAL_RCC_ClockConfig+0x1bc>
 8002b20:	2302      	movs	r3, #2
 8002b22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b26:	fa93 f3a3 	rbit	r3, r3
 8002b2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	623b      	str	r3, [r7, #32]
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	fa93 f3a3 	rbit	r3, r3
 8002b36:	61fb      	str	r3, [r7, #28]
 8002b38:	4b29      	ldr	r3, [pc, #164]	@ (8002be0 <HAL_RCC_ClockConfig+0x260>)
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	61ba      	str	r2, [r7, #24]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	fa92 f2a2 	rbit	r2, r2
 8002b46:	617a      	str	r2, [r7, #20]
  return result;
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	fab2 f282 	clz	r2, r2
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	f042 0220 	orr.w	r2, r2, #32
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	f002 021f 	and.w	r2, r2, #31
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e079      	b.n	8002c5e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002be0 <HAL_RCC_ClockConfig+0x260>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f023 0203 	bic.w	r2, r3, #3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	491a      	ldr	r1, [pc, #104]	@ (8002be0 <HAL_RCC_ClockConfig+0x260>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b7c:	f7fd fdfe 	bl	800077c <HAL_GetTick>
 8002b80:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b82:	e00a      	b.n	8002b9a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b84:	f7fd fdfa 	bl	800077c <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e061      	b.n	8002c5e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9a:	4b11      	ldr	r3, [pc, #68]	@ (8002be0 <HAL_RCC_ClockConfig+0x260>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 020c 	and.w	r2, r3, #12
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d1eb      	bne.n	8002b84 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bac:	4b0b      	ldr	r3, [pc, #44]	@ (8002bdc <HAL_RCC_ClockConfig+0x25c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d214      	bcs.n	8002be4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bba:	4b08      	ldr	r3, [pc, #32]	@ (8002bdc <HAL_RCC_ClockConfig+0x25c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 0207 	bic.w	r2, r3, #7
 8002bc2:	4906      	ldr	r1, [pc, #24]	@ (8002bdc <HAL_RCC_ClockConfig+0x25c>)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bca:	4b04      	ldr	r3, [pc, #16]	@ (8002bdc <HAL_RCC_ClockConfig+0x25c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d005      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e040      	b.n	8002c5e <HAL_RCC_ClockConfig+0x2de>
 8002bdc:	40022000 	.word	0x40022000
 8002be0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c68 <HAL_RCC_ClockConfig+0x2e8>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	491a      	ldr	r1, [pc, #104]	@ (8002c68 <HAL_RCC_ClockConfig+0x2e8>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d009      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c0e:	4b16      	ldr	r3, [pc, #88]	@ (8002c68 <HAL_RCC_ClockConfig+0x2e8>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4912      	ldr	r1, [pc, #72]	@ (8002c68 <HAL_RCC_ClockConfig+0x2e8>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c22:	f000 f829 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 8002c26:	4601      	mov	r1, r0
 8002c28:	4b0f      	ldr	r3, [pc, #60]	@ (8002c68 <HAL_RCC_ClockConfig+0x2e8>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c30:	22f0      	movs	r2, #240	@ 0xf0
 8002c32:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	fa92 f2a2 	rbit	r2, r2
 8002c3a:	60fa      	str	r2, [r7, #12]
  return result;
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	fab2 f282 	clz	r2, r2
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	40d3      	lsrs	r3, r2
 8002c46:	4a09      	ldr	r2, [pc, #36]	@ (8002c6c <HAL_RCC_ClockConfig+0x2ec>)
 8002c48:	5cd3      	ldrb	r3, [r2, r3]
 8002c4a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c4e:	4a08      	ldr	r2, [pc, #32]	@ (8002c70 <HAL_RCC_ClockConfig+0x2f0>)
 8002c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c52:	4b08      	ldr	r3, [pc, #32]	@ (8002c74 <HAL_RCC_ClockConfig+0x2f4>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fd fd4c 	bl	80006f4 <HAL_InitTick>
  
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3778      	adds	r7, #120	@ 0x78
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	080037c8 	.word	0x080037c8
 8002c70:	20000000 	.word	0x20000000
 8002c74:	20000004 	.word	0x20000004

08002c78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	2300      	movs	r3, #0
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002c92:	4b1e      	ldr	r3, [pc, #120]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x94>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d002      	beq.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x30>
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d003      	beq.n	8002cae <HAL_RCC_GetSysClockFreq+0x36>
 8002ca6:	e026      	b.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ca8:	4b19      	ldr	r3, [pc, #100]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x98>)
 8002caa:	613b      	str	r3, [r7, #16]
      break;
 8002cac:	e026      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	0c9b      	lsrs	r3, r3, #18
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	4a17      	ldr	r2, [pc, #92]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cb8:	5cd3      	ldrb	r3, [r2, r3]
 8002cba:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002cbc:	4b13      	ldr	r3, [pc, #76]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x94>)
 8002cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	4a14      	ldr	r2, [pc, #80]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cc6:	5cd3      	ldrb	r3, [r2, r3]
 8002cc8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d008      	beq.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cd4:	4a0e      	ldr	r2, [pc, #56]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	e004      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a0c      	ldr	r2, [pc, #48]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cea:	fb02 f303 	mul.w	r3, r2, r3
 8002cee:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	613b      	str	r3, [r7, #16]
      break;
 8002cf4:	e002      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cf6:	4b06      	ldr	r3, [pc, #24]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cf8:	613b      	str	r3, [r7, #16]
      break;
 8002cfa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cfc:	693b      	ldr	r3, [r7, #16]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	371c      	adds	r7, #28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	007a1200 	.word	0x007a1200
 8002d14:	080037e0 	.word	0x080037e0
 8002d18:	080037f0 	.word	0x080037f0
 8002d1c:	003d0900 	.word	0x003d0900

08002d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d24:	4b03      	ldr	r3, [pc, #12]	@ (8002d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d26:	681b      	ldr	r3, [r3, #0]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	20000000 	.word	0x20000000

08002d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002d3e:	f7ff ffef 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 8002d42:	4601      	mov	r1, r0
 8002d44:	4b0b      	ldr	r3, [pc, #44]	@ (8002d74 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d4c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002d50:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	fa92 f2a2 	rbit	r2, r2
 8002d58:	603a      	str	r2, [r7, #0]
  return result;
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	fab2 f282 	clz	r2, r2
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	40d3      	lsrs	r3, r2
 8002d64:	4a04      	ldr	r2, [pc, #16]	@ (8002d78 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002d66:	5cd3      	ldrb	r3, [r2, r3]
 8002d68:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40021000 	.word	0x40021000
 8002d78:	080037d8 	.word	0x080037d8

08002d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002d82:	f7ff ffcd 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 8002d86:	4601      	mov	r1, r0
 8002d88:	4b0b      	ldr	r3, [pc, #44]	@ (8002db8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002d90:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002d94:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	fa92 f2a2 	rbit	r2, r2
 8002d9c:	603a      	str	r2, [r7, #0]
  return result;
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	fab2 f282 	clz	r2, r2
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	40d3      	lsrs	r3, r2
 8002da8:	4a04      	ldr	r2, [pc, #16]	@ (8002dbc <HAL_RCC_GetPCLK2Freq+0x40>)
 8002daa:	5cd3      	ldrb	r3, [r2, r3]
 8002dac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	080037d8 	.word	0x080037d8

08002dc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b092      	sub	sp, #72	@ 0x48
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80cd 	beq.w	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002de4:	4b86      	ldr	r3, [pc, #536]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10e      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df0:	4b83      	ldr	r3, [pc, #524]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	4a82      	ldr	r2, [pc, #520]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002df6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dfa:	61d3      	str	r3, [r2, #28]
 8002dfc:	4b80      	ldr	r3, [pc, #512]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0e:	4b7d      	ldr	r3, [pc, #500]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d118      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e1a:	4b7a      	ldr	r3, [pc, #488]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a79      	ldr	r2, [pc, #484]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e26:	f7fd fca9 	bl	800077c <HAL_GetTick>
 8002e2a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2c:	e008      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e2e:	f7fd fca5 	bl	800077c <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b64      	cmp	r3, #100	@ 0x64
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e0db      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e40:	4b70      	ldr	r3, [pc, #448]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f0      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e4c:	4b6c      	ldr	r3, [pc, #432]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d07d      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d076      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e6a:	4b65      	ldr	r3, [pc, #404]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e78:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7c:	fa93 f3a3 	rbit	r3, r3
 8002e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e84:	fab3 f383 	clz	r3, r3
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	4b5e      	ldr	r3, [pc, #376]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	461a      	mov	r2, r3
 8002e94:	2301      	movs	r3, #1
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ea0:	fa93 f3a3 	rbit	r3, r3
 8002ea4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ea8:	fab3 f383 	clz	r3, r3
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	461a      	mov	r2, r3
 8002eb0:	4b55      	ldr	r3, [pc, #340]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	2300      	movs	r3, #0
 8002eba:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ebc:	4a50      	ldr	r2, [pc, #320]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ec0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d045      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ecc:	f7fd fc56 	bl	800077c <HAL_GetTick>
 8002ed0:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed2:	e00a      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed4:	f7fd fc52 	bl	800077c <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e086      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002eea:	2302      	movs	r3, #2
 8002eec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef0:	fa93 f3a3 	rbit	r3, r3
 8002ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	623b      	str	r3, [r7, #32]
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	fa93 f3a3 	rbit	r3, r3
 8002f00:	61fb      	str	r3, [r7, #28]
  return result;
 8002f02:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f04:	fab3 f383 	clz	r3, r3
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	f043 0302 	orr.w	r3, r3, #2
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d102      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002f18:	4b39      	ldr	r3, [pc, #228]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	e007      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	fa93 f3a3 	rbit	r3, r3
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	4b35      	ldr	r3, [pc, #212]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2e:	2202      	movs	r2, #2
 8002f30:	613a      	str	r2, [r7, #16]
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	fa92 f2a2 	rbit	r2, r2
 8002f38:	60fa      	str	r2, [r7, #12]
  return result;
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	fab2 f282 	clz	r2, r2
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	f002 021f 	and.w	r2, r2, #31
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0bd      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f58:	4b29      	ldr	r3, [pc, #164]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	4926      	ldr	r1, [pc, #152]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f6a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d105      	bne.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f72:	4b23      	ldr	r3, [pc, #140]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	4a22      	ldr	r2, [pc, #136]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f7c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d008      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8e:	f023 0203 	bic.w	r2, r3, #3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	491a      	ldr	r1, [pc, #104]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0320 	and.w	r3, r3, #32
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fa8:	4b15      	ldr	r3, [pc, #84]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fac:	f023 0210 	bic.w	r2, r3, #16
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4912      	ldr	r1, [pc, #72]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d008      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fca:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	490b      	ldr	r1, [pc, #44]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002fe4:	4b06      	ldr	r3, [pc, #24]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	4903      	ldr	r1, [pc, #12]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3748      	adds	r7, #72	@ 0x48
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40021000 	.word	0x40021000
 8003004:	40007000 	.word	0x40007000
 8003008:	10908100 	.word	0x10908100

0800300c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e040      	b.n	80030a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7fd fa9a 	bl	8000568 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2224      	movs	r2, #36	@ 0x24
 8003038:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0201 	bic.w	r2, r2, #1
 8003048:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f95e 	bl	8003314 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f825 	bl	80030a8 <UART_SetConfig>
 800305e:	4603      	mov	r3, r0
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e01b      	b.n	80030a0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003076:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003086:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0201 	orr.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f9dd 	bl	8003458 <UART_CheckIdleState>
 800309e:	4603      	mov	r3, r0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b088      	sub	sp, #32
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	4b8a      	ldr	r3, [pc, #552]	@ (80032fc <UART_SetConfig+0x254>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6812      	ldr	r2, [r2, #0]
 80030da:	6979      	ldr	r1, [r7, #20]
 80030dc:	430b      	orrs	r3, r1
 80030de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	4313      	orrs	r3, r2
 8003104:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	430a      	orrs	r2, r1
 8003118:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a78      	ldr	r2, [pc, #480]	@ (8003300 <UART_SetConfig+0x258>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d120      	bne.n	8003166 <UART_SetConfig+0xbe>
 8003124:	4b77      	ldr	r3, [pc, #476]	@ (8003304 <UART_SetConfig+0x25c>)
 8003126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003128:	f003 0303 	and.w	r3, r3, #3
 800312c:	2b03      	cmp	r3, #3
 800312e:	d817      	bhi.n	8003160 <UART_SetConfig+0xb8>
 8003130:	a201      	add	r2, pc, #4	@ (adr r2, 8003138 <UART_SetConfig+0x90>)
 8003132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003136:	bf00      	nop
 8003138:	08003149 	.word	0x08003149
 800313c:	08003155 	.word	0x08003155
 8003140:	0800315b 	.word	0x0800315b
 8003144:	0800314f 	.word	0x0800314f
 8003148:	2300      	movs	r3, #0
 800314a:	77fb      	strb	r3, [r7, #31]
 800314c:	e01d      	b.n	800318a <UART_SetConfig+0xe2>
 800314e:	2302      	movs	r3, #2
 8003150:	77fb      	strb	r3, [r7, #31]
 8003152:	e01a      	b.n	800318a <UART_SetConfig+0xe2>
 8003154:	2304      	movs	r3, #4
 8003156:	77fb      	strb	r3, [r7, #31]
 8003158:	e017      	b.n	800318a <UART_SetConfig+0xe2>
 800315a:	2308      	movs	r3, #8
 800315c:	77fb      	strb	r3, [r7, #31]
 800315e:	e014      	b.n	800318a <UART_SetConfig+0xe2>
 8003160:	2310      	movs	r3, #16
 8003162:	77fb      	strb	r3, [r7, #31]
 8003164:	e011      	b.n	800318a <UART_SetConfig+0xe2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a67      	ldr	r2, [pc, #412]	@ (8003308 <UART_SetConfig+0x260>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d102      	bne.n	8003176 <UART_SetConfig+0xce>
 8003170:	2300      	movs	r3, #0
 8003172:	77fb      	strb	r3, [r7, #31]
 8003174:	e009      	b.n	800318a <UART_SetConfig+0xe2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a64      	ldr	r2, [pc, #400]	@ (800330c <UART_SetConfig+0x264>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d102      	bne.n	8003186 <UART_SetConfig+0xde>
 8003180:	2300      	movs	r3, #0
 8003182:	77fb      	strb	r3, [r7, #31]
 8003184:	e001      	b.n	800318a <UART_SetConfig+0xe2>
 8003186:	2310      	movs	r3, #16
 8003188:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003192:	d15a      	bne.n	800324a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003194:	7ffb      	ldrb	r3, [r7, #31]
 8003196:	2b08      	cmp	r3, #8
 8003198:	d827      	bhi.n	80031ea <UART_SetConfig+0x142>
 800319a:	a201      	add	r2, pc, #4	@ (adr r2, 80031a0 <UART_SetConfig+0xf8>)
 800319c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a0:	080031c5 	.word	0x080031c5
 80031a4:	080031cd 	.word	0x080031cd
 80031a8:	080031d5 	.word	0x080031d5
 80031ac:	080031eb 	.word	0x080031eb
 80031b0:	080031db 	.word	0x080031db
 80031b4:	080031eb 	.word	0x080031eb
 80031b8:	080031eb 	.word	0x080031eb
 80031bc:	080031eb 	.word	0x080031eb
 80031c0:	080031e3 	.word	0x080031e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031c4:	f7ff fdb8 	bl	8002d38 <HAL_RCC_GetPCLK1Freq>
 80031c8:	61b8      	str	r0, [r7, #24]
        break;
 80031ca:	e013      	b.n	80031f4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031cc:	f7ff fdd6 	bl	8002d7c <HAL_RCC_GetPCLK2Freq>
 80031d0:	61b8      	str	r0, [r7, #24]
        break;
 80031d2:	e00f      	b.n	80031f4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031d4:	4b4e      	ldr	r3, [pc, #312]	@ (8003310 <UART_SetConfig+0x268>)
 80031d6:	61bb      	str	r3, [r7, #24]
        break;
 80031d8:	e00c      	b.n	80031f4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031da:	f7ff fd4d 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 80031de:	61b8      	str	r0, [r7, #24]
        break;
 80031e0:	e008      	b.n	80031f4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031e6:	61bb      	str	r3, [r7, #24]
        break;
 80031e8:	e004      	b.n	80031f4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	77bb      	strb	r3, [r7, #30]
        break;
 80031f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d074      	beq.n	80032e4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	005a      	lsls	r2, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	085b      	lsrs	r3, r3, #1
 8003204:	441a      	add	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	fbb2 f3f3 	udiv	r3, r2, r3
 800320e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	2b0f      	cmp	r3, #15
 8003214:	d916      	bls.n	8003244 <UART_SetConfig+0x19c>
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800321c:	d212      	bcs.n	8003244 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	b29b      	uxth	r3, r3
 8003222:	f023 030f 	bic.w	r3, r3, #15
 8003226:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	085b      	lsrs	r3, r3, #1
 800322c:	b29b      	uxth	r3, r3
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	b29a      	uxth	r2, r3
 8003234:	89fb      	ldrh	r3, [r7, #14]
 8003236:	4313      	orrs	r3, r2
 8003238:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	89fa      	ldrh	r2, [r7, #14]
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	e04f      	b.n	80032e4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	77bb      	strb	r3, [r7, #30]
 8003248:	e04c      	b.n	80032e4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800324a:	7ffb      	ldrb	r3, [r7, #31]
 800324c:	2b08      	cmp	r3, #8
 800324e:	d828      	bhi.n	80032a2 <UART_SetConfig+0x1fa>
 8003250:	a201      	add	r2, pc, #4	@ (adr r2, 8003258 <UART_SetConfig+0x1b0>)
 8003252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003256:	bf00      	nop
 8003258:	0800327d 	.word	0x0800327d
 800325c:	08003285 	.word	0x08003285
 8003260:	0800328d 	.word	0x0800328d
 8003264:	080032a3 	.word	0x080032a3
 8003268:	08003293 	.word	0x08003293
 800326c:	080032a3 	.word	0x080032a3
 8003270:	080032a3 	.word	0x080032a3
 8003274:	080032a3 	.word	0x080032a3
 8003278:	0800329b 	.word	0x0800329b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800327c:	f7ff fd5c 	bl	8002d38 <HAL_RCC_GetPCLK1Freq>
 8003280:	61b8      	str	r0, [r7, #24]
        break;
 8003282:	e013      	b.n	80032ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003284:	f7ff fd7a 	bl	8002d7c <HAL_RCC_GetPCLK2Freq>
 8003288:	61b8      	str	r0, [r7, #24]
        break;
 800328a:	e00f      	b.n	80032ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800328c:	4b20      	ldr	r3, [pc, #128]	@ (8003310 <UART_SetConfig+0x268>)
 800328e:	61bb      	str	r3, [r7, #24]
        break;
 8003290:	e00c      	b.n	80032ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003292:	f7ff fcf1 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 8003296:	61b8      	str	r0, [r7, #24]
        break;
 8003298:	e008      	b.n	80032ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800329e:	61bb      	str	r3, [r7, #24]
        break;
 80032a0:	e004      	b.n	80032ac <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	77bb      	strb	r3, [r7, #30]
        break;
 80032aa:	bf00      	nop
    }

    if (pclk != 0U)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d018      	beq.n	80032e4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	085a      	lsrs	r2, r3, #1
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	441a      	add	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	2b0f      	cmp	r3, #15
 80032ca:	d909      	bls.n	80032e0 <UART_SetConfig+0x238>
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032d2:	d205      	bcs.n	80032e0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	e001      	b.n	80032e4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80032f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3720      	adds	r7, #32
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	efff69f3 	.word	0xefff69f3
 8003300:	40013800 	.word	0x40013800
 8003304:	40021000 	.word	0x40021000
 8003308:	40004400 	.word	0x40004400
 800330c:	40004800 	.word	0x40004800
 8003310:	007a1200 	.word	0x007a1200

08003314 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00a      	beq.n	800333e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a8:	f003 0310 	and.w	r3, r3, #16
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ca:	f003 0320 	and.w	r3, r3, #32
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d01a      	beq.n	800342a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003412:	d10a      	bne.n	800342a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	605a      	str	r2, [r3, #4]
  }
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b098      	sub	sp, #96	@ 0x60
 800345c:	af02      	add	r7, sp, #8
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003468:	f7fd f988 	bl	800077c <HAL_GetTick>
 800346c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b08      	cmp	r3, #8
 800347a:	d12e      	bne.n	80034da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800347c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003484:	2200      	movs	r2, #0
 8003486:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f88c 	bl	80035a8 <UART_WaitOnFlagUntilTimeout>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d021      	beq.n	80034da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800349e:	e853 3f00 	ldrex	r3, [r3]
 80034a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	461a      	mov	r2, r3
 80034b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80034b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034bc:	e841 2300 	strex	r3, r2, [r1]
 80034c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1e6      	bne.n	8003496 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e062      	b.n	80035a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d149      	bne.n	800357c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034f0:	2200      	movs	r2, #0
 80034f2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f856 	bl	80035a8 <UART_WaitOnFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d03c      	beq.n	800357c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350a:	e853 3f00 	ldrex	r3, [r3]
 800350e:	623b      	str	r3, [r7, #32]
   return(result);
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003516:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	461a      	mov	r2, r3
 800351e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003520:	633b      	str	r3, [r7, #48]	@ 0x30
 8003522:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003524:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003526:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003528:	e841 2300 	strex	r3, r2, [r1]
 800352c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800352e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e6      	bne.n	8003502 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	3308      	adds	r3, #8
 800353a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	e853 3f00 	ldrex	r3, [r3]
 8003542:	60fb      	str	r3, [r7, #12]
   return(result);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f023 0301 	bic.w	r3, r3, #1
 800354a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3308      	adds	r3, #8
 8003552:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003554:	61fa      	str	r2, [r7, #28]
 8003556:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003558:	69b9      	ldr	r1, [r7, #24]
 800355a:	69fa      	ldr	r2, [r7, #28]
 800355c:	e841 2300 	strex	r3, r2, [r1]
 8003560:	617b      	str	r3, [r7, #20]
   return(result);
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1e5      	bne.n	8003534 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2220      	movs	r2, #32
 800356c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e011      	b.n	80035a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2220      	movs	r2, #32
 8003586:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3758      	adds	r7, #88	@ 0x58
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	4613      	mov	r3, r2
 80035b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b8:	e04f      	b.n	800365a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c0:	d04b      	beq.n	800365a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c2:	f7fd f8db 	bl	800077c <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d302      	bcc.n	80035d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e04e      	b.n	800367a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d037      	beq.n	800365a <UART_WaitOnFlagUntilTimeout+0xb2>
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b80      	cmp	r3, #128	@ 0x80
 80035ee:	d034      	beq.n	800365a <UART_WaitOnFlagUntilTimeout+0xb2>
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b40      	cmp	r3, #64	@ 0x40
 80035f4:	d031      	beq.n	800365a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b08      	cmp	r3, #8
 8003602:	d110      	bne.n	8003626 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2208      	movs	r2, #8
 800360a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 f838 	bl	8003682 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2208      	movs	r2, #8
 8003616:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e029      	b.n	800367a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003630:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003634:	d111      	bne.n	800365a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800363e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 f81e 	bl	8003682 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2220      	movs	r2, #32
 800364a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e00f      	b.n	800367a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	69da      	ldr	r2, [r3, #28]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	4013      	ands	r3, r2
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	429a      	cmp	r2, r3
 8003668:	bf0c      	ite	eq
 800366a:	2301      	moveq	r3, #1
 800366c:	2300      	movne	r3, #0
 800366e:	b2db      	uxtb	r3, r3
 8003670:	461a      	mov	r2, r3
 8003672:	79fb      	ldrb	r3, [r7, #7]
 8003674:	429a      	cmp	r2, r3
 8003676:	d0a0      	beq.n	80035ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003682:	b480      	push	{r7}
 8003684:	b095      	sub	sp, #84	@ 0x54
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003692:	e853 3f00 	ldrex	r3, [r3]
 8003696:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800369a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800369e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	461a      	mov	r2, r3
 80036a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80036aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036b0:	e841 2300 	strex	r3, r2, [r1]
 80036b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1e6      	bne.n	800368a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3308      	adds	r3, #8
 80036c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	e853 3f00 	ldrex	r3, [r3]
 80036ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	3308      	adds	r3, #8
 80036da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036e4:	e841 2300 	strex	r3, r2, [r1]
 80036e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e5      	bne.n	80036bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d118      	bne.n	800372a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	e853 3f00 	ldrex	r3, [r3]
 8003704:	60bb      	str	r3, [r7, #8]
   return(result);
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f023 0310 	bic.w	r3, r3, #16
 800370c:	647b      	str	r3, [r7, #68]	@ 0x44
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003716:	61bb      	str	r3, [r7, #24]
 8003718:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371a:	6979      	ldr	r1, [r7, #20]
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	e841 2300 	strex	r3, r2, [r1]
 8003722:	613b      	str	r3, [r7, #16]
   return(result);
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1e6      	bne.n	80036f8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2220      	movs	r2, #32
 800372e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800373e:	bf00      	nop
 8003740:	3754      	adds	r7, #84	@ 0x54
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <memset>:
 800374a:	4402      	add	r2, r0
 800374c:	4603      	mov	r3, r0
 800374e:	4293      	cmp	r3, r2
 8003750:	d100      	bne.n	8003754 <memset+0xa>
 8003752:	4770      	bx	lr
 8003754:	f803 1b01 	strb.w	r1, [r3], #1
 8003758:	e7f9      	b.n	800374e <memset+0x4>
	...

0800375c <__libc_init_array>:
 800375c:	b570      	push	{r4, r5, r6, lr}
 800375e:	4d0d      	ldr	r5, [pc, #52]	@ (8003794 <__libc_init_array+0x38>)
 8003760:	4c0d      	ldr	r4, [pc, #52]	@ (8003798 <__libc_init_array+0x3c>)
 8003762:	1b64      	subs	r4, r4, r5
 8003764:	10a4      	asrs	r4, r4, #2
 8003766:	2600      	movs	r6, #0
 8003768:	42a6      	cmp	r6, r4
 800376a:	d109      	bne.n	8003780 <__libc_init_array+0x24>
 800376c:	4d0b      	ldr	r5, [pc, #44]	@ (800379c <__libc_init_array+0x40>)
 800376e:	4c0c      	ldr	r4, [pc, #48]	@ (80037a0 <__libc_init_array+0x44>)
 8003770:	f000 f818 	bl	80037a4 <_init>
 8003774:	1b64      	subs	r4, r4, r5
 8003776:	10a4      	asrs	r4, r4, #2
 8003778:	2600      	movs	r6, #0
 800377a:	42a6      	cmp	r6, r4
 800377c:	d105      	bne.n	800378a <__libc_init_array+0x2e>
 800377e:	bd70      	pop	{r4, r5, r6, pc}
 8003780:	f855 3b04 	ldr.w	r3, [r5], #4
 8003784:	4798      	blx	r3
 8003786:	3601      	adds	r6, #1
 8003788:	e7ee      	b.n	8003768 <__libc_init_array+0xc>
 800378a:	f855 3b04 	ldr.w	r3, [r5], #4
 800378e:	4798      	blx	r3
 8003790:	3601      	adds	r6, #1
 8003792:	e7f2      	b.n	800377a <__libc_init_array+0x1e>
 8003794:	08003808 	.word	0x08003808
 8003798:	08003808 	.word	0x08003808
 800379c:	08003808 	.word	0x08003808
 80037a0:	0800380c 	.word	0x0800380c

080037a4 <_init>:
 80037a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a6:	bf00      	nop
 80037a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037aa:	bc08      	pop	{r3}
 80037ac:	469e      	mov	lr, r3
 80037ae:	4770      	bx	lr

080037b0 <_fini>:
 80037b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b2:	bf00      	nop
 80037b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b6:	bc08      	pop	{r3}
 80037b8:	469e      	mov	lr, r3
 80037ba:	4770      	bx	lr
